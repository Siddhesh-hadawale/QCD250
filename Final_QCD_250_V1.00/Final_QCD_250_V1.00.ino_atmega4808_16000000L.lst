
C:\Users\SIDDHE~1.HAD\AppData\Local\Temp\arduino_build_778669/Final_QCD_250_V1.00.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000200 <__vectors>:
__vectors():
../../../../crt1/gcrt1.S:61
     200:	49 c0       	rjmp	.+146    	; 0x294 <__dtors_end>
     202:	00 00       	nop
../../../../crt1/gcrt1.S:67
     204:	6f c0       	rjmp	.+222    	; 0x2e4 <__bad_interrupt>
     206:	00 00       	nop
../../../../crt1/gcrt1.S:68
     208:	6d c0       	rjmp	.+218    	; 0x2e4 <__bad_interrupt>
     20a:	00 00       	nop
../../../../crt1/gcrt1.S:69
     20c:	6b c0       	rjmp	.+214    	; 0x2e4 <__bad_interrupt>
     20e:	00 00       	nop
../../../../crt1/gcrt1.S:70
     210:	69 c0       	rjmp	.+210    	; 0x2e4 <__bad_interrupt>
     212:	00 00       	nop
../../../../crt1/gcrt1.S:71
     214:	67 c0       	rjmp	.+206    	; 0x2e4 <__bad_interrupt>
     216:	00 00       	nop
../../../../crt1/gcrt1.S:72
     218:	65 c0       	rjmp	.+202    	; 0x2e4 <__bad_interrupt>
     21a:	00 00       	nop
../../../../crt1/gcrt1.S:73
     21c:	0c 94 75 19 	jmp	0x32ea	; 0x32ea <__vector_7>
../../../../crt1/gcrt1.S:74
     220:	61 c0       	rjmp	.+194    	; 0x2e4 <__bad_interrupt>
     222:	00 00       	nop
../../../../crt1/gcrt1.S:75
     224:	5f c0       	rjmp	.+190    	; 0x2e4 <__bad_interrupt>
     226:	00 00       	nop
../../../../crt1/gcrt1.S:76
     228:	5d c0       	rjmp	.+186    	; 0x2e4 <__bad_interrupt>
     22a:	00 00       	nop
../../../../crt1/gcrt1.S:77
     22c:	5b c0       	rjmp	.+182    	; 0x2e4 <__bad_interrupt>
     22e:	00 00       	nop
../../../../crt1/gcrt1.S:78
     230:	59 c0       	rjmp	.+178    	; 0x2e4 <__bad_interrupt>
     232:	00 00       	nop
../../../../crt1/gcrt1.S:79
     234:	0c 94 a5 17 	jmp	0x2f4a	; 0x2f4a <__vector_13>
../../../../crt1/gcrt1.S:80
     238:	0c 94 22 18 	jmp	0x3044	; 0x3044 <__vector_14>
../../../../crt1/gcrt1.S:81
     23c:	0c 94 c5 18 	jmp	0x318a	; 0x318a <__vector_15>
../../../../crt1/gcrt1.S:82
     240:	51 c0       	rjmp	.+162    	; 0x2e4 <__bad_interrupt>
     242:	00 00       	nop
../../../../crt1/gcrt1.S:83
     244:	0c 94 77 17 	jmp	0x2eee	; 0x2eee <__vector_17>
../../../../crt1/gcrt1.S:84
     248:	0c 94 51 17 	jmp	0x2ea2	; 0x2ea2 <__vector_18>
../../../../crt1/gcrt1.S:85
     24c:	4b c0       	rjmp	.+150    	; 0x2e4 <__bad_interrupt>
     24e:	00 00       	nop
../../../../crt1/gcrt1.S:86
     250:	49 c0       	rjmp	.+146    	; 0x2e4 <__bad_interrupt>
     252:	00 00       	nop
../../../../crt1/gcrt1.S:87
     254:	47 c0       	rjmp	.+142    	; 0x2e4 <__bad_interrupt>
     256:	00 00       	nop
../../../../crt1/gcrt1.S:88
     258:	45 c0       	rjmp	.+138    	; 0x2e4 <__bad_interrupt>
     25a:	00 00       	nop
../../../../crt1/gcrt1.S:89
     25c:	43 c0       	rjmp	.+134    	; 0x2e4 <__bad_interrupt>
     25e:	00 00       	nop
../../../../crt1/gcrt1.S:90
     260:	41 c0       	rjmp	.+130    	; 0x2e4 <__bad_interrupt>
     262:	00 00       	nop
../../../../crt1/gcrt1.S:91
     264:	0c 94 fa 17 	jmp	0x2ff4	; 0x2ff4 <__vector_25>
../../../../crt1/gcrt1.S:92
     268:	3d c0       	rjmp	.+122    	; 0x2e4 <__bad_interrupt>
     26a:	00 00       	nop
../../../../crt1/gcrt1.S:93
     26c:	3b c0       	rjmp	.+118    	; 0x2e4 <__bad_interrupt>
     26e:	00 00       	nop
../../../../crt1/gcrt1.S:94
     270:	39 c0       	rjmp	.+114    	; 0x2e4 <__bad_interrupt>
     272:	00 00       	nop
../../../../crt1/gcrt1.S:95
     274:	37 c0       	rjmp	.+110    	; 0x2e4 <__bad_interrupt>
     276:	00 00       	nop
../../../../crt1/gcrt1.S:96
     278:	35 c0       	rjmp	.+106    	; 0x2e4 <__bad_interrupt>
     27a:	00 00       	nop
../../../../crt1/gcrt1.S:97
     27c:	33 c0       	rjmp	.+102    	; 0x2e4 <__bad_interrupt>
     27e:	00 00       	nop
../../../../crt1/gcrt1.S:98
     280:	31 c0       	rjmp	.+98     	; 0x2e4 <__bad_interrupt>
     282:	00 00       	nop
../../../../crt1/gcrt1.S:99
     284:	2f c0       	rjmp	.+94     	; 0x2e4 <__bad_interrupt>
     286:	00 00       	nop
../../../../crt1/gcrt1.S:100
     288:	2d c0       	rjmp	.+90     	; 0x2e4 <__bad_interrupt>
     28a:	00 00       	nop
../../../../crt1/gcrt1.S:101
     28c:	2b c0       	rjmp	.+86     	; 0x2e4 <__bad_interrupt>
	...

00000290 <__ctors_start>:
__trampolines_start():
     290:	55 1a       	sub	r5, r21

00000292 <__ctors_end>:
__dtors_start():
     292:	ce 21       	and	r28, r14

00000294 <__dtors_end>:
__dtors_end():
../../../../crt1/gcrt1.S:230
     294:	11 24       	eor	r1, r1
../../../../crt1/gcrt1.S:231
     296:	1f be       	out	0x3f, r1	; 63
../../../../crt1/gcrt1.S:232
     298:	cf ef       	ldi	r28, 0xFF	; 255
../../../../crt1/gcrt1.S:234
     29a:	cd bf       	out	0x3d, r28	; 61
../../../../crt1/gcrt1.S:236
     29c:	df e3       	ldi	r29, 0x3F	; 63
../../../../crt1/gcrt1.S:237
     29e:	de bf       	out	0x3e, r29	; 62

000002a0 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     2a0:	2b e2       	ldi	r18, 0x2B	; 43
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     2a2:	aa e1       	ldi	r26, 0x1A	; 26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     2a4:	b8 e2       	ldi	r27, 0x28	; 40
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     2a6:	01 c0       	rjmp	.+2      	; 0x2aa <.do_clear_bss_start>

000002a8 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     2a8:	1d 92       	st	X+, r1

000002aa <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     2aa:	a7 34       	cpi	r26, 0x47	; 71
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     2ac:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     2ae:	e1 f7       	brne	.-8      	; 0x2a8 <.do_clear_bss_loop>

000002b0 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
     2b0:	18 e2       	ldi	r17, 0x28	; 40
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
     2b2:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
     2b4:	b8 e2       	ldi	r27, 0x28	; 40
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
     2b6:	e5 e8       	ldi	r30, 0x85	; 133
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
     2b8:	f1 e5       	ldi	r31, 0x51	; 81
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
     2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
     2bc:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
     2be:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
     2c0:	aa 31       	cpi	r26, 0x1A	; 26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
     2c2:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
     2c4:	d9 f7       	brne	.-10     	; 0x2bc <__do_copy_data+0xc>

000002c6 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     2c6:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     2c8:	c9 e4       	ldi	r28, 0x49	; 73
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     2ca:	d1 e0       	ldi	r29, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     2cc:	04 c0       	rjmp	.+8      	; 0x2d6 <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     2ce:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     2d0:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     2d2:	0e 94 9c 24 	call	0x4938	; 0x4938 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     2d6:	c8 34       	cpi	r28, 0x48	; 72
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     2d8:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     2da:	c9 f7       	brne	.-14     	; 0x2ce <__do_global_ctors+0x8>
../../../../crt1/gcrt1.S:314
     2dc:	0e 94 ab 1c 	call	0x3956	; 0x3956 <main>
../../../../crt1/gcrt1.S:315
     2e0:	0c 94 99 26 	jmp	0x4d32	; 0x4d32 <__do_global_dtors>

000002e4 <__bad_interrupt>:
__vector_22():
../../../../crt1/gcrt1.S:209
     2e4:	8d cf       	rjmp	.-230    	; 0x200 <__vectors>

000002e6 <Flow_delay1()>:
Flow_delay1():
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/Input_Checking.cpp:26
   pinMode(level_Sensor,INPUT_PULLUP);
}

void Flow_delay1()
{
 Flow_Err_INC++; 
     2e6:	80 91 b3 28 	lds	r24, 0x28B3	; 0x8028b3 <Flow_Err_INC>
     2ea:	90 91 b4 28 	lds	r25, 0x28B4	; 0x8028b4 <Flow_Err_INC+0x1>
     2ee:	01 96       	adiw	r24, 0x01	; 1
     2f0:	80 93 b3 28 	sts	0x28B3, r24	; 0x8028b3 <Flow_Err_INC>
     2f4:	90 93 b4 28 	sts	0x28B4, r25	; 0x8028b4 <Flow_Err_INC+0x1>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/Input_Checking.cpp:27
}
     2f8:	08 95       	ret

000002fa <Dispenseclass::ticker_stop() [clone .constprop.89]>:
stop():
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:59
	enabled = true;
	status = RUNNING;
	}

void Ticker::stop() {
	enabled = false;
     2fa:	e7 e4       	ldi	r30, 0x47	; 71
     2fc:	fa e2       	ldi	r31, 0x2A	; 42
     2fe:	10 82       	st	Z, r1
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:60
	counts = 0;
     300:	13 86       	std	Z+11, r1	; 0x0b
     302:	14 86       	std	Z+12, r1	; 0x0c
     304:	15 86       	std	Z+13, r1	; 0x0d
     306:	16 86       	std	Z+14, r1	; 0x0e
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:61
	status = STOPPED;
     308:	17 86       	std	Z+15, r1	; 0x0f
     30a:	10 8a       	std	Z+16, r1	; 0x10
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:59
	enabled = true;
	status = RUNNING;
	}

void Ticker::stop() {
	enabled = false;
     30c:	ec e2       	ldi	r30, 0x2C	; 44
     30e:	fa e2       	ldi	r31, 0x2A	; 42
     310:	10 82       	st	Z, r1
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:60
	counts = 0;
     312:	13 86       	std	Z+11, r1	; 0x0b
     314:	14 86       	std	Z+12, r1	; 0x0c
     316:	15 86       	std	Z+13, r1	; 0x0d
     318:	16 86       	std	Z+14, r1	; 0x0e
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:61
	status = STOPPED;
     31a:	17 86       	std	Z+15, r1	; 0x0f
     31c:	10 8a       	std	Z+16, r1	; 0x10
ticker_stop():
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/Dispensing.cpp:174

void Dispenseclass:: ticker_stop()
{
    pump_Wait.stop();
    pump_on1.stop(); 
}
     31e:	08 95       	ret

00000320 <UartClass::availableForWrite()>:
availableForWrite():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:295
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC
  {
    head = _tx_buffer_head;
     320:	fc 01       	movw	r30, r24
     322:	50 8d       	ldd	r21, Z+24	; 0x18
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:296
    tail = _tx_buffer_tail;
     324:	41 8d       	ldd	r20, Z+25	; 0x19
     326:	25 2f       	mov	r18, r21
     328:	30 e0       	ldi	r19, 0x00	; 0
     32a:	84 2f       	mov	r24, r20
     32c:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:298
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     32e:	82 1b       	sub	r24, r18
     330:	93 0b       	sbc	r25, r19
     332:	54 17       	cp	r21, r20
     334:	10 f0       	brcs	.+4      	; 0x33a <UartClass::availableForWrite()+0x1a>
     336:	cf 96       	adiw	r24, 0x3f	; 63
     338:	08 95       	ret
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:299
  return tail - head - 1;
     33a:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:300
}
     33c:	08 95       	ret

0000033e <UartClass::read()>:
read():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:274
    return _rx_buffer[_rx_buffer_tail];
  }
}

int UartClass::read(void)
{
     33e:	fc 01       	movw	r30, r24
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:276
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail)
     340:	96 89       	ldd	r25, Z+22	; 0x16
     342:	87 89       	ldd	r24, Z+23	; 0x17
     344:	98 17       	cp	r25, r24
     346:	61 f0       	breq	.+24     	; 0x360 <UartClass::read()+0x22>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:282
  {
    return -1;
  }
  else
  {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     348:	a7 89       	ldd	r26, Z+23	; 0x17
     34a:	ae 0f       	add	r26, r30
     34c:	bf 2f       	mov	r27, r31
     34e:	b1 1d       	adc	r27, r1
     350:	5d 96       	adiw	r26, 0x1d	; 29
     352:	8c 91       	ld	r24, X
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:283
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     354:	97 89       	ldd	r25, Z+23	; 0x17
     356:	9f 5f       	subi	r25, 0xFF	; 255
     358:	9f 73       	andi	r25, 0x3F	; 63
     35a:	97 8b       	std	Z+23, r25	; 0x17
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:284
    return c;
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	08 95       	ret
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:278
int UartClass::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail)
  {
    return -1;
     360:	8f ef       	ldi	r24, 0xFF	; 255
     362:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:286
  {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     364:	08 95       	ret

00000366 <UartClass::peek()>:
peek():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:262
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int UartClass::peek(void)
{
     366:	fc 01       	movw	r30, r24
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:263
  if (_rx_buffer_head == _rx_buffer_tail)
     368:	96 89       	ldd	r25, Z+22	; 0x16
     36a:	87 89       	ldd	r24, Z+23	; 0x17
     36c:	98 17       	cp	r25, r24
     36e:	31 f0       	breq	.+12     	; 0x37c <UartClass::peek()+0x16>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:269
  {
    return -1;
  }
  else
  {
    return _rx_buffer[_rx_buffer_tail];
     370:	87 89       	ldd	r24, Z+23	; 0x17
     372:	e8 0f       	add	r30, r24
     374:	f1 1d       	adc	r31, r1
     376:	85 8d       	ldd	r24, Z+29	; 0x1d
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	08 95       	ret
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:265

int UartClass::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail)
  {
    return -1;
     37c:	8f ef       	ldi	r24, 0xFF	; 255
     37e:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:271
  }
  else
  {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     380:	08 95       	ret

00000382 <UartClass::available()>:
available():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:257
  // Note: Does not change output pins
  _written = false;
}

int UartClass::available(void)
{
     382:	fc 01       	movw	r30, r24
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:258
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     384:	96 89       	ldd	r25, Z+22	; 0x16
     386:	27 89       	ldd	r18, Z+23	; 0x17
     388:	89 2f       	mov	r24, r25
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	80 5c       	subi	r24, 0xC0	; 192
     38e:	9f 4f       	sbci	r25, 0xFF	; 255
     390:	82 1b       	sub	r24, r18
     392:	91 09       	sbc	r25, r1
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:259
}
     394:	8f 73       	andi	r24, 0x3F	; 63
     396:	99 27       	eor	r25, r25
     398:	08 95       	ret

0000039a <UartClass::end()>:
end():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:240
  // Restore SREG content
  SREG = oldSREG;
}

void UartClass::end()
{
     39a:	cf 93       	push	r28
     39c:	df 93       	push	r29
     39e:	ec 01       	movw	r28, r24
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:242
  // wait for transmission of outgoing data
  flush();
     3a0:	e8 81       	ld	r30, Y
     3a2:	f9 81       	ldd	r31, Y+1	; 0x01
     3a4:	06 80       	ldd	r0, Z+6	; 0x06
     3a6:	f7 81       	ldd	r31, Z+7	; 0x07
     3a8:	e0 2d       	mov	r30, r0
     3aa:	09 95       	icall
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:246

  // Disable receiver and transmitter as well as the RX complete and
  // data register empty interrupts.
  (*_hwserial_module).CTRLB &= ~(USART_RXEN_bm | USART_TXEN_bm);
     3ac:	ec 85       	ldd	r30, Y+12	; 0x0c
     3ae:	fd 85       	ldd	r31, Y+13	; 0x0d
     3b0:	86 81       	ldd	r24, Z+6	; 0x06
     3b2:	8f 73       	andi	r24, 0x3F	; 63
     3b4:	86 83       	std	Z+6, r24	; 0x06
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:247
  (*_hwserial_module).CTRLA &= ~(USART_RXCIE_bm | USART_DREIE_bm);
     3b6:	ec 85       	ldd	r30, Y+12	; 0x0c
     3b8:	fd 85       	ldd	r31, Y+13	; 0x0d
     3ba:	85 81       	ldd	r24, Z+5	; 0x05
     3bc:	8f 75       	andi	r24, 0x5F	; 95
     3be:	85 83       	std	Z+5, r24	; 0x05
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:250

  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
     3c0:	8f 89       	ldd	r24, Y+23	; 0x17
     3c2:	8e 8b       	std	Y+22, r24	; 0x16
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:253

  // Note: Does not change output pins
  _written = false;
     3c4:	1d 8a       	std	Y+21, r1	; 0x15
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:254
}
     3c6:	df 91       	pop	r29
     3c8:	cf 91       	pop	r28
     3ca:	08 95       	ret

000003cc <UartClass::swap(unsigned char)>:
swap():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:161
  _pin_set = 0; // Default to standard
  return false;
}

bool UartClass::swap(uint8_t state)
{
     3cc:	fc 01       	movw	r30, r24
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:162
  if (state == 1) // Use alternative pin position
     3ce:	61 30       	cpi	r22, 0x01	; 1
     3d0:	19 f4       	brne	.+6      	; 0x3d8 <UartClass::swap(unsigned char)+0xc>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:164
  {
    _pin_set = state;
     3d2:	64 8b       	std	Z+20, r22	; 0x14
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:170
    return true;
  }
  else if (state == 0) // Use default pin position
  {
    _pin_set = 0;
    return true;
     3d4:	81 e0       	ldi	r24, 0x01	; 1
     3d6:	08 95       	ret
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:169
    _pin_set = state;
    return true;
  }
  else if (state == 0) // Use default pin position
  {
    _pin_set = 0;
     3d8:	14 8a       	std	Z+20, r1	; 0x14
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:167
  if (state == 1) // Use alternative pin position
  {
    _pin_set = state;
    return true;
  }
  else if (state == 0) // Use default pin position
     3da:	66 23       	and	r22, r22
     3dc:	d9 f3       	breq	.-10     	; 0x3d4 <UartClass::swap(unsigned char)+0x8>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:175
    return true;
  }
  else // Invalid swap value. Use default position
  {
    _pin_set = 0;
    return false;
     3de:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:177
  }
}
     3e0:	08 95       	ret

000003e2 <UartClass::pins(unsigned char, unsigned char)>:
pins():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:147

// Public Methods //////////////////////////////////////////////////////////////

// Invoke this function before 'begin' to define the pins used
bool UartClass::pins(uint8_t tx, uint8_t rx)
{
     3e2:	dc 01       	movw	r26, r24
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:148
  for (_pin_set = 0; _pin_set < SERIAL_PIN_SETS; ++_pin_set)
     3e4:	54 96       	adiw	r26, 0x14	; 20
     3e6:	1c 92       	st	X, r1
     3e8:	54 97       	sbiw	r26, 0x14	; 20
     3ea:	54 96       	adiw	r26, 0x14	; 20
     3ec:	8c 91       	ld	r24, X
     3ee:	54 97       	sbiw	r26, 0x14	; 20
     3f0:	82 30       	cpi	r24, 0x02	; 2
     3f2:	a0 f4       	brcc	.+40     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:150
  {
    if (tx == _hw_set[_pin_set].tx_pin && rx == _hw_set[_pin_set].rx_pin)
     3f4:	28 2f       	mov	r18, r24
     3f6:	30 e0       	ldi	r19, 0x00	; 0
     3f8:	f9 01       	movw	r30, r18
     3fa:	ee 0f       	add	r30, r30
     3fc:	ff 1f       	adc	r31, r31
     3fe:	e2 0f       	add	r30, r18
     400:	f3 1f       	adc	r31, r19
     402:	ea 0f       	add	r30, r26
     404:	fb 1f       	adc	r31, r27
     406:	97 85       	ldd	r25, Z+15	; 0x0f
     408:	96 13       	cpse	r25, r22
     40a:	03 c0       	rjmp	.+6      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     40c:	96 85       	ldd	r25, Z+14	; 0x0e
     40e:	94 17       	cp	r25, r20
     410:	49 f0       	breq	.+18     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:148
// Public Methods //////////////////////////////////////////////////////////////

// Invoke this function before 'begin' to define the pins used
bool UartClass::pins(uint8_t tx, uint8_t rx)
{
  for (_pin_set = 0; _pin_set < SERIAL_PIN_SETS; ++_pin_set)
     412:	8f 5f       	subi	r24, 0xFF	; 255
     414:	54 96       	adiw	r26, 0x14	; 20
     416:	8c 93       	st	X, r24
     418:	54 97       	sbiw	r26, 0x14	; 20
     41a:	e7 cf       	rjmp	.-50     	; 0x3ea <UartClass::pins(unsigned char, unsigned char)+0x8>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:156
    {
      // We are good, this set of pins is supported
      return true;
    }
  }
  _pin_set = 0; // Default to standard
     41c:	54 96       	adiw	r26, 0x14	; 20
     41e:	1c 92       	st	X, r1
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:157
  return false;
     420:	80 e0       	ldi	r24, 0x00	; 0
     422:	08 95       	ret
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:153
  for (_pin_set = 0; _pin_set < SERIAL_PIN_SETS; ++_pin_set)
  {
    if (tx == _hw_set[_pin_set].tx_pin && rx == _hw_set[_pin_set].rx_pin)
    {
      // We are good, this set of pins is supported
      return true;
     424:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:158
    }
  }
  _pin_set = 0; // Default to standard
  return false;
}
     426:	08 95       	ret

00000428 <UartClass::_tx_data_empty_irq()>:
_tx_data_empty_irq():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:89
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void UartClass::_tx_data_empty_irq(void)
{
     428:	cf 93       	push	r28
     42a:	df 93       	push	r29
     42c:	fc 01       	movw	r30, r24
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:91
  // Check if tx buffer already empty.
  if (_tx_buffer_head == _tx_buffer_tail)
     42e:	90 8d       	ldd	r25, Z+24	; 0x18
     430:	81 8d       	ldd	r24, Z+25	; 0x19
     432:	c4 85       	ldd	r28, Z+12	; 0x0c
     434:	d5 85       	ldd	r29, Z+13	; 0x0d
     436:	98 13       	cpse	r25, r24
     438:	06 c0       	rjmp	.+12     	; 0x446 <UartClass::_tx_data_empty_irq()+0x1e>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:94
  {
    // Buffer empty, so disable "data register empty" interrupt
    (*_hwserial_module).CTRLA &= (~USART_DREIE_bm);
     43a:	8d 81       	ldd	r24, Y+5	; 0x05
     43c:	8f 7d       	andi	r24, 0xDF	; 223
     43e:	8d 83       	std	Y+5, r24	; 0x05
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:122
    {
      CPUINT.LVL1VEC = _prev_lvl1_interrupt_vect;
      _hwserial_dre_interrupt_elevated = 0;
    }
  }
}
     440:	df 91       	pop	r29
     442:	cf 91       	pop	r28
     444:	08 95       	ret
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:100
    return;
  }

  // There must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     446:	a1 8d       	ldd	r26, Z+25	; 0x19
     448:	ae 0f       	add	r26, r30
     44a:	bf 2f       	mov	r27, r31
     44c:	b1 1d       	adc	r27, r1
     44e:	a3 5a       	subi	r26, 0xA3	; 163
     450:	bf 4f       	sbci	r27, 0xFF	; 255
     452:	2c 91       	ld	r18, X
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:101
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     454:	81 8d       	ldd	r24, Z+25	; 0x19
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	01 96       	adiw	r24, 0x01	; 1
     45a:	8f 73       	andi	r24, 0x3F	; 63
     45c:	99 27       	eor	r25, r25
     45e:	81 8f       	std	Z+25, r24	; 0x19
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:106

  // clear the TXCIF flag -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  (*_hwserial_module).STATUS = USART_TXCIF_bm;
     460:	80 e4       	ldi	r24, 0x40	; 64
     462:	8c 83       	std	Y+4, r24	; 0x04
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:108

  (*_hwserial_module).TXDATAL = c;
     464:	a4 85       	ldd	r26, Z+12	; 0x0c
     466:	b5 85       	ldd	r27, Z+13	; 0x0d
     468:	12 96       	adiw	r26, 0x02	; 2
     46a:	2c 93       	st	X, r18
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:110

  if (_tx_buffer_head == _tx_buffer_tail)
     46c:	90 8d       	ldd	r25, Z+24	; 0x18
     46e:	81 8d       	ldd	r24, Z+25	; 0x19
     470:	98 13       	cpse	r25, r24
     472:	e6 cf       	rjmp	.-52     	; 0x440 <UartClass::_tx_data_empty_irq()+0x18>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:113
  {
    // Buffer empty, so disable "data register empty" interrupt
    (*_hwserial_module).CTRLA &= (~USART_DREIE_bm);
     474:	a4 85       	ldd	r26, Z+12	; 0x0c
     476:	b5 85       	ldd	r27, Z+13	; 0x0d
     478:	15 96       	adiw	r26, 0x05	; 5
     47a:	8c 91       	ld	r24, X
     47c:	15 97       	sbiw	r26, 0x05	; 5
     47e:	8f 7d       	andi	r24, 0xDF	; 223
     480:	15 96       	adiw	r26, 0x05	; 5
     482:	8c 93       	st	X, r24
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:116

    //Take the DRE interrupt back no normal priority level if it has been elevated
    if (_hwserial_dre_interrupt_elevated)
     484:	83 8d       	ldd	r24, Z+27	; 0x1b
     486:	88 23       	and	r24, r24
     488:	d9 f2       	breq	.-74     	; 0x440 <UartClass::_tx_data_empty_irq()+0x18>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:118
    {
      CPUINT.LVL1VEC = _prev_lvl1_interrupt_vect;
     48a:	84 8d       	ldd	r24, Z+28	; 0x1c
     48c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <__TEXT_REGION_LENGTH__+0x7f4113>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:119
      _hwserial_dre_interrupt_elevated = 0;
     490:	13 8e       	std	Z+27, r1	; 0x1b
     492:	d6 cf       	rjmp	.-84     	; 0x440 <UartClass::_tx_data_empty_irq()+0x18>

00000494 <UartClass::_poll_tx_data_empty()>:
_poll_tx_data_empty():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:126
  }
}

// To invoke data empty "interrupt" via a call, use this method
void UartClass::_poll_tx_data_empty(void)
{
     494:	dc 01       	movw	r26, r24
     496:	1c 96       	adiw	r26, 0x0c	; 12
     498:	ed 91       	ld	r30, X+
     49a:	fc 91       	ld	r31, X
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:127
  if ((!(SREG & CPU_I_bm)) || (!((*_hwserial_module).CTRLA & USART_DREIE_bm)))
     49c:	0f b6       	in	r0, 0x3f	; 63
     49e:	07 fe       	sbrs	r0, 7
     4a0:	03 c0       	rjmp	.+6      	; 0x4a8 <UartClass::_poll_tx_data_empty()+0x14>
     4a2:	25 81       	ldd	r18, Z+5	; 0x05
     4a4:	25 fd       	sbrc	r18, 5
     4a6:	03 c0       	rjmp	.+6      	; 0x4ae <UartClass::_poll_tx_data_empty()+0x1a>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:135
    // so we'll have to poll the "data register empty" flag ourselves.
    // If it is set, pretend an interrupt has happened and call the handler
    // to free up space for us.

    // Invoke interrupt handler only if conditions data register is empty
    if ((*_hwserial_module).STATUS & USART_DREIF_bm)
     4a8:	24 81       	ldd	r18, Z+4	; 0x04
     4aa:	25 fd       	sbrc	r18, 5
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:137
    {
      _tx_data_empty_irq();
     4ac:	bd cf       	rjmp	.-134    	; 0x428 <UartClass::_tx_data_empty_irq()>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:141
    }
  }
  // In case interrupts are enabled, the interrupt routine will be invoked by itself
}
     4ae:	08 95       	ret

000004b0 <UartClass::write(unsigned char)>:
write():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:336
  // If we get here, nothing is queued anymore (DREIE is disabled) and
  // the hardware finished transmission (TXCIF is set).
}

size_t UartClass::write(uint8_t c)
{
     4b0:	ef 92       	push	r14
     4b2:	ff 92       	push	r15
     4b4:	0f 93       	push	r16
     4b6:	1f 93       	push	r17
     4b8:	cf 93       	push	r28
     4ba:	df 93       	push	r29
     4bc:	ec 01       	movw	r28, r24
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:337
  _written = true;
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	8d 8b       	std	Y+21, r24	; 0x15
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:343

  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective data rate at high (>
  // 500kbit/s) bit rates, where interrupt overhead becomes a slowdown.
  if ((_tx_buffer_head == _tx_buffer_tail) && ((*_hwserial_module).STATUS & USART_DREIF_bm))
     4c2:	98 8d       	ldd	r25, Y+24	; 0x18
     4c4:	89 8d       	ldd	r24, Y+25	; 0x19
     4c6:	98 13       	cpse	r25, r24
     4c8:	1c c0       	rjmp	.+56     	; 0x502 <UartClass::write(unsigned char)+0x52>
     4ca:	ac 85       	ldd	r26, Y+12	; 0x0c
     4cc:	bd 85       	ldd	r27, Y+13	; 0x0d
     4ce:	14 96       	adiw	r26, 0x04	; 4
     4d0:	8c 91       	ld	r24, X
     4d2:	14 97       	sbiw	r26, 0x04	; 4
     4d4:	85 ff       	sbrs	r24, 5
     4d6:	15 c0       	rjmp	.+42     	; 0x502 <UartClass::write(unsigned char)+0x52>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:345
  {
    (*_hwserial_module).TXDATAL = c;
     4d8:	12 96       	adiw	r26, 0x02	; 2
     4da:	6c 93       	st	X, r22
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:346
    (*_hwserial_module).STATUS = USART_TXCIF_bm;
     4dc:	ac 85       	ldd	r26, Y+12	; 0x0c
     4de:	bd 85       	ldd	r27, Y+13	; 0x0d
     4e0:	80 e4       	ldi	r24, 0x40	; 64
     4e2:	14 96       	adiw	r26, 0x04	; 4
     4e4:	8c 93       	st	X, r24
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:350

    // Make sure data register empty interrupt is disabled to avoid
    // that the interrupt handler is called in this situation
    (*_hwserial_module).CTRLA &= (~USART_DREIE_bm);
     4e6:	ec 85       	ldd	r30, Y+12	; 0x0c
     4e8:	fd 85       	ldd	r31, Y+13	; 0x0d
     4ea:	85 81       	ldd	r24, Z+5	; 0x05
     4ec:	8f 7d       	andi	r24, 0xDF	; 223
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:380

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  // Enable data "register empty interrupt"
  (*_hwserial_module).CTRLA |= USART_DREIE_bm;
     4ee:	85 83       	std	Z+5, r24	; 0x05
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:383

  return 1;
}
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	df 91       	pop	r29
     4f6:	cf 91       	pop	r28
     4f8:	1f 91       	pop	r17
     4fa:	0f 91       	pop	r16
     4fc:	ff 90       	pop	r15
     4fe:	ef 90       	pop	r14
     500:	08 95       	ret
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:357
    return 1;
  }

  //Check if we are inside an ISR already (could be from by a source other than UART),
  // in which case the UART ISRs will be blocked.
  if (CPUINT.STATUS & CPUINT_LVL0EX_bm)
     502:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <__TEXT_REGION_LENGTH__+0x7f4111>
     506:	80 ff       	sbrs	r24, 0
     508:	08 c0       	rjmp	.+16     	; 0x51a <UartClass::write(unsigned char)+0x6a>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:361
  {
    //Elevate the priority level of the Data Register Empty Interrupt vector
    //and copy whatever vector number that might be in the register already.
    _prev_lvl1_interrupt_vect = CPUINT.LVL1VEC;
     50a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <__TEXT_REGION_LENGTH__+0x7f4113>
     50e:	8c 8f       	std	Y+28, r24	; 0x1c
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:362
    CPUINT.LVL1VEC = _hwserial_dre_interrupt_vect_num;
     510:	8a 8d       	ldd	r24, Y+26	; 0x1a
     512:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <__TEXT_REGION_LENGTH__+0x7f4113>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:364

    _hwserial_dre_interrupt_elevated = 1;
     516:	81 e0       	ldi	r24, 0x01	; 1
     518:	8b 8f       	std	Y+27, r24	; 0x1b
     51a:	f6 2e       	mov	r15, r22
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:367
  }

  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     51c:	08 8d       	ldd	r16, Y+24	; 0x18
     51e:	10 e0       	ldi	r17, 0x00	; 0
     520:	0f 5f       	subi	r16, 0xFF	; 255
     522:	1f 4f       	sbci	r17, 0xFF	; 255
     524:	0f 73       	andi	r16, 0x3F	; 63
     526:	11 27       	eor	r17, r17
     528:	e0 2e       	mov	r14, r16
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:371

  //If the output buffer is full, there's nothing for it other than to
  //wait for the interrupt handler to empty it a bit (or emulate interrupts)
  while (i == _tx_buffer_tail)
     52a:	89 8d       	ldd	r24, Y+25	; 0x19
     52c:	8e 11       	cpse	r24, r14
     52e:	03 c0       	rjmp	.+6      	; 0x536 <UartClass::write(unsigned char)+0x86>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:373
  {
    _poll_tx_data_empty();
     530:	ce 01       	movw	r24, r28
     532:	b0 df       	rcall	.-160    	; 0x494 <UartClass::_poll_tx_data_empty()>
     534:	fa cf       	rjmp	.-12     	; 0x52a <UartClass::write(unsigned char)+0x7a>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:376
  }

  _tx_buffer[_tx_buffer_head] = c;
     536:	e8 8d       	ldd	r30, Y+24	; 0x18
     538:	ec 0f       	add	r30, r28
     53a:	fd 2f       	mov	r31, r29
     53c:	f1 1d       	adc	r31, r1
     53e:	e3 5a       	subi	r30, 0xA3	; 163
     540:	ff 4f       	sbci	r31, 0xFF	; 255
     542:	f0 82       	st	Z, r15
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:377
  _tx_buffer_head = i;
     544:	08 8f       	std	Y+24, r16	; 0x18
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:380

  // Enable data "register empty interrupt"
  (*_hwserial_module).CTRLA |= USART_DREIE_bm;
     546:	ec 85       	ldd	r30, Y+12	; 0x0c
     548:	fd 85       	ldd	r31, Y+13	; 0x0d
     54a:	85 81       	ldd	r24, Z+5	; 0x05
     54c:	80 62       	ori	r24, 0x20	; 32
     54e:	cf cf       	rjmp	.-98     	; 0x4ee <UartClass::write(unsigned char)+0x3e>

00000550 <UartClass::flush()>:
flush():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:303
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void UartClass::flush()
{
     550:	cf 93       	push	r28
     552:	df 93       	push	r29
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:307
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXCIF (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     554:	fc 01       	movw	r30, r24
     556:	25 89       	ldd	r18, Z+21	; 0x15
     558:	22 23       	and	r18, r18
     55a:	c1 f0       	breq	.+48     	; 0x58c <UartClass::flush()+0x3c>
     55c:	ec 01       	movw	r28, r24
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:314
    return;
  }

  //Check if we are inside an ISR already (e.g. connected to a different peripheral then UART), in which case the UART ISRs will not be called.
  //Temporarily elevate the DRE interrupt to allow it to run.
  if (CPUINT.STATUS & CPUINT_LVL0EX_bm)
     55e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <__TEXT_REGION_LENGTH__+0x7f4111>
     562:	80 ff       	sbrs	r24, 0
     564:	08 c0       	rjmp	.+16     	; 0x576 <UartClass::flush()+0x26>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:318
  {
    //Elevate the priority level of the Data Register Empty Interrupt vector
    //and copy whatever vector number that might be in the register already.
    _prev_lvl1_interrupt_vect = CPUINT.LVL1VEC;
     566:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <__TEXT_REGION_LENGTH__+0x7f4113>
     56a:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:319
    CPUINT.LVL1VEC = _hwserial_dre_interrupt_vect_num;
     56c:	82 8d       	ldd	r24, Z+26	; 0x1a
     56e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <__TEXT_REGION_LENGTH__+0x7f4113>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:321

    _hwserial_dre_interrupt_elevated = 1;
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	83 8f       	std	Z+27, r24	; 0x1b
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:325
  }

  // Spin until the data-register-empty-interrupt is disabled and TX complete interrupt flag is raised
  while (((*_hwserial_module).CTRLA & USART_DREIE_bm) || (!((*_hwserial_module).STATUS & USART_TXCIF_bm)))
     576:	ec 85       	ldd	r30, Y+12	; 0x0c
     578:	fd 85       	ldd	r31, Y+13	; 0x0d
     57a:	85 81       	ldd	r24, Z+5	; 0x05
     57c:	85 fd       	sbrc	r24, 5
     57e:	03 c0       	rjmp	.+6      	; 0x586 <UartClass::flush()+0x36>
     580:	84 81       	ldd	r24, Z+4	; 0x04
     582:	86 fd       	sbrc	r24, 6
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:329
  {
    // If interrupts are globally disabled or the and DR empty interrupt is disabled,
    // poll the "data register empty" interrupt flag to prevent deadlock
    _poll_tx_data_empty();
     584:	03 c0       	rjmp	.+6      	; 0x58c <UartClass::flush()+0x3c>
     586:	ce 01       	movw	r24, r28
     588:	85 df       	rcall	.-246    	; 0x494 <UartClass::_poll_tx_data_empty()>
     58a:	f5 cf       	rjmp	.-22     	; 0x576 <UartClass::flush()+0x26>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:333
  }
  // If we get here, nothing is queued anymore (DREIE is disabled) and
  // the hardware finished transmission (TXCIF is set).
}
     58c:	df 91       	pop	r29
     58e:	cf 91       	pop	r28
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART0.cpp:65

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available()
{
  return Serial.available();
     590:	08 95       	ret

00000592 <Serial0_available()>:
Serial0_available():
     592:	88 ee       	ldi	r24, 0xE8	; 232
     594:	98 e2       	ldi	r25, 0x28	; 40
     596:	f5 de       	rcall	.-534    	; 0x382 <UartClass::available()>
     598:	21 e0       	ldi	r18, 0x01	; 1
     59a:	89 2b       	or	r24, r25
     59c:	09 f4       	brne	.+2      	; 0x5a0 <Serial0_available()+0xe>
     59e:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART0.cpp:66
}
     5a0:	82 2f       	mov	r24, r18
     5a2:	08 95       	ret

000005a4 <serialEventRun()>:
serialEventRun():
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	89 2b       	or	r24, r25
     5aa:	21 f0       	breq	.+8      	; 0x5b4 <serialEventRun()+0x10>
     5ac:	f2 df       	rcall	.-28     	; 0x592 <Serial0_available()>
     5ae:	81 11       	cpse	r24, r1
     5b0:	0e 94 00 00 	call	0	; 0x0 <__TEXT_REGION_ORIGIN__>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:69
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     5b4:	80 e0       	ldi	r24, 0x00	; 0
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	89 2b       	or	r24, r25
     5ba:	49 f0       	breq	.+18     	; 0x5ce <serialEventRun()+0x2a>
     5bc:	80 e0       	ldi	r24, 0x00	; 0
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	89 2b       	or	r24, r25
     5c2:	29 f0       	breq	.+10     	; 0x5ce <serialEventRun()+0x2a>
     5c4:	0e 94 00 00 	call	0	; 0x0 <__TEXT_REGION_ORIGIN__>
     5c8:	81 11       	cpse	r24, r1
     5ca:	0e 94 00 00 	call	0	; 0x0 <__TEXT_REGION_ORIGIN__>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:72
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	89 2b       	or	r24, r25
     5d4:	49 f0       	breq	.+18     	; 0x5e8 <serialEventRun()+0x44>
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	89 2b       	or	r24, r25
     5dc:	29 f0       	breq	.+10     	; 0x5e8 <serialEventRun()+0x44>
     5de:	0e 94 00 00 	call	0	; 0x0 <__TEXT_REGION_ORIGIN__>
     5e2:	81 11       	cpse	r24, r1
     5e4:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:77
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
     5e8:	08 95       	ret

000005ea <singleUPclick1()>:
singleUPclick1():
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:83
  LongPress5sec.update();
}

void singleUPclick1()
{ 
  if(screen == 1)  //............................................................enter into menu screen traversing
     5ea:	80 91 e5 28 	lds	r24, 0x28E5	; 0x8028e5 <screen>
     5ee:	81 30       	cpi	r24, 0x01	; 1
     5f0:	09 f0       	breq	.+2      	; 0x5f4 <singleUPclick1()+0xa>
     5f2:	b6 c0       	rjmp	.+364    	; 0x760 <singleUPclick1()+0x176>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:85
   {  
   if(back==0)     //............................................................Menu display 
     5f4:	80 91 39 28 	lds	r24, 0x2839	; 0x802839 <back>
     5f8:	81 11       	cpse	r24, r1
     5fa:	3a c0       	rjmp	.+116    	; 0x670 <singleUPclick1()+0x86>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:87
   {   
    menu_select==0? menu_select=7: menu_select--;
     5fc:	80 91 e3 28 	lds	r24, 0x28E3	; 0x8028e3 <menu_select>
     600:	90 91 e4 28 	lds	r25, 0x28E4	; 0x8028e4 <menu_select+0x1>
     604:	00 97       	sbiw	r24, 0x00	; 0
     606:	91 f5       	brne	.+100    	; 0x66c <singleUPclick1()+0x82>
     608:	87 e0       	ldi	r24, 0x07	; 7
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	80 93 e3 28 	sts	0x28E3, r24	; 0x8028e3 <menu_select>
     610:	90 93 e4 28 	sts	0x28E4, r25	; 0x8028e4 <menu_select+0x1>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:128
         L_override=! L_override;
         break;
        }   
      }
//..................................................................pump up section....................................................................//
        if((Pump_calib==1))
     614:	80 91 38 28 	lds	r24, 0x2838	; 0x802838 <Pump_calib>
     618:	88 23       	and	r24, r24
     61a:	09 f4       	brne	.+2      	; 0x61e <singleUPclick1()+0x34>
     61c:	cf c0       	rjmp	.+414    	; 0x7bc <singleUPclick1()+0x1d2>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:130
        {
        if((pcalib>=3)&&(pcalib<15)&&(flip==0))
     61e:	80 91 d9 28 	lds	r24, 0x28D9	; 0x8028d9 <pcalib>
     622:	9d ef       	ldi	r25, 0xFD	; 253
     624:	98 0f       	add	r25, r24
     626:	9c 30       	cpi	r25, 0x0C	; 12
     628:	08 f0       	brcs	.+2      	; 0x62c <singleUPclick1()+0x42>
     62a:	81 c0       	rjmp	.+258    	; 0x72e <singleUPclick1()+0x144>
     62c:	80 91 2d 28 	lds	r24, 0x282D	; 0x80282d <flip>
     630:	81 11       	cpse	r24, r1
     632:	c4 c0       	rjmp	.+392    	; 0x7bc <singleUPclick1()+0x1d2>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:132
        {
          Point_dispense>=1000?Point_dispense=10:Point_dispense+=10;
     634:	80 91 07 28 	lds	r24, 0x2807	; 0x802807 <Point_dispense>
     638:	90 91 08 28 	lds	r25, 0x2808	; 0x802808 <Point_dispense+0x1>
     63c:	a0 91 09 28 	lds	r26, 0x2809	; 0x802809 <Point_dispense+0x2>
     640:	b0 91 0a 28 	lds	r27, 0x280A	; 0x80280a <Point_dispense+0x3>
     644:	88 3e       	cpi	r24, 0xE8	; 232
     646:	23 e0       	ldi	r18, 0x03	; 3
     648:	92 07       	cpc	r25, r18
     64a:	a1 05       	cpc	r26, r1
     64c:	b1 05       	cpc	r27, r1
     64e:	08 f4       	brcc	.+2      	; 0x652 <singleUPclick1()+0x68>
     650:	6a c0       	rjmp	.+212    	; 0x726 <singleUPclick1()+0x13c>
     652:	8a e0       	ldi	r24, 0x0A	; 10
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	a0 e0       	ldi	r26, 0x00	; 0
     658:	b0 e0       	ldi	r27, 0x00	; 0
     65a:	80 93 07 28 	sts	0x2807, r24	; 0x802807 <Point_dispense>
     65e:	90 93 08 28 	sts	0x2808, r25	; 0x802808 <Point_dispense+0x1>
     662:	a0 93 09 28 	sts	0x2809, r26	; 0x802809 <Point_dispense+0x2>
     666:	b0 93 0a 28 	sts	0x280A, r27	; 0x80280a <Point_dispense+0x3>
     66a:	08 95       	ret
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:87
{ 
  if(screen == 1)  //............................................................enter into menu screen traversing
   {  
   if(back==0)     //............................................................Menu display 
   {   
    menu_select==0? menu_select=7: menu_select--;
     66c:	01 97       	sbiw	r24, 0x01	; 1
     66e:	ce cf       	rjmp	.-100    	; 0x60c <singleUPclick1()+0x22>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:90
   }
   
   if(back==1)  //...............................................................Increment and Decrement values
     670:	81 30       	cpi	r24, 0x01	; 1
     672:	81 f6       	brne	.-96     	; 0x614 <singleUPclick1()+0x2a>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:92
      {
      switch (menu_select)
     674:	e0 91 e3 28 	lds	r30, 0x28E3	; 0x8028e3 <menu_select>
     678:	f0 91 e4 28 	lds	r31, 0x28E4	; 0x8028e4 <menu_select+0x1>
     67c:	31 97       	sbiw	r30, 0x01	; 1
     67e:	e7 30       	cpi	r30, 0x07	; 7
     680:	f1 05       	cpc	r31, r1
     682:	40 f6       	brcc	.-112    	; 0x614 <singleUPclick1()+0x2a>
     684:	ea 5b       	subi	r30, 0xBA	; 186
     686:	fc 4f       	sbci	r31, 0xFC	; 252
     688:	0c 94 9c 24 	jmp	0x4938	; 0x4938 <__tablejump2__>
     68c:	4d 03       	fmul	r20, r21
     68e:	57 03       	mulsu	r21, r23
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:99
         case 0: //..............................................................secondory fill

         break;

         case 1:  //.............................................................safety temp
         safe_temp1>=75? safe_temp1=50: safe_temp1 +=5;
     690:	67 03       	mulsu	r22, r23
     692:	77 03       	mulsu	r23, r23
     694:	7b 03       	fmul	r23, r19
     696:	82 03       	fmuls	r16, r18
     698:	8c 03       	fmulsu	r16, r20
     69a:	80 91 0e 28 	lds	r24, 0x280E	; 0x80280e <safe_temp1>
     69e:	8b 34       	cpi	r24, 0x4B	; 75
     6a0:	20 f0       	brcs	.+8      	; 0x6aa <singleUPclick1()+0xc0>
     6a2:	82 e3       	ldi	r24, 0x32	; 50
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:103
         break;

         case 2://...............................................................Probe1 Calibration
         Probe1>19? Probe1=-20: Probe1+=1;
     6a4:	80 93 0e 28 	sts	0x280E, r24	; 0x80280e <safe_temp1>
     6a8:	b5 cf       	rjmp	.-150    	; 0x614 <singleUPclick1()+0x2a>
     6aa:	8b 5f       	subi	r24, 0xFB	; 251
     6ac:	fb cf       	rjmp	.-10     	; 0x6a4 <singleUPclick1()+0xba>
     6ae:	80 91 36 28 	lds	r24, 0x2836	; 0x802836 <Probe1>
     6b2:	90 91 37 28 	lds	r25, 0x2837	; 0x802837 <Probe1+0x1>
     6b6:	84 31       	cpi	r24, 0x14	; 20
     6b8:	91 05       	cpc	r25, r1
     6ba:	3c f0       	brlt	.+14     	; 0x6ca <singleUPclick1()+0xe0>
     6bc:	8c ee       	ldi	r24, 0xEC	; 236
     6be:	9f ef       	ldi	r25, 0xFF	; 255
     6c0:	80 93 36 28 	sts	0x2836, r24	; 0x802836 <Probe1>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:107
         break;

         case 3://...............................................................Probe1 Calibration
         Probe2>19? Probe2=-20: Probe2+=1;        
     6c4:	90 93 37 28 	sts	0x2837, r25	; 0x802837 <Probe1+0x1>
     6c8:	a5 cf       	rjmp	.-182    	; 0x614 <singleUPclick1()+0x2a>
     6ca:	01 96       	adiw	r24, 0x01	; 1
     6cc:	f9 cf       	rjmp	.-14     	; 0x6c0 <singleUPclick1()+0xd6>
     6ce:	80 91 34 28 	lds	r24, 0x2834	; 0x802834 <Probe2>
     6d2:	90 91 35 28 	lds	r25, 0x2835	; 0x802835 <Probe2+0x1>
     6d6:	84 31       	cpi	r24, 0x14	; 20
     6d8:	91 05       	cpc	r25, r1
     6da:	3c f0       	brlt	.+14     	; 0x6ea <singleUPclick1()+0x100>
     6dc:	8c ee       	ldi	r24, 0xEC	; 236
     6de:	9f ef       	ldi	r25, 0xFF	; 255
     6e0:	80 93 34 28 	sts	0x2834, r24	; 0x802834 <Probe2>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:111
         break;
         
         case 4://...............................................................Pump Calibration
         Pump_calib=1;
     6e4:	90 93 35 28 	sts	0x2835, r25	; 0x802835 <Probe2+0x1>
     6e8:	95 cf       	rjmp	.-214    	; 0x614 <singleUPclick1()+0x2a>
     6ea:	01 96       	adiw	r24, 0x01	; 1
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:115
         break;

         case 5:
         Flow_override=!Flow_override;//.........................................flow override(No) 
     6ec:	f9 cf       	rjmp	.-14     	; 0x6e0 <singleUPclick1()+0xf6>
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	80 93 38 28 	sts	0x2838, r24	; 0x802838 <Pump_calib>
     6f4:	8f cf       	rjmp	.-226    	; 0x614 <singleUPclick1()+0x2a>
     6f6:	80 91 33 28 	lds	r24, 0x2833	; 0x802833 <Flow_override>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:119
         break;

         case 6:
         Disp_t>29?  Disp_t=1:  Disp_t+=1;//....................................dispense time
     6fa:	91 e0       	ldi	r25, 0x01	; 1
     6fc:	89 27       	eor	r24, r25
     6fe:	80 93 33 28 	sts	0x2833, r24	; 0x802833 <Flow_override>
     702:	88 cf       	rjmp	.-240    	; 0x614 <singleUPclick1()+0x2a>
     704:	80 91 0f 28 	lds	r24, 0x280F	; 0x80280f <Disp_t>
     708:	8e 31       	cpi	r24, 0x1E	; 30
     70a:	20 f0       	brcs	.+8      	; 0x714 <singleUPclick1()+0x12a>
     70c:	81 e0       	ldi	r24, 0x01	; 1
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:123
         break; 

         case 7:  //........................................................... tank filling
         L_override=! L_override;
     70e:	80 93 0f 28 	sts	0x280F, r24	; 0x80280f <Disp_t>
     712:	80 cf       	rjmp	.-256    	; 0x614 <singleUPclick1()+0x2a>
     714:	8f 5f       	subi	r24, 0xFF	; 255
     716:	fb cf       	rjmp	.-10     	; 0x70e <singleUPclick1()+0x124>
     718:	80 91 94 28 	lds	r24, 0x2894	; 0x802894 <L_override>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:132
//..................................................................pump up section....................................................................//
        if((Pump_calib==1))
        {
        if((pcalib>=3)&&(pcalib<15)&&(flip==0))
        {
          Point_dispense>=1000?Point_dispense=10:Point_dispense+=10;
     71c:	91 e0       	ldi	r25, 0x01	; 1
     71e:	89 27       	eor	r24, r25
     720:	80 93 94 28 	sts	0x2894, r24	; 0x802894 <L_override>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:134
        }
        if((pcalib==15)&&(flip==1))
     724:	77 cf       	rjmp	.-274    	; 0x614 <singleUPclick1()+0x2a>
     726:	0a 96       	adiw	r24, 0x0a	; 10
     728:	a1 1d       	adc	r26, r1
     72a:	b1 1d       	adc	r27, r1
     72c:	96 cf       	rjmp	.-212    	; 0x65a <singleUPclick1()+0x70>
     72e:	8f 30       	cpi	r24, 0x0F	; 15
     730:	09 f0       	breq	.+2      	; 0x734 <singleUPclick1()+0x14a>
     732:	44 c0       	rjmp	.+136    	; 0x7bc <singleUPclick1()+0x1d2>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:136
        {      
          Pump_error>=300? Pump_error=-300: Pump_error+=1; 
     734:	80 91 2d 28 	lds	r24, 0x282D	; 0x80282d <flip>
     738:	88 23       	and	r24, r24
     73a:	09 f4       	brne	.+2      	; 0x73e <singleUPclick1()+0x154>
     73c:	3f c0       	rjmp	.+126    	; 0x7bc <singleUPclick1()+0x1d2>
     73e:	80 91 d5 28 	lds	r24, 0x28D5	; 0x8028d5 <Pump_error>
     742:	90 91 d6 28 	lds	r25, 0x28D6	; 0x8028d6 <Pump_error+0x1>
     746:	8c 32       	cpi	r24, 0x2C	; 44
     748:	21 e0       	ldi	r18, 0x01	; 1
     74a:	92 07       	cpc	r25, r18
     74c:	3c f0       	brlt	.+14     	; 0x75c <singleUPclick1()+0x172>
     74e:	84 ed       	ldi	r24, 0xD4	; 212
     750:	9e ef       	ldi	r25, 0xFE	; 254
     752:	80 93 d5 28 	sts	0x28D5, r24	; 0x8028d5 <Pump_error>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:142
        }
      }
 }
 //..................................................................end of screen1....................................................................//
 
    if(screen==0) //home screen
     756:	90 93 d6 28 	sts	0x28D6, r25	; 0x8028d6 <Pump_error+0x1>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:144
     {
     if(vol_set==1 && screen!=1)
     75a:	08 95       	ret
     75c:	01 96       	adiw	r24, 0x01	; 1
     75e:	f9 cf       	rjmp	.-14     	; 0x752 <singleUPclick1()+0x168>
     760:	81 11       	cpse	r24, r1
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:146
       {
        VOLUME<10000?VOLUME+=10:VOLUME=10;//increase  by 10 ml
     762:	2c c0       	rjmp	.+88     	; 0x7bc <singleUPclick1()+0x1d2>
     764:	80 91 c8 28 	lds	r24, 0x28C8	; 0x8028c8 <vol_set>
     768:	81 30       	cpi	r24, 0x01	; 1
     76a:	f9 f4       	brne	.+62     	; 0x7aa <singleUPclick1()+0x1c0>
     76c:	80 91 01 28 	lds	r24, 0x2801	; 0x802801 <VOLUME>
     770:	90 91 02 28 	lds	r25, 0x2802	; 0x802802 <VOLUME+0x1>
     774:	a0 91 03 28 	lds	r26, 0x2803	; 0x802803 <VOLUME+0x2>
     778:	b0 91 04 28 	lds	r27, 0x2804	; 0x802804 <VOLUME+0x3>
     77c:	80 31       	cpi	r24, 0x10	; 16
     77e:	27 e2       	ldi	r18, 0x27	; 39
     780:	92 07       	cpc	r25, r18
     782:	a1 05       	cpc	r26, r1
     784:	b1 05       	cpc	r27, r1
     786:	60 f4       	brcc	.+24     	; 0x7a0 <singleUPclick1()+0x1b6>
     788:	0a 96       	adiw	r24, 0x0a	; 10
     78a:	a1 1d       	adc	r26, r1
     78c:	b1 1d       	adc	r27, r1
     78e:	80 93 01 28 	sts	0x2801, r24	; 0x802801 <VOLUME>
     792:	90 93 02 28 	sts	0x2802, r25	; 0x802802 <VOLUME+0x1>
     796:	a0 93 03 28 	sts	0x2803, r26	; 0x802803 <VOLUME+0x2>
     79a:	b0 93 04 28 	sts	0x2804, r27	; 0x802804 <VOLUME+0x3>
     79e:	08 95       	ret
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:148
       }
    if(vol_set==2 && screen!=1)//repeate dispensing setting
     7a0:	8a e0       	ldi	r24, 0x0A	; 10
     7a2:	90 e0       	ldi	r25, 0x00	; 0
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:150
       {
       STEP<10? STEP+=1: STEP=1;
     7a4:	a0 e0       	ldi	r26, 0x00	; 0
     7a6:	b0 e0       	ldi	r27, 0x00	; 0
     7a8:	f2 cf       	rjmp	.-28     	; 0x78e <singleUPclick1()+0x1a4>
     7aa:	82 30       	cpi	r24, 0x02	; 2
     7ac:	39 f4       	brne	.+14     	; 0x7bc <singleUPclick1()+0x1d2>
     7ae:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:153
       }
  }//..................................................................end of screen 0.................................................................//
}  
     7b2:	8a 30       	cpi	r24, 0x0A	; 10
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:150
       {
        VOLUME<10000?VOLUME+=10:VOLUME=10;//increase  by 10 ml
       }
    if(vol_set==2 && screen!=1)//repeate dispensing setting
       {
       STEP<10? STEP+=1: STEP=1;
     7b4:	20 f4       	brcc	.+8      	; 0x7be <singleUPclick1()+0x1d4>
     7b6:	8f 5f       	subi	r24, 0xFF	; 255
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:522
  if(emer_start_stop>=2)emer_start_stop=0;
}

void longPressStart1()                                    //when one presses long press key
{
  chk_time =1;
     7b8:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
     7bc:	08 95       	ret
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	fb cf       	rjmp	.-10     	; 0x7b8 <singleUPclick1()+0x1ce>

000007c2 <longPressStart1()>:
longPressStart1():
     7c2:	81 e0       	ldi	r24, 0x01	; 1
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:523
}
     7c4:	90 e0       	ldi	r25, 0x00	; 0
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:514
  once1=0;                                                //to start process again  
}

void RESET_LONG_stop() 
{
  inc_time = 0;
     7c6:	80 93 31 28 	sts	0x2831, r24	; 0x802831 <chk_time>
     7ca:	90 93 32 28 	sts	0x2832, r25	; 0x802832 <chk_time+0x1>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:515
  chk_time =0;
     7ce:	08 95       	ret

000007d0 <RESET_LONG_stop()>:
RESET_LONG_stop():
     7d0:	10 92 2f 28 	sts	0x282F, r1	; 0x80282f <inc_time>
     7d4:	10 92 30 28 	sts	0x2830, r1	; 0x802830 <inc_time+0x1>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:516
  emer_start_stop++;
     7d8:	10 92 31 28 	sts	0x2831, r1	; 0x802831 <chk_time>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:517
  if(emer_start_stop>=2)emer_start_stop=0;
     7dc:	10 92 32 28 	sts	0x2832, r1	; 0x802832 <chk_time+0x1>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:516

void RESET_LONG_stop() 
{
  inc_time = 0;
  chk_time =0;
  emer_start_stop++;
     7e0:	80 91 2e 28 	lds	r24, 0x282E	; 0x80282e <emer_start_stop>
     7e4:	8f 5f       	subi	r24, 0xFF	; 255
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:517
  if(emer_start_stop>=2)emer_start_stop=0;
     7e6:	82 30       	cpi	r24, 0x02	; 2
     7e8:	18 f4       	brcc	.+6      	; 0x7f0 <RESET_LONG_stop()+0x20>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:518
}
     7ea:	80 93 2e 28 	sts	0x282E, r24	; 0x80282e <emer_start_stop>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles\api/Print.cpp:30

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     7ee:	08 95       	ret
     7f0:	10 92 2e 28 	sts	0x282E, r1	; 0x80282e <emer_start_stop>
     7f4:	08 95       	ret

000007f6 <Print::write(unsigned char const*, unsigned int)>:
write():
     7f6:	af 92       	push	r10
     7f8:	bf 92       	push	r11
     7fa:	cf 92       	push	r12
     7fc:	df 92       	push	r13
     7fe:	ef 92       	push	r14
     800:	ff 92       	push	r15
     802:	0f 93       	push	r16
     804:	1f 93       	push	r17
     806:	cf 93       	push	r28
     808:	df 93       	push	r29
     80a:	6c 01       	movw	r12, r24
     80c:	7b 01       	movw	r14, r22
     80e:	8b 01       	movw	r16, r22
     810:	04 0f       	add	r16, r20
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles\api/Print.cpp:32
  size_t n = 0;
  while (size--)
     812:	15 1f       	adc	r17, r21
     814:	eb 01       	movw	r28, r22
     816:	5e 01       	movw	r10, r28
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles\api/Print.cpp:34
  {
    if (write(*buffer++))
     818:	ae 18       	sub	r10, r14
     81a:	bf 08       	sbc	r11, r15
     81c:	c0 17       	cp	r28, r16
     81e:	d1 07       	cpc	r29, r17
     820:	59 f0       	breq	.+22     	; 0x838 <Print::write(unsigned char const*, unsigned int)+0x42>
     822:	69 91       	ld	r22, Y+
     824:	d6 01       	movw	r26, r12
     826:	ed 91       	ld	r30, X+
     828:	fc 91       	ld	r31, X
     82a:	01 90       	ld	r0, Z+
     82c:	f0 81       	ld	r31, Z
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles\api/Print.cpp:40
      n++;
    else
      break;
  }
  return n;
}
     82e:	e0 2d       	mov	r30, r0
     830:	c6 01       	movw	r24, r12
     832:	09 95       	icall
     834:	89 2b       	or	r24, r25
     836:	79 f7       	brne	.-34     	; 0x816 <Print::write(unsigned char const*, unsigned int)+0x20>
     838:	c5 01       	movw	r24, r10
     83a:	df 91       	pop	r29
     83c:	cf 91       	pop	r28
     83e:	1f 91       	pop	r17
     840:	0f 91       	pop	r16
     842:	ff 90       	pop	r15
     844:	ef 90       	pop	r14
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles\api/Print.h:53
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
     846:	df 90       	pop	r13
     848:	cf 90       	pop	r12
     84a:	bf 90       	pop	r11
     84c:	af 90       	pop	r10
     84e:	08 95       	ret

00000850 <Print::print(String const&) [clone .constprop.51]>:
     850:	fc 01       	movw	r30, r24
     852:	44 81       	ldd	r20, Z+4	; 0x04
     854:	55 81       	ldd	r21, Z+5	; 0x05
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.h:174
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    using Print::write; // pull in write(str) and write(buf, size) from Print
    explicit operator bool() { return true; }
     856:	60 81       	ld	r22, Z
     858:	71 81       	ldd	r23, Z+1	; 0x01
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:29

#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
     85a:	87 e3       	ldi	r24, 0x37	; 55
     85c:	9b e2       	ldi	r25, 0x2B	; 43
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:31
{
  uint8_t bit_mask = digitalPinToBitMask(pin);
     85e:	cb cf       	rjmp	.-106    	; 0x7f6 <Print::write(unsigned char const*, unsigned int)>

00000860 <UartClass::operator bool()>:
operator 3():
     860:	81 e0       	ldi	r24, 0x01	; 1
     862:	08 95       	ret

00000864 <pinMode.part.1>:
pinMode.part.1():
     864:	cf 93       	push	r28
     866:	df 93       	push	r29
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:33

  if ((bit_mask == NOT_A_PIN) || (mode > INPUT_PULLUP))
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	fc 01       	movw	r30, r24
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:36
    return;

  PORT_t *port = digitalPinToPortStruct(pin);
     86c:	e9 55       	subi	r30, 0x59	; 89
     86e:	f2 47       	sbci	r31, 0x72	; 114
     870:	20 81       	ld	r18, Z
     872:	2f 3f       	cpi	r18, 0xFF	; 255
     874:	69 f0       	breq	.+26     	; 0x890 <pinMode.part.1+0x2c>
     876:	fc 01       	movw	r30, r24
     878:	e4 57       	subi	r30, 0x74	; 116
     87a:	f2 47       	sbci	r31, 0x72	; 114
     87c:	a0 81       	ld	r26, Z
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:40
  if (port == NULL)
    return;

  if (mode == OUTPUT)
     87e:	30 e2       	ldi	r19, 0x20	; 32
     880:	a3 9f       	mul	r26, r19
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:43
  {
    /* Configure direction as output */
    port->DIRSET = bit_mask;
     882:	d0 01       	movw	r26, r0
     884:	11 24       	eor	r1, r1
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:75
    }

    /* Restore state */
    SREG = status;
  }
}
     886:	bc 5f       	subi	r27, 0xFC	; 252
     888:	61 30       	cpi	r22, 0x01	; 1
     88a:	29 f4       	brne	.+10     	; 0x896 <pinMode.part.1+0x32>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:48
    port->DIRSET = bit_mask;
  }
  else
  { /* mode == INPUT or INPUT_PULLUP */

    uint8_t bit_pos = digitalPinToBitPosition(pin);
     88c:	11 96       	adiw	r26, 0x01	; 1
     88e:	2c 93       	st	X, r18
     890:	df 91       	pop	r29
     892:	cf 91       	pop	r28
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:50
    /* Calculate where pin control register is */
    volatile uint8_t *pin_ctrl_reg = getPINnCTRLregister(port, bit_pos);
     894:	08 95       	ret
     896:	8f 58       	subi	r24, 0x8F	; 143
     898:	92 47       	sbci	r25, 0x72	; 114
     89a:	ec 01       	movw	r28, r24
     89c:	e8 81       	ld	r30, Y
     89e:	ef 3f       	cpi	r30, 0xFF	; 255
     8a0:	81 f0       	breq	.+32     	; 0x8c2 <pinMode.part.1+0x5e>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:53

    /* Save state */
    uint8_t status = SREG;
     8a2:	cd 01       	movw	r24, r26
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:54
    cli();
     8a4:	40 96       	adiw	r24, 0x10	; 16
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:57

    /* Configure direction as input */
    port->DIRCLR = bit_mask;
     8a6:	e8 0f       	add	r30, r24
     8a8:	f9 2f       	mov	r31, r25
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:63

    /* Configure pull-up resistor */
    if (mode == INPUT_PULLUP)
    {
      /* Enable pull-up */
      *pin_ctrl_reg |= PORT_PULLUPEN_bm;
     8aa:	f1 1d       	adc	r31, r1
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:60

    /* Configure direction as input */
    port->DIRCLR = bit_mask;

    /* Configure pull-up resistor */
    if (mode == INPUT_PULLUP)
     8ac:	9f b7       	in	r25, 0x3f	; 63
     8ae:	f8 94       	cli
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:63
    {
      /* Enable pull-up */
      *pin_ctrl_reg |= PORT_PULLUPEN_bm;
     8b0:	12 96       	adiw	r26, 0x02	; 2
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:69
    }
    else
    { /* mode == INPUT (no pullup) */

      /* Disable pull-up */
      *pin_ctrl_reg &= ~(PORT_PULLUPEN_bm);
     8b2:	2c 93       	st	X, r18
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:73
    }

    /* Restore state */
    SREG = status;
     8b4:	80 81       	ld	r24, Z
     8b6:	62 30       	cpi	r22, 0x02	; 2
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:50
  else
  { /* mode == INPUT or INPUT_PULLUP */

    uint8_t bit_pos = digitalPinToBitPosition(pin);
    /* Calculate where pin control register is */
    volatile uint8_t *pin_ctrl_reg = getPINnCTRLregister(port, bit_pos);
     8b8:	39 f4       	brne	.+14     	; 0x8c8 <pinMode.part.1+0x64>
     8ba:	88 60       	ori	r24, 0x08	; 8
     8bc:	80 83       	st	Z, r24
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:69
    }
    else
    { /* mode == INPUT (no pullup) */

      /* Disable pull-up */
      *pin_ctrl_reg &= ~(PORT_PULLUPEN_bm);
     8be:	9f bf       	out	0x3f, r25	; 63
     8c0:	e7 cf       	rjmp	.-50     	; 0x890 <pinMode.part.1+0x2c>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src/Wire.cpp:119
#endif
}

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
     8c2:	f0 e0       	ldi	r31, 0x00	; 0
     8c4:	e0 e0       	ldi	r30, 0x00	; 0
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src/Wire.cpp:120
  rxBufferLength = 0;
     8c6:	f2 cf       	rjmp	.-28     	; 0x8ac <pinMode.part.1+0x48>
     8c8:	87 7f       	andi	r24, 0xF7	; 247
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src/Wire.cpp:122

  txBufferIndex = 0;
     8ca:	f8 cf       	rjmp	.-16     	; 0x8bc <pinMode.part.1+0x58>

000008cc <TwoWire::begin() [clone .constprop.32]>:
begin():
     8cc:	10 92 d3 28 	sts	0x28D3, r1	; 0x8028d3 <TwoWire::rxBufferIndex>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src/Wire.cpp:123
  txBufferLength = 0;
     8d0:	10 92 d2 28 	sts	0x28D2, r1	; 0x8028d2 <TwoWire::rxBufferLength>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src\utility/twi.c:65
 *
 *  \param frequency            The required baud.
 */
void TWI_MasterInit(uint32_t frequency)
{
  if (twi_mode != TWI_MODE_UNKNOWN)
     8d4:	10 92 d1 28 	sts	0x28D1, r1	; 0x8028d1 <TwoWire::txBufferIndex>
     8d8:	10 92 d0 28 	sts	0x28D0, r1	; 0x8028d0 <TwoWire::txBufferLength>
TWI_MasterInit():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src\utility/twi.c:69
    return;

// Enable input pullup for the default or pin swapped pin position
  if ((PORTMUX.TWISPIROUTEA & 0x30) == TWI_MUX)
     8dc:	80 91 cf 28 	lds	r24, 0x28CF	; 0x8028cf <twi_mode>
     8e0:	81 11       	cpse	r24, r1
     8e2:	1d c0       	rjmp	.+58     	; 0x91e <TwoWire::begin() [clone .constprop.32]+0x52>
     8e4:	80 91 e3 05 	lds	r24, 0x05E3	; 0x8005e3 <__TEXT_REGION_LENGTH__+0x7f45e3>
     8e8:	80 73       	andi	r24, 0x30	; 48
     8ea:	d1 f4       	brne	.+52     	; 0x920 <TwoWire::begin() [clone .constprop.32]+0x54>
pinMode():
     8ec:	62 e0       	ldi	r22, 0x02	; 2
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src\utility/twi.c:90
    pinMode(PIN_WIRE_SDA_PINSWAP_1, INPUT_PULLUP); // Enable PC2 pullup
    pinMode(PIN_WIRE_SCL_PINSWAP_1, INPUT_PULLUP); // Enable PC3 pullup
  }
#endif

  twi_mode = TWI_MODE_MASTER;
     8ee:	82 e0       	ldi	r24, 0x02	; 2
     8f0:	b9 df       	rcall	.-142    	; 0x864 <pinMode.part.1>
     8f2:	62 e0       	ldi	r22, 0x02	; 2
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src\utility/twi.c:92

  master_bytesRead = 0;
     8f4:	83 e0       	ldi	r24, 0x03	; 3
     8f6:	b6 df       	rcall	.-148    	; 0x864 <pinMode.part.1>
TWI_MasterInit():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src\utility/twi.c:93
  master_bytesWritten = 0;
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	80 93 cf 28 	sts	0x28CF, r24	; 0x8028cf <twi_mode>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src\utility/twi.c:94
  master_trans_status = TWIM_STATUS_READY;
     8fe:	10 92 ce 28 	sts	0x28CE, r1	; 0x8028ce <master_bytesRead>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src\utility/twi.c:95
  master_result = TWIM_RESULT_UNKNOWN;
     902:	10 92 cd 28 	sts	0x28CD, r1	; 0x8028cd <master_bytesWritten>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src\utility/twi.c:97

  TWI0.MCTRLA = TWI_RIEN_bm | TWI_WIEN_bm | TWI_ENABLE_bm;
     906:	10 92 cc 28 	sts	0x28CC, r1	; 0x8028cc <master_trans_status>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src\utility/twi.c:237
    freq_khz = 100;
    t_rise = 1000;
  }

  uint32_t baud = ((F_CPU / 1000 / freq_khz) - (((F_CPU * t_rise) / 1000) / 1000) / 1000 - 10) / 2;
  TWI0.MBAUD = (uint8_t)baud;
     90a:	10 92 cb 28 	sts	0x28CB, r1	; 0x8028cb <master_result>
     90e:	91 ec       	ldi	r25, 0xC1	; 193
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src\utility/twi.c:99
  master_trans_status = TWIM_STATUS_READY;
  master_result = TWIM_RESULT_UNKNOWN;

  TWI0.MCTRLA = TWI_RIEN_bm | TWI_WIEN_bm | TWI_ENABLE_bm;
  TWI_MasterSetBaud(frequency);
  TWI0.MSTATUS = TWI_BUSSTATE_IDLE_gc;
     910:	90 93 a3 08 	sts	0x08A3, r25	; 0x8008a3 <__TEXT_REGION_LENGTH__+0x7f48a3>
TWI_MasterSetBaud():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src/Wire.cpp:126

  TWI_MasterInit(DEFAULT_FREQUENCY);
}
     914:	93 e4       	ldi	r25, 0x43	; 67
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src\utility/twi.c:83

    pinMode(PIN_WIRE_SDA, INPUT_PULLUP); // Enable PA2 pullup
    pinMode(PIN_WIRE_SCL, INPUT_PULLUP); // Enable PA3 pullup
  }
#if defined(PIN_WIRE_SDA_PINSWAP_1) && defined(PIN_WIRE_SCL_PINSWAP_1)
  else if ((PORTMUX.TWISPIROUTEA & 0x30) == TWI_MUX_PINSWAP)
     916:	90 93 a6 08 	sts	0x08A6, r25	; 0x8008a6 <__TEXT_REGION_LENGTH__+0x7f48a6>
TWI_MasterInit():
     91a:	80 93 a5 08 	sts	0x08A5, r24	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
begin():
     91e:	08 95       	ret
TWI_MasterInit():
     920:	80 91 e3 05 	lds	r24, 0x05E3	; 0x8005e3 <__TEXT_REGION_LENGTH__+0x7f45e3>
     924:	80 73       	andi	r24, 0x30	; 48
     926:	80 32       	cpi	r24, 0x20	; 32
     928:	39 f7       	brne	.-50     	; 0x8f8 <TwoWire::begin() [clone .constprop.32]+0x2c>
pinMode():
     92a:	62 e0       	ldi	r22, 0x02	; 2
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:97
static void turnOffPWM(uint8_t pin)
{
  /* Actually turn off compare channel, not the timer */

  /* Get pin's timer */
  uint8_t timer = digitalPinToTimer(pin);
     92c:	8a e0       	ldi	r24, 0x0A	; 10
     92e:	9a df       	rcall	.-204    	; 0x864 <pinMode.part.1>
     930:	62 e0       	ldi	r22, 0x02	; 2
     932:	8b e0       	ldi	r24, 0x0B	; 11
     934:	e0 cf       	rjmp	.-64     	; 0x8f6 <TwoWire::begin() [clone .constprop.32]+0x2a>

00000936 <turnOffPWM.part.0>:
turnOffPWM.part.0():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:98
  if (timer == NOT_ON_TIMER)
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	fc 01       	movw	r30, r24
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:104
    return;

  uint8_t bit_pos;
  TCB_t *timerB;

  switch (timer)
     93a:	ea 5a       	subi	r30, 0xAA	; 170
     93c:	f2 47       	sbci	r31, 0x72	; 114
     93e:	e0 81       	ld	r30, Z
     940:	ee 23       	and	r30, r30
     942:	19 f1       	breq	.+70     	; 0x98a <turnOffPWM.part.0+0x54>
     944:	e1 30       	cpi	r30, 0x01	; 1
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:109
  {
    /* TCA0 */
    case TIMERA0:
      /* Bit position will give output channel */
      bit_pos = digitalPinToBitPosition(pin);
     946:	21 f0       	breq	.+8      	; 0x950 <turnOffPWM.part.0+0x1a>
     948:	00 f1       	brcs	.+64     	; 0x98a <turnOffPWM.part.0+0x54>
     94a:	e6 30       	cpi	r30, 0x06	; 6
     94c:	a8 f0       	brcs	.+42     	; 0x978 <turnOffPWM.part.0+0x42>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:112

      /* Disable corresponding channel */
      if (bit_pos >= 3) ++bit_pos; /* Upper 3 bits are shifted by 1 */
     94e:	08 95       	ret
     950:	8f 58       	subi	r24, 0x8F	; 143
     952:	92 47       	sbci	r25, 0x72	; 114
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:113
      TCA0.SPLIT.CTRLB &= ~(1 << (TCA_SPLIT_LCMP0EN_bp + bit_pos));
     954:	fc 01       	movw	r30, r24
     956:	20 81       	ld	r18, Z
     958:	23 30       	cpi	r18, 0x03	; 3
     95a:	08 f0       	brcs	.+2      	; 0x95e <turnOffPWM.part.0+0x28>
     95c:	2f 5f       	subi	r18, 0xFF	; 255
     95e:	30 91 01 0a 	lds	r19, 0x0A01	; 0x800a01 <__TEXT_REGION_LENGTH__+0x7f4a01>
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	01 c0       	rjmp	.+2      	; 0x96a <turnOffPWM.part.0+0x34>
     968:	88 0f       	add	r24, r24
     96a:	2a 95       	dec	r18
     96c:	ea f7       	brpl	.-6      	; 0x968 <turnOffPWM.part.0+0x32>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:123
    case TIMERB0:
    case TIMERB1:
    case TIMERB2:
    case TIMERB3:

      timerB = (TCB_t *)&TCB0 + (timer - TIMERB0);
     96e:	80 95       	com	r24
     970:	83 23       	and	r24, r19
     972:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x7f4a01>
     976:	08 95       	ret
     978:	80 e1       	ldi	r24, 0x10	; 16
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:126

      /* Disable TCB compare channel */
      timerB->CTRLB &= ~(TCB_CCMPEN_bm);
     97a:	e8 9f       	mul	r30, r24
     97c:	f0 01       	movw	r30, r0
     97e:	11 24       	eor	r1, r1
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:132

      break;
    default:
      break;
  }
}
     980:	e0 5a       	subi	r30, 0xA0	; 160
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:134

void digitalWrite(uint8_t pin, uint8_t val)
     982:	f5 4f       	sbci	r31, 0xF5	; 245
     984:	81 81       	ldd	r24, Z+1	; 0x01
     986:	8f 7e       	andi	r24, 0xEF	; 239
     988:	81 83       	std	Z+1, r24	; 0x01
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:137
{
  /* Get bit mask for pin */
  uint8_t bit_mask = digitalPinToBitMask(pin);
     98a:	08 95       	ret

0000098c <digitalWrite.part.2>:
digitalWrite.part.2():
     98c:	0f 93       	push	r16
     98e:	1f 93       	push	r17
     990:	cf 93       	push	r28
     992:	df 93       	push	r29
     994:	c8 2f       	mov	r28, r24
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:138
  if (bit_mask == NOT_A_PIN)
     996:	d0 e0       	ldi	r29, 0x00	; 0
     998:	fe 01       	movw	r30, r28
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:97
static void turnOffPWM(uint8_t pin)
{
  /* Actually turn off compare channel, not the timer */

  /* Get pin's timer */
  uint8_t timer = digitalPinToTimer(pin);
     99a:	e9 55       	subi	r30, 0x59	; 89
     99c:	f2 47       	sbci	r31, 0x72	; 114
     99e:	00 81       	ld	r16, Z
     9a0:	0f 3f       	cpi	r16, 0xFF	; 255
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:150
  turnOffPWM(pin);

  /* Assuming the direction is already output !! */

  /* Get port */
  PORT_t *port = digitalPinToPortStruct(pin);
     9a2:	99 f0       	breq	.+38     	; 0x9ca <digitalWrite.part.2+0x3e>
     9a4:	16 2f       	mov	r17, r22
turnOffPWM():
     9a6:	8b 31       	cpi	r24, 0x1B	; 27
     9a8:	08 f4       	brcc	.+2      	; 0x9ac <digitalWrite.part.2+0x20>
     9aa:	c5 df       	rcall	.-118    	; 0x936 <turnOffPWM.part.0>
digitalWrite.part.2():
     9ac:	fe 01       	movw	r30, r28
     9ae:	e4 57       	subi	r30, 0x74	; 116
     9b0:	f2 47       	sbci	r31, 0x72	; 114
     9b2:	e0 81       	ld	r30, Z
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:153

  /* Output direction */
  if (port->DIR & bit_mask)
     9b4:	80 e2       	ldi	r24, 0x20	; 32
     9b6:	e8 9f       	mul	r30, r24
     9b8:	f0 01       	movw	r30, r0
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:156
  {
    /* Set output to value */
    if (val == LOW)
     9ba:	11 24       	eor	r1, r1
     9bc:	fc 5f       	subi	r31, 0xFC	; 252
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:158
    { /* If LOW */
      port->OUTCLR = bit_mask;
     9be:	80 81       	ld	r24, Z
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:203
    }

    /* Restore system status */
    SREG = status;
  }
}
     9c0:	80 23       	and	r24, r16
     9c2:	51 f0       	breq	.+20     	; 0x9d8 <digitalWrite.part.2+0x4c>
     9c4:	11 11       	cpse	r17, r1
     9c6:	06 c0       	rjmp	.+12     	; 0x9d4 <digitalWrite.part.2+0x48>
     9c8:	06 83       	std	Z+6, r16	; 0x06
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:167
      port->OUTTGL = bit_mask;
      /* If HIGH OR  > TOGGLE  */
    }
    else
    {
      port->OUTSET = bit_mask;
     9ca:	df 91       	pop	r29
     9cc:	cf 91       	pop	r28
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:180
    pull up is enabled if this function is called.
    Should we purposely implement this side effect?
    */

    /* Get bit position for getting pin ctrl reg */
    uint8_t bit_pos = digitalPinToBitPosition(pin);
     9ce:	1f 91       	pop	r17
     9d0:	0f 91       	pop	r16
     9d2:	08 95       	ret
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:183

    /* Calculate where pin control register is */
    volatile uint8_t *pin_ctrl_reg = getPINnCTRLregister(port, bit_pos);
     9d4:	05 83       	std	Z+5, r16	; 0x05
     9d6:	f9 cf       	rjmp	.-14     	; 0x9ca <digitalWrite.part.2+0x3e>
     9d8:	cf 58       	subi	r28, 0x8F	; 143
     9da:	d2 47       	sbci	r29, 0x72	; 114
     9dc:	88 81       	ld	r24, Y
     9de:	30 97       	sbiw	r30, 0x00	; 0
     9e0:	71 f0       	breq	.+28     	; 0x9fe <digitalWrite.part.2+0x72>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:186

    /* Save system status and disable interrupts */
    uint8_t status = SREG;
     9e2:	8f 3f       	cpi	r24, 0xFF	; 255
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:187
    cli();
     9e4:	61 f0       	breq	.+24     	; 0x9fe <digitalWrite.part.2+0x72>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:192

    if (val == LOW)
    {
      /* Disable pullup */
      *pin_ctrl_reg &= ~PORT_PULLUPEN_bm;
     9e6:	70 96       	adiw	r30, 0x10	; 16
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:189

    /* Save system status and disable interrupts */
    uint8_t status = SREG;
    cli();

    if (val == LOW)
     9e8:	e8 0f       	add	r30, r24
     9ea:	f1 1d       	adc	r31, r1
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:192
    {
      /* Disable pullup */
      *pin_ctrl_reg &= ~PORT_PULLUPEN_bm;
     9ec:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:197
    }
    else
    {
      /* Enable pull-up */
      *pin_ctrl_reg |= PORT_PULLUPEN_bm;
     9ee:	f8 94       	cli
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:201
    }

    /* Restore system status */
    SREG = status;
     9f0:	80 81       	ld	r24, Z
     9f2:	11 11       	cpse	r17, r1
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:183

    /* Get bit position for getting pin ctrl reg */
    uint8_t bit_pos = digitalPinToBitPosition(pin);

    /* Calculate where pin control register is */
    volatile uint8_t *pin_ctrl_reg = getPINnCTRLregister(port, bit_pos);
     9f4:	07 c0       	rjmp	.+14     	; 0xa04 <digitalWrite.part.2+0x78>
     9f6:	87 7f       	andi	r24, 0xF7	; 247
     9f8:	80 83       	st	Z, r24
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:197
      *pin_ctrl_reg &= ~PORT_PULLUPEN_bm;
    }
    else
    {
      /* Enable pull-up */
      *pin_ctrl_reg |= PORT_PULLUPEN_bm;
     9fa:	9f bf       	out	0x3f, r25	; 63
     9fc:	e6 cf       	rjmp	.-52     	; 0x9ca <digitalWrite.part.2+0x3e>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:180
    return false;
  }
}

void UartClass::begin(unsigned long baud, uint16_t config)
{
     9fe:	f0 e0       	ldi	r31, 0x00	; 0
     a00:	e0 e0       	ldi	r30, 0x00	; 0
     a02:	f4 cf       	rjmp	.-24     	; 0x9ec <digitalWrite.part.2+0x60>
     a04:	88 60       	ori	r24, 0x08	; 8
     a06:	f8 cf       	rjmp	.-16     	; 0x9f8 <digitalWrite.part.2+0x6c>

00000a08 <UartClass::begin(unsigned long, unsigned int)>:
begin():
     a08:	af 92       	push	r10
     a0a:	bf 92       	push	r11
     a0c:	cf 92       	push	r12
     a0e:	df 92       	push	r13
     a10:	ef 92       	push	r14
     a12:	ff 92       	push	r15
     a14:	0f 93       	push	r16
     a16:	1f 93       	push	r17
     a18:	cf 93       	push	r28
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:183
  // Make sure no transmissions are ongoing and USART is disabled in case begin() is called by accident
  // without first calling end()
  if (_written)
     a1a:	df 93       	push	r29
     a1c:	ec 01       	movw	r28, r24
     a1e:	6a 01       	movw	r12, r20
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:185
  {
    this->end();
     a20:	7b 01       	movw	r14, r22
     a22:	a2 2e       	mov	r10, r18
     a24:	8d 89       	ldd	r24, Y+21	; 0x15
     a26:	88 23       	and	r24, r24
     a28:	39 f0       	breq	.+14     	; 0xa38 <UartClass::begin(unsigned long, unsigned int)+0x30>
     a2a:	e8 81       	ld	r30, Y
     a2c:	f9 81       	ldd	r31, Y+1	; 0x01
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:188
  }

  struct UartPinSet *set = &_hw_set[_pin_set];
     a2e:	06 88       	ldd	r0, Z+22	; 0x16
     a30:	f7 89       	ldd	r31, Z+23	; 0x17
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:193

  int32_t baud_setting = 0;

  //Make sure global interrupts are disabled during initialization
  uint8_t oldSREG = SREG;
     a32:	e0 2d       	mov	r30, r0
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:194
  cli();
     a34:	ce 01       	movw	r24, r28
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:196

  baud_setting = (((8 * F_CPU) / baud) + 1) / 2;
     a36:	09 95       	icall
     a38:	0c 89       	ldd	r16, Y+20	; 0x14
     a3a:	10 e0       	ldi	r17, 0x00	; 0
     a3c:	bf b6       	in	r11, 0x3f	; 63
     a3e:	f8 94       	cli
     a40:	60 e0       	ldi	r22, 0x00	; 0
     a42:	70 e2       	ldi	r23, 0x20	; 32
     a44:	81 ea       	ldi	r24, 0xA1	; 161
     a46:	97 e0       	ldi	r25, 0x07	; 7
     a48:	a7 01       	movw	r20, r14
     a4a:	96 01       	movw	r18, r12
     a4c:	0e 94 5e 24 	call	0x48bc	; 0x48bc <__udivmodsi4>
     a50:	69 01       	movw	r12, r18
     a52:	7a 01       	movw	r14, r20
     a54:	8f ef       	ldi	r24, 0xFF	; 255
     a56:	c8 1a       	sub	r12, r24
     a58:	d8 0a       	sbc	r13, r24
     a5a:	e8 0a       	sbc	r14, r24
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:198
  // Disable CLK2X
  (*_hwserial_module).CTRLB &= (~USART_RXMODE_CLK2X_gc);
     a5c:	f8 0a       	sbc	r15, r24
     a5e:	f6 94       	lsr	r15
     a60:	e7 94       	ror	r14
     a62:	d7 94       	ror	r13
     a64:	c7 94       	ror	r12
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:199
  (*_hwserial_module).CTRLB |= USART_RXMODE_NORMAL_gc;
     a66:	ec 85       	ldd	r30, Y+12	; 0x0c
     a68:	fd 85       	ldd	r31, Y+13	; 0x0d
     a6a:	86 81       	ldd	r24, Z+6	; 0x06
     a6c:	8d 7f       	andi	r24, 0xFD	; 253
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:201

  _written = false;
     a6e:	86 83       	std	Z+6, r24	; 0x06
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:210
// Use error compensation if internal oscillator is used
#if !defined(USE_EXTERNAL_OSCILLATOR)
#if F_CPU == 20000000L
  sigrow_val = SIGROW.OSC20ERR5V;
#else
  sigrow_val = SIGROW.OSC16ERR5V;
     a70:	ec 85       	ldd	r30, Y+12	; 0x0c
     a72:	fd 85       	ldd	r31, Y+13	; 0x0d
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:214
#endif
#endif

  baud_setting += (baud_setting * sigrow_val) / 1024;
     a74:	86 81       	ldd	r24, Z+6	; 0x06
     a76:	86 83       	std	Z+6, r24	; 0x06
     a78:	1d 8a       	std	Y+21, r1	; 0x15
     a7a:	a0 91 23 11 	lds	r26, 0x1123	; 0x801123 <__TEXT_REGION_LENGTH__+0x7f5123>
     a7e:	0a 2e       	mov	r0, r26
     a80:	00 0c       	add	r0, r0
     a82:	bb 0b       	sbc	r27, r27
     a84:	a7 01       	movw	r20, r14
     a86:	96 01       	movw	r18, r12
     a88:	0e 94 a8 24 	call	0x4950	; 0x4950 <__mulshisi3>
     a8c:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:217

  // assign the baud_setting, a.k.a. BAUD (USART Baud Rate Register)
  (*_hwserial_module).BAUD = (uint16_t)baud_setting;
     a8e:	34 e0       	ldi	r19, 0x04	; 4
     a90:	40 e0       	ldi	r20, 0x00	; 0
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:214
#else
  sigrow_val = SIGROW.OSC16ERR5V;
#endif
#endif

  baud_setting += (baud_setting * sigrow_val) / 1024;
     a92:	50 e0       	ldi	r21, 0x00	; 0
     a94:	0e 94 80 24 	call	0x4900	; 0x4900 <__divmodsi4>
     a98:	ec 85       	ldd	r30, Y+12	; 0x0c
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:217

  // assign the baud_setting, a.k.a. BAUD (USART Baud Rate Register)
  (*_hwserial_module).BAUD = (uint16_t)baud_setting;
     a9a:	fd 85       	ldd	r31, Y+13	; 0x0d
     a9c:	c2 0e       	add	r12, r18
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:220

  // Set USART mode of operation
  (*_hwserial_module).CTRLC = config;
     a9e:	d3 1e       	adc	r13, r19
     aa0:	e4 1e       	adc	r14, r20
     aa2:	f5 1e       	adc	r15, r21
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:223

  // Enable transmitter and receiver
  (*_hwserial_module).CTRLB |= (USART_RXEN_bm | USART_TXEN_bm);
     aa4:	c0 86       	std	Z+8, r12	; 0x08
     aa6:	d1 86       	std	Z+9, r13	; 0x09
     aa8:	ec 85       	ldd	r30, Y+12	; 0x0c
     aaa:	fd 85       	ldd	r31, Y+13	; 0x0d
     aac:	a7 82       	std	Z+7, r10	; 0x07
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:225

  (*_hwserial_module).CTRLA |= USART_RXCIE_bm;
     aae:	ec 85       	ldd	r30, Y+12	; 0x0c
     ab0:	fd 85       	ldd	r31, Y+13	; 0x0d
     ab2:	86 81       	ldd	r24, Z+6	; 0x06
     ab4:	80 6c       	ori	r24, 0xC0	; 192
     ab6:	86 83       	std	Z+6, r24	; 0x06
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:228

  // Let PORTMUX point to alternative UART pins as requested
  PORTMUX.USARTROUTEA = set->mux | (PORTMUX.USARTROUTEA & ~_hw_set[1].mux);
     ab8:	ec 85       	ldd	r30, Y+12	; 0x0c
     aba:	fd 85       	ldd	r31, Y+13	; 0x0d
     abc:	85 81       	ldd	r24, Z+5	; 0x05
     abe:	80 68       	ori	r24, 0x80	; 128
     ac0:	85 83       	std	Z+5, r24	; 0x05
     ac2:	90 91 e2 05 	lds	r25, 0x05E2	; 0x8005e2 <__TEXT_REGION_LENGTH__+0x7f45e2>
     ac6:	8b 89       	ldd	r24, Y+19	; 0x13
     ac8:	80 95       	com	r24
     aca:	89 23       	and	r24, r25
     acc:	78 01       	movw	r14, r16
     ace:	ee 0c       	add	r14, r14
     ad0:	ff 1c       	adc	r15, r15
     ad2:	f7 01       	movw	r30, r14
     ad4:	e0 0f       	add	r30, r16
     ad6:	f1 1f       	adc	r31, r17
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:231

  // Set pin state for swapped UART pins
  pinMode(set->rx_pin, INPUT_PULLUP);
     ad8:	ec 0f       	add	r30, r28
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:31
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
  uint8_t bit_mask = digitalPinToBitMask(pin);
     ada:	fd 1f       	adc	r31, r29
     adc:	90 89       	ldd	r25, Z+16	; 0x10
     ade:	89 2b       	or	r24, r25
     ae0:	80 93 e2 05 	sts	0x05E2, r24	; 0x8005e2 <__TEXT_REGION_LENGTH__+0x7f45e2>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:232
  digitalWrite(set->tx_pin, HIGH);
     ae4:	86 85       	ldd	r24, Z+14	; 0x0e
pinMode():
     ae6:	8b 31       	cpi	r24, 0x1B	; 27
     ae8:	10 f4       	brcc	.+4      	; 0xaee <UartClass::begin(unsigned long, unsigned int)+0xe6>
     aea:	62 e0       	ldi	r22, 0x02	; 2
     aec:	bb de       	rcall	.-650    	; 0x864 <pinMode.part.1>
begin():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:137
}

void digitalWrite(uint8_t pin, uint8_t val)
{
  /* Get bit mask for pin */
  uint8_t bit_mask = digitalPinToBitMask(pin);
     aee:	f7 01       	movw	r30, r14
     af0:	e0 0f       	add	r30, r16
     af2:	f1 1f       	adc	r31, r17
     af4:	ec 0f       	add	r30, r28
     af6:	fd 1f       	adc	r31, r29
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:233
  pinMode(set->tx_pin, OUTPUT);
     af8:	87 85       	ldd	r24, Z+15	; 0x0f
digitalWrite():
     afa:	8b 31       	cpi	r24, 0x1B	; 27
     afc:	10 f4       	brcc	.+4      	; 0xb02 <UartClass::begin(unsigned long, unsigned int)+0xfa>
     afe:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:31
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
  uint8_t bit_mask = digitalPinToBitMask(pin);
     b00:	45 df       	rcall	.-374    	; 0x98c <digitalWrite.part.2>
begin():
     b02:	0e 0d       	add	r16, r14
     b04:	1f 1d       	adc	r17, r15
     b06:	c0 0f       	add	r28, r16
     b08:	d1 1f       	adc	r29, r17
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:236

  // Restore SREG content
  SREG = oldSREG;
     b0a:	8f 85       	ldd	r24, Y+15	; 0x0f
pinMode():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/UART.cpp:237
}
     b0c:	8b 31       	cpi	r24, 0x1B	; 27
     b0e:	10 f4       	brcc	.+4      	; 0xb14 <UartClass::begin(unsigned long, unsigned int)+0x10c>
     b10:	61 e0       	ldi	r22, 0x01	; 1
     b12:	a8 de       	rcall	.-688    	; 0x864 <pinMode.part.1>
begin():
     b14:	bf be       	out	0x3f, r11	; 63
     b16:	df 91       	pop	r29
     b18:	cf 91       	pop	r28
     b1a:	1f 91       	pop	r17
     b1c:	0f 91       	pop	r16
     b1e:	ff 90       	pop	r15
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/Dispensing.cpp:116
  }//...........................................................................end of no dispense....................................................................................
}

void Dispenseclass::secondboil_stop_pump()
{
  stop_pump=0;
     b20:	ef 90       	pop	r14
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/Dispensing.cpp:117
  tim_disp=3;
     b22:	df 90       	pop	r13
     b24:	cf 90       	pop	r12
     b26:	bf 90       	pop	r11
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/Dispensing.cpp:118
  Dispense.ticker_stop();
     b28:	af 90       	pop	r10
     b2a:	08 95       	ret

00000b2c <Dispenseclass::secondboil_stop_pump() [clone .constprop.79]>:
secondboil_stop_pump():
     b2c:	10 92 e7 28 	sts	0x28E7, r1	; 0x8028e7 <stop_pump>
     b30:	83 e0       	ldi	r24, 0x03	; 3
     b32:	80 93 e6 28 	sts	0x28E6, r24	; 0x8028e6 <tim_disp>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/Dispensing.cpp:120
  digitalWrite(peristalitic_pump,LOW);
  screen=0;
     b36:	e1 db       	rcall	.-2110   	; 0x2fa <Dispenseclass::ticker_stop() [clone .constprop.89]>
digitalWrite():
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/Dispensing.cpp:121
}
     b38:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:227
    vport->OUT &= ~mask;
  else // CHANGE
    vport->IN = mask;
}

uint8_t digitalRead(uint8_t pin)
     b3a:	84 e0       	ldi	r24, 0x04	; 4
     b3c:	27 df       	rcall	.-434    	; 0x98c <digitalWrite.part.2>
secondboil_stop_pump():
     b3e:	10 92 e5 28 	sts	0x28E5, r1	; 0x8028e5 <screen>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:230
{
  /* Get bit mask and check valid pin */
  uint8_t bit_mask = digitalPinToBitMask(pin);
     b42:	08 95       	ret

00000b44 <digitalRead.part.3>:
digitalRead.part.3():
     b44:	0f 93       	push	r16
     b46:	1f 93       	push	r17
     b48:	cf 93       	push	r28
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:231
  if (bit_mask == NOT_A_PIN)
     b4a:	08 2f       	mov	r16, r24
     b4c:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:97
static void turnOffPWM(uint8_t pin)
{
  /* Actually turn off compare channel, not the timer */

  /* Get pin's timer */
  uint8_t timer = digitalPinToTimer(pin);
     b4e:	f8 01       	movw	r30, r16
     b50:	e9 55       	subi	r30, 0x59	; 89
     b52:	f2 47       	sbci	r31, 0x72	; 114
     b54:	c0 81       	ld	r28, Z
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:239
  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  turnOffPWM(pin);

  /* Get port and check valid port */
  PORT_t *port = digitalPinToPortStruct(pin);
     b56:	cf 3f       	cpi	r28, 0xFF	; 255
     b58:	81 f0       	breq	.+32     	; 0xb7a <digitalRead.part.3+0x36>
turnOffPWM():
     b5a:	8b 31       	cpi	r24, 0x1B	; 27
     b5c:	08 f4       	brcc	.+2      	; 0xb60 <digitalRead.part.3+0x1c>
     b5e:	eb de       	rcall	.-554    	; 0x936 <turnOffPWM.part.0>
digitalRead.part.3():
     b60:	f8 01       	movw	r30, r16
     b62:	e4 57       	subi	r30, 0x74	; 116
     b64:	f2 47       	sbci	r31, 0x72	; 114
     b66:	e0 81       	ld	r30, Z
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:242

  /* Read pin value from PORTx.IN register */
  if (port->IN & bit_mask)
     b68:	80 e2       	ldi	r24, 0x20	; 32
     b6a:	e8 9f       	mul	r30, r24
     b6c:	f0 01       	movw	r30, r0
     b6e:	11 24       	eor	r1, r1
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:232
uint8_t digitalRead(uint8_t pin)
{
  /* Get bit mask and check valid pin */
  uint8_t bit_mask = digitalPinToBitMask(pin);
  if (bit_mask == NOT_A_PIN)
    return LOW;
     b70:	fc 5f       	subi	r31, 0xFC	; 252
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:248
    return HIGH;
  else
    return LOW;

  return LOW;
}
     b72:	80 85       	ldd	r24, Z+8	; 0x08
     b74:	c8 23       	and	r28, r24
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	09 f4       	brne	.+2      	; 0xb7c <digitalRead.part.3+0x38>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:103
{
  uint32_t m;
  uint16_t t;

  /* Save current state and disable interrupts */
  uint8_t status = SREG;
     b7a:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:104
  cli();
     b7c:	cf 91       	pop	r28
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:107

  /* Get current number of millis (i.e. overflows) and timer count */
  m = timer_millis;
     b7e:	1f 91       	pop	r17
     b80:	0f 91       	pop	r16
     b82:	08 95       	ret

00000b84 <micros>:
micros():
     b84:	8f b7       	in	r24, 0x3f	; 63
     b86:	f8 94       	cli
     b88:	20 91 88 28 	lds	r18, 0x2888	; 0x802888 <timer_millis>
     b8c:	30 91 89 28 	lds	r19, 0x2889	; 0x802889 <timer_millis+0x1>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:108
  t = _timer->CNT;
     b90:	40 91 8a 28 	lds	r20, 0x288A	; 0x80288a <timer_millis+0x2>
     b94:	50 91 8b 28 	lds	r21, 0x288B	; 0x80288b <timer_millis+0x3>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:112

  /* If the timer overflow flag is raised, we just missed it,
  increment to account for it, & read new ticks */
  if (_timer->INTFLAGS & TCB_CAPT_bm)
     b98:	e0 91 aa 0a 	lds	r30, 0x0AAA	; 0x800aaa <__TEXT_REGION_LENGTH__+0x7f4aaa>
     b9c:	f0 91 ab 0a 	lds	r31, 0x0AAB	; 0x800aab <__TEXT_REGION_LENGTH__+0x7f4aab>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:114
  {
    m++;
     ba0:	90 91 a6 0a 	lds	r25, 0x0AA6	; 0x800aa6 <__TEXT_REGION_LENGTH__+0x7f4aa6>
     ba4:	90 ff       	sbrs	r25, 0
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:115
    t = _timer->CNT;
     ba6:	08 c0       	rjmp	.+16     	; 0xbb8 <micros+0x34>
     ba8:	2f 5f       	subi	r18, 0xFF	; 255
     baa:	3f 4f       	sbci	r19, 0xFF	; 255
     bac:	4f 4f       	sbci	r20, 0xFF	; 255
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:119
  }

  // Restore SREG
  SREG = status;
     bae:	5f 4f       	sbci	r21, 0xFF	; 255
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:125

#if (F_CPU == 20000000L)
  t = t >> 4;
  return m * 1000 + (t - (t >> 2) + (t >> 4) - (t >> 6));
#elif (F_CPU == 16000000L)
  return m * 1000 + (t >> 4);
     bb0:	e0 91 aa 0a 	lds	r30, 0x0AAA	; 0x800aaa <__TEXT_REGION_LENGTH__+0x7f4aaa>
     bb4:	f0 91 ab 0a 	lds	r31, 0x0AAB	; 0x800aab <__TEXT_REGION_LENGTH__+0x7f4aab>
     bb8:	8f bf       	out	0x3f, r24	; 63
     bba:	a8 ee       	ldi	r26, 0xE8	; 232
     bbc:	b3 e0       	ldi	r27, 0x03	; 3
     bbe:	0e 94 0e 23 	call	0x461c	; 0x461c <__muluhisi3>
     bc2:	24 e0       	ldi	r18, 0x04	; 4
     bc4:	f6 95       	lsr	r31
     bc6:	e7 95       	ror	r30
     bc8:	2a 95       	dec	r18
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:146
  return 0;
#endif
}

void delay(unsigned long ms)
{
     bca:	e1 f7       	brne	.-8      	; 0xbc4 <micros+0x40>
     bcc:	6e 0f       	add	r22, r30
     bce:	7f 1f       	adc	r23, r31
     bd0:	81 1d       	adc	r24, r1
     bd2:	91 1d       	adc	r25, r1
     bd4:	08 95       	ret

00000bd6 <delay>:
delay():
     bd6:	8f 92       	push	r8
     bd8:	9f 92       	push	r9
     bda:	af 92       	push	r10
     bdc:	bf 92       	push	r11
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:147
  uint32_t start_time = micros(), delay_time = 1000 * ms;
     bde:	cf 92       	push	r12
     be0:	df 92       	push	r13
     be2:	ef 92       	push	r14
     be4:	ff 92       	push	r15
     be6:	4b 01       	movw	r8, r22
     be8:	5c 01       	movw	r10, r24
     bea:	cc df       	rcall	.-104    	; 0xb84 <micros>
     bec:	6b 01       	movw	r12, r22
     bee:	7c 01       	movw	r14, r24
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:150

  /* Calculate future time to return */
  uint32_t return_time = start_time + delay_time;
     bf0:	a8 ee       	ldi	r26, 0xE8	; 232
     bf2:	b3 e0       	ldi	r27, 0x03	; 3
     bf4:	a5 01       	movw	r20, r10
     bf6:	94 01       	movw	r18, r8
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:153

  /* If return time overflows */
  if (return_time < delay_time)
     bf8:	0e 94 0e 23 	call	0x461c	; 0x461c <__muluhisi3>
     bfc:	c6 0e       	add	r12, r22
     bfe:	d7 1e       	adc	r13, r23
     c00:	e8 1e       	adc	r14, r24
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:156
  {
    /* Wait until micros overflows */
    while (micros() > return_time)
     c02:	f9 1e       	adc	r15, r25
     c04:	c6 16       	cp	r12, r22
     c06:	d7 06       	cpc	r13, r23
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:161
      ;
  }

  /* Wait until return time */
  while (micros() < return_time)
     c08:	e8 06       	cpc	r14, r24
     c0a:	f9 06       	cpc	r15, r25
     c0c:	10 f4       	brcc	.+4      	; 0xc12 <delay+0x3c>
     c0e:	ba df       	rcall	.-140    	; 0xb84 <micros>
     c10:	f9 cf       	rjmp	.-14     	; 0xc04 <delay+0x2e>
     c12:	b8 df       	rcall	.-144    	; 0xb84 <micros>
     c14:	6c 15       	cp	r22, r12
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:163
    ;
}
     c16:	7d 05       	cpc	r23, r13
     c18:	8e 05       	cpc	r24, r14
     c1a:	9f 05       	cpc	r25, r15
     c1c:	d0 f3       	brcs	.-12     	; 0xc12 <delay+0x3c>
     c1e:	ff 90       	pop	r15
     c20:	ef 90       	pop	r14
     c22:	df 90       	pop	r13
     c24:	cf 90       	pop	r12
     c26:	bf 90       	pop	r11
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:87
{
  unsigned long m;

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer_millis)
  uint8_t status = SREG;
     c28:	af 90       	pop	r10
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:88
  cli();
     c2a:	9f 90       	pop	r9
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:90

  m = timer_millis;
     c2c:	8f 90       	pop	r8
     c2e:	08 95       	ret

00000c30 <millis>:
millis():
     c30:	2f b7       	in	r18, 0x3f	; 63
     c32:	f8 94       	cli
     c34:	60 91 88 28 	lds	r22, 0x2888	; 0x802888 <timer_millis>
     c38:	70 91 89 28 	lds	r23, 0x2889	; 0x802889 <timer_millis+0x1>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:92

  SREG = status;
     c3c:	80 91 8a 28 	lds	r24, 0x288A	; 0x80288a <timer_millis+0x2>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:71
	else diffTime = micros() - lastTime;
	enabled = false;
	status = PAUSED;
	}

void Ticker::update() {
     c40:	90 91 8b 28 	lds	r25, 0x288B	; 0x80288b <timer_millis+0x3>
     c44:	2f bf       	out	0x3f, r18	; 63
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:76
	if (tick()) callback();
	}

bool Ticker::tick() {
	if (!enabled)	return false;
     c46:	08 95       	ret

00000c48 <Ticker::update()>:
update():
     c48:	0f 93       	push	r16
     c4a:	1f 93       	push	r17
     c4c:	cf 93       	push	r28
     c4e:	df 93       	push	r29
tick():
     c50:	fc 01       	movw	r30, r24
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:77
	if (resolution == MILLIS) {
     c52:	20 81       	ld	r18, Z
     c54:	22 23       	and	r18, r18
     c56:	09 f4       	brne	.+2      	; 0xc5a <Ticker::update()+0x12>
     c58:	50 c0       	rjmp	.+160    	; 0xcfa <Ticker::update()+0xb2>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:78
		if ((millis() - lastTime) >= timer) {
     c5a:	ec 01       	movw	r28, r24
     c5c:	81 85       	ldd	r24, Z+9	; 0x09
     c5e:	92 85       	ldd	r25, Z+10	; 0x0a
     c60:	01 97       	sbiw	r24, 0x01	; 1
     c62:	b9 f5       	brne	.+110    	; 0xcd2 <Ticker::update()+0x8a>
     c64:	e5 df       	rcall	.-54     	; 0xc30 <millis>
     c66:	0b 89       	ldd	r16, Y+19	; 0x13
     c68:	1c 89       	ldd	r17, Y+20	; 0x14
     c6a:	2d 89       	ldd	r18, Y+21	; 0x15
     c6c:	3e 89       	ldd	r19, Y+22	; 0x16
     c6e:	60 1b       	sub	r22, r16
     c70:	71 0b       	sbc	r23, r17
     c72:	82 0b       	sbc	r24, r18
     c74:	93 0b       	sbc	r25, r19
     c76:	09 81       	ldd	r16, Y+1	; 0x01
     c78:	1a 81       	ldd	r17, Y+2	; 0x02
     c7a:	2b 81       	ldd	r18, Y+3	; 0x03
     c7c:	3c 81       	ldd	r19, Y+4	; 0x04
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:79
			lastTime = millis();
     c7e:	60 17       	cp	r22, r16
     c80:	71 07       	cpc	r23, r17
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:87
	  	return true;
			}
		}
	else {
		if ((micros() - lastTime) >= timer) {
			lastTime = micros();
     c82:	82 07       	cpc	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	c8 f1       	brcs	.+114    	; 0xcfa <Ticker::update()+0xb2>
     c88:	d3 df       	rcall	.-90     	; 0xc30 <millis>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:88
			if (repeat - counts == 1) enabled = false;
     c8a:	6b 8b       	std	Y+19, r22	; 0x13
     c8c:	7c 8b       	std	Y+20, r23	; 0x14
     c8e:	8d 8b       	std	Y+21, r24	; 0x15
     c90:	9e 8b       	std	Y+22, r25	; 0x16
     c92:	8b 85       	ldd	r24, Y+11	; 0x0b
     c94:	9c 85       	ldd	r25, Y+12	; 0x0c
     c96:	ad 85       	ldd	r26, Y+13	; 0x0d
     c98:	be 85       	ldd	r27, Y+14	; 0x0e
     c9a:	4d 81       	ldd	r20, Y+5	; 0x05
     c9c:	5e 81       	ldd	r21, Y+6	; 0x06
     c9e:	6f 81       	ldd	r22, Y+7	; 0x07
     ca0:	78 85       	ldd	r23, Y+8	; 0x08
     ca2:	48 1b       	sub	r20, r24
     ca4:	59 0b       	sbc	r21, r25
     ca6:	6a 0b       	sbc	r22, r26
     ca8:	7b 0b       	sbc	r23, r27
     caa:	41 30       	cpi	r20, 0x01	; 1
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:89
			counts++;
     cac:	51 05       	cpc	r21, r1
     cae:	61 05       	cpc	r22, r1
     cb0:	71 05       	cpc	r23, r1
     cb2:	09 f4       	brne	.+2      	; 0xcb6 <Ticker::update()+0x6e>
     cb4:	18 82       	st	Y, r1
     cb6:	01 96       	adiw	r24, 0x01	; 1
     cb8:	a1 1d       	adc	r26, r1
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:72
	enabled = false;
	status = PAUSED;
	}

void Ticker::update() {
	if (tick()) callback();
     cba:	b1 1d       	adc	r27, r1
     cbc:	8b 87       	std	Y+11, r24	; 0x0b
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:73
	}
     cbe:	9c 87       	std	Y+12, r25	; 0x0c
     cc0:	ad 87       	std	Y+13, r26	; 0x0d
     cc2:	be 87       	std	Y+14, r27	; 0x0e
update():
     cc4:	e9 89       	ldd	r30, Y+17	; 0x11
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:72
	enabled = false;
	status = PAUSED;
	}

void Ticker::update() {
	if (tick()) callback();
     cc6:	fa 89       	ldd	r31, Y+18	; 0x12
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:86
			counts++;				
	  	return true;
			}
		}
	else {
		if ((micros() - lastTime) >= timer) {
     cc8:	df 91       	pop	r29
     cca:	cf 91       	pop	r28
     ccc:	1f 91       	pop	r17
     cce:	0f 91       	pop	r16
     cd0:	09 94       	ijmp
tick():
     cd2:	58 df       	rcall	.-336    	; 0xb84 <micros>
     cd4:	0b 89       	ldd	r16, Y+19	; 0x13
     cd6:	1c 89       	ldd	r17, Y+20	; 0x14
     cd8:	2d 89       	ldd	r18, Y+21	; 0x15
     cda:	3e 89       	ldd	r19, Y+22	; 0x16
     cdc:	60 1b       	sub	r22, r16
     cde:	71 0b       	sbc	r23, r17
     ce0:	82 0b       	sbc	r24, r18
     ce2:	93 0b       	sbc	r25, r19
     ce4:	09 81       	ldd	r16, Y+1	; 0x01
     ce6:	1a 81       	ldd	r17, Y+2	; 0x02
     ce8:	2b 81       	ldd	r18, Y+3	; 0x03
     cea:	3c 81       	ldd	r19, Y+4	; 0x04
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:87
			lastTime = micros();
     cec:	60 17       	cp	r22, r16
     cee:	71 07       	cpc	r23, r17
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:73
	status = PAUSED;
	}

void Ticker::update() {
	if (tick()) callback();
	}
     cf0:	82 07       	cpc	r24, r18
     cf2:	93 07       	cpc	r25, r19
     cf4:	10 f0       	brcs	.+4      	; 0xcfa <Ticker::update()+0xb2>
     cf6:	46 df       	rcall	.-372    	; 0xb84 <micros>
     cf8:	c8 cf       	rjmp	.-112    	; 0xc8a <Ticker::update()+0x42>
update():
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:40
	counts = 0;
	}

Ticker::~Ticker() {}

void Ticker::start() {
     cfa:	df 91       	pop	r29
     cfc:	cf 91       	pop	r28
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:41
	if (callback == NULL) return;
     cfe:	1f 91       	pop	r17
     d00:	0f 91       	pop	r16
     d02:	08 95       	ret

00000d04 <Ticker::start()>:
start():
     d04:	cf 93       	push	r28
     d06:	df 93       	push	r29
     d08:	fc 01       	movw	r30, r24
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:42
	if (resolution == MILLIS) lastTime = millis();
     d0a:	21 89       	ldd	r18, Z+17	; 0x11
     d0c:	32 89       	ldd	r19, Z+18	; 0x12
     d0e:	23 2b       	or	r18, r19
     d10:	a1 f0       	breq	.+40     	; 0xd3a <Ticker::start()+0x36>
     d12:	ec 01       	movw	r28, r24
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:43
	else lastTime = micros();
     d14:	81 85       	ldd	r24, Z+9	; 0x09
     d16:	92 85       	ldd	r25, Z+10	; 0x0a
     d18:	01 97       	sbiw	r24, 0x01	; 1
     d1a:	91 f4       	brne	.+36     	; 0xd40 <Ticker::start()+0x3c>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:44
	enabled = true;
     d1c:	89 df       	rcall	.-238    	; 0xc30 <millis>
     d1e:	6b 8b       	std	Y+19, r22	; 0x13
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:45
	counts = 0;
     d20:	7c 8b       	std	Y+20, r23	; 0x14
     d22:	8d 8b       	std	Y+21, r24	; 0x15
     d24:	9e 8b       	std	Y+22, r25	; 0x16
     d26:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:46
	status = RUNNING;
     d28:	88 83       	st	Y, r24
     d2a:	1b 86       	std	Y+11, r1	; 0x0b
     d2c:	1c 86       	std	Y+12, r1	; 0x0c
     d2e:	1d 86       	std	Y+13, r1	; 0x0d
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:47
	}
     d30:	1e 86       	std	Y+14, r1	; 0x0e
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:43
Ticker::~Ticker() {}

void Ticker::start() {
	if (callback == NULL) return;
	if (resolution == MILLIS) lastTime = millis();
	else lastTime = micros();
     d36:	8f 87       	std	Y+15, r24	; 0x0f
     d38:	98 8b       	std	Y+16, r25	; 0x10
     d3a:	df 91       	pop	r29
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:97
		}
	return false;
	}

void Ticker::interval(uint32_t timer) {
	if (resolution == MICROS) timer = timer * 1000;
     d3c:	cf 91       	pop	r28
     d3e:	08 95       	ret
     d40:	21 df       	rcall	.-446    	; 0xb84 <micros>
     d42:	ed cf       	rjmp	.-38     	; 0xd1e <Ticker::start()+0x1a>

00000d44 <Buzzerclass::buzzer_on(unsigned long) [clone .constprop.93]>:
interval():
     d44:	20 91 d7 2a 	lds	r18, 0x2AD7	; 0x802ad7 <buz+0x9>
     d48:	30 91 d8 2a 	lds	r19, 0x2AD8	; 0x802ad8 <buz+0xa>
     d4c:	23 2b       	or	r18, r19
     d4e:	31 f4       	brne	.+12     	; 0xd5c <Buzzerclass::buzzer_on(unsigned long) [clone .constprop.93]+0x18>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:98
	this->timer = timer;
     d50:	a8 ee       	ldi	r26, 0xE8	; 232
     d52:	b3 e0       	ldi	r27, 0x03	; 3
     d54:	9b 01       	movw	r18, r22
     d56:	ac 01       	movw	r20, r24
     d58:	0e 94 0e 23 	call	0x461c	; 0x461c <__muluhisi3>
     d5c:	60 93 cf 2a 	sts	0x2ACF, r22	; 0x802acf <buz+0x1>
     d60:	70 93 d0 2a 	sts	0x2AD0, r23	; 0x802ad0 <buz+0x2>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/buzzer_onoff.cpp:21

void Buzzerclass:: buzzer_on(uint32_t interval1)
 {
   buz.interval(interval1);                     //set buzzer On time//have to add buz
   digitalWrite(buzzer, HIGH);
   buz.start();                                 //have to add buzzer 
     d64:	80 93 d1 2a 	sts	0x2AD1, r24	; 0x802ad1 <buz+0x3>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/Process.cpp:135
   }
}

void Processclass::process_stop()
{    
  if(process_stop_variable==0)
     d68:	90 93 d2 2a 	sts	0x2AD2, r25	; 0x802ad2 <buz+0x4>
digitalWrite():
     d6c:	61 e0       	ldi	r22, 0x01	; 1
     d6e:	87 e1       	ldi	r24, 0x17	; 23
     d70:	0d de       	rcall	.-998    	; 0x98c <digitalWrite.part.2>
buzzer_on():
     d72:	8e ec       	ldi	r24, 0xCE	; 206
     d74:	9a e2       	ldi	r25, 0x2A	; 42
     d76:	c6 cf       	rjmp	.-116    	; 0xd04 <Ticker::start()>

00000d78 <Processclass::process_stop() [clone .constprop.53]>:
process_stop():
     d78:	80 91 d4 28 	lds	r24, 0x28D4	; 0x8028d4 <process_stop_variable>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/Process.cpp:139
  { 
    digitalWrite(Red_LED,LOW);
    digitalWrite(Heater2,LOW);
    Heaters_stop1.start();    
     d7c:	81 11       	cpse	r24, r1
     d7e:	0c c0       	rjmp	.+24     	; 0xd98 <Processclass::process_stop() [clone .constprop.53]+0x20>
digitalWrite():
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/Process.cpp:140
    process_stop_variable=1;
     d80:	60 e0       	ldi	r22, 0x00	; 0
     d82:	88 e1       	ldi	r24, 0x18	; 24
     d84:	03 de       	rcall	.-1018   	; 0x98c <digitalWrite.part.2>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/Process.cpp:142
  }  
}
     d86:	60 e0       	ldi	r22, 0x00	; 0
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:488
    } 
  }
}
void Buttonclass ::Emergency_Procees_Halt()               //stand by mode
{
  buz1.buzzer_on(1000);
     d88:	85 e1       	ldi	r24, 0x15	; 21
     d8a:	00 de       	rcall	.-1024   	; 0x98c <digitalWrite.part.2>
process_stop():
     d8c:	88 e9       	ldi	r24, 0x98	; 152
     d8e:	9a e2       	ldi	r25, 0x2A	; 42
     d90:	b9 df       	rcall	.-142    	; 0xd04 <Ticker::start()>
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	80 93 d4 28 	sts	0x28D4, r24	; 0x8028d4 <process_stop_variable>
     d98:	08 95       	ret

00000d9a <Buttonclass::Emergency_Procees_Halt() [clone .constprop.26]>:
Emergency_Procees_Halt():
     d9a:	68 ee       	ldi	r22, 0xE8	; 232
     d9c:	73 e0       	ldi	r23, 0x03	; 3
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	d0 df       	rcall	.-96     	; 0xd44 <Buzzerclass::buzzer_on(unsigned long) [clone .constprop.93]>
digitalWrite():
     da4:	60 e0       	ldi	r22, 0x00	; 0
     da6:	88 e1       	ldi	r24, 0x18	; 24
     da8:	f1 dd       	rcall	.-1054   	; 0x98c <digitalWrite.part.2>
     daa:	60 e0       	ldi	r22, 0x00	; 0
     dac:	89 e1       	ldi	r24, 0x19	; 25
     dae:	ee dd       	rcall	.-1060   	; 0x98c <digitalWrite.part.2>
     db0:	60 e0       	ldi	r22, 0x00	; 0
     db2:	84 e1       	ldi	r24, 0x14	; 20
     db4:	eb dd       	rcall	.-1066   	; 0x98c <digitalWrite.part.2>
     db6:	60 e0       	ldi	r22, 0x00	; 0
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:494
  digitalWrite(Red_LED,LOW);
  digitalWrite(Green_LED,LOW); 
  digitalWrite(solonoid,LOW);
  digitalWrite(Contacter1,LOW);
  digitalWrite(peristalitic_pump,LOW);
  sec_Heater=0;
     db8:	83 e1       	ldi	r24, 0x13	; 19
     dba:	e8 dd       	rcall	.-1072   	; 0x98c <digitalWrite.part.2>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:495
  Level_var=2;                                            //process stand by mode
     dbc:	60 e0       	ldi	r22, 0x00	; 0
     dbe:	84 e0       	ldi	r24, 0x04	; 4
     dc0:	e5 dd       	rcall	.-1078   	; 0x98c <digitalWrite.part.2>
Emergency_Procees_Halt():
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:496
  Stop_cycle=0;
     dc2:	10 92 ca 28 	sts	0x28CA, r1	; 0x8028ca <sec_Heater>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:497
  Pros.process_stop();
     dc6:	82 e0       	ldi	r24, 0x02	; 2
     dc8:	80 93 c9 28 	sts	0x28C9, r24	; 0x8028c9 <Level_var>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:498
  screen=0;
     dcc:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <Stop_cycle>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:499
  vol_set=0;
     dd0:	d3 df       	rcall	.-90     	; 0xd78 <Processclass::process_stop() [clone .constprop.53]>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:500
  Process1=0;                                             //to stop the process
     dd2:	10 92 e5 28 	sts	0x28E5, r1	; 0x8028e5 <screen>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:502

  Dispense.ticker_stop(); 
     dd6:	10 92 c8 28 	sts	0x28C8, r1	; 0x8028c8 <vol_set>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:503
  Flow_Err=0;
     dda:	10 92 c7 28 	sts	0x28C7, r1	; 0x8028c7 <Process1>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:504
  Temp_Err=0;
     dde:	8d da       	rcall	.-2790   	; 0x2fa <Dispenseclass::ticker_stop() [clone .constprop.89]>
     de0:	10 92 c6 28 	sts	0x28C6, r1	; 0x8028c6 <Flow_Err>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:505
  sfil_comp=1;                                            //when secondory filled completed
     de4:	10 92 c5 28 	sts	0x28C5, r1	; 0x8028c5 <Temp_Err>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:506
  sfil=0;
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	80 93 da 28 	sts	0x28DA, r24	; 0x8028da <sfil_comp>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:507
  sfil_on=0;
     dee:	10 92 c4 28 	sts	0x28C4, r1	; 0x8028c4 <sfil>
     df2:	10 92 c0 28 	sts	0x28C0, r1	; 0x8028c0 <sfil_on>
     df6:	10 92 c1 28 	sts	0x28C1, r1	; 0x8028c1 <sfil_on+0x1>
     dfa:	10 92 c2 28 	sts	0x28C2, r1	; 0x8028c2 <sfil_on+0x2>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src\utility/twi.c:825
 *
 *  \param result  The result of the operation.
 */
void TWI_SlaveTransactionFinished(uint8_t result)
{
  TWI0.SCTRLA |= (TWI_APIEN_bm | TWI_PIEN_bm);
     dfe:	10 92 c3 28 	sts	0x28C3, r1	; 0x8028c3 <sfil_on+0x3>
     e02:	08 95       	ret

00000e04 <TWI_SlaveTransactionFinished>:
TWI_SlaveTransactionFinished():
     e04:	e0 ea       	ldi	r30, 0xA0	; 160
     e06:	f8 e0       	ldi	r31, 0x08	; 8
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src\utility/twi.c:826
  twi_mode = TWI_MODE_SLAVE;
     e08:	91 85       	ldd	r25, Z+9	; 0x09
     e0a:	90 66       	ori	r25, 0x60	; 96
     e0c:	91 87       	std	Z+9, r25	; 0x09
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src\utility/twi.c:827
  slave_result = result;
     e0e:	92 e0       	ldi	r25, 0x02	; 2
     e10:	90 93 cf 28 	sts	0x28CF, r25	; 0x8028cf <twi_mode>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src\utility/twi.c:828
  slave_trans_status = TWIM_STATUS_READY;
     e14:	80 93 7c 28 	sts	0x287C, r24	; 0x80287c <slave_result>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src\utility/twi.c:669
 *  being addressed by a master
 *
 */
void TWI_SlaveAddressMatchHandler()
{
  slave_trans_status = TWIS_STATUS_BUSY;
     e18:	10 92 7b 28 	sts	0x287B, r1	; 0x80287b <slave_trans_status>
     e1c:	08 95       	ret

00000e1e <TWI_SlaveAddressMatchHandler>:
TWI_SlaveAddressMatchHandler():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src\utility/twi.c:670
  slave_result = TWIS_RESULT_UNKNOWN;
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	80 93 7b 28 	sts	0x287B, r24	; 0x80287b <slave_trans_status>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src\utility/twi.c:673

  /* Send ACK, wait for data interrupt */
  TWI0.SCTRLB = TWI_SCMD_RESPONSE_gc;
     e24:	10 92 7c 28 	sts	0x287C, r1	; 0x80287c <slave_result>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src\utility/twi.c:676

  /* If Master Read/Slave Write */
  if (TWI0.SSTATUS & TWI_DIR_bm)
     e28:	93 e0       	ldi	r25, 0x03	; 3
     e2a:	90 93 aa 08 	sts	0x08AA, r25	; 0x8008aa <__TEXT_REGION_LENGTH__+0x7f48aa>
     e2e:	90 91 ab 08 	lds	r25, 0x08AB	; 0x8008ab <__TEXT_REGION_LENGTH__+0x7f48ab>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src\utility/twi.c:678
  {
    slave_bytesWritten = 0;
     e32:	91 ff       	sbrs	r25, 1
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src\utility/twi.c:680
    /* Call user function  */
    slave_bytesToWrite = TWI_onSlaveTransmit();
     e34:	0b c0       	rjmp	.+22     	; 0xe4c <TWI_SlaveAddressMatchHandler+0x2e>
     e36:	10 92 86 28 	sts	0x2886, r1	; 0x802886 <slave_bytesWritten>
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	e0 e0       	ldi	r30, 0x00	; 0
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src\utility/twi.c:681
    twi_mode = TWI_MODE_SLAVE_TRANSMIT;
     e3e:	09 95       	icall
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src\utility/twi.c:688
  /* If Master Write/Slave Read */
  else
  {
    slave_bytesRead = 0;
    slave_callUserReceive = 1;
    twi_mode = TWI_MODE_SLAVE_RECEIVE;
     e40:	80 93 85 28 	sts	0x2885, r24	; 0x802885 <slave_bytesToWrite>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src\utility/twi.c:692
  }

  /* Data interrupt to follow... */
}
     e44:	85 e0       	ldi	r24, 0x05	; 5
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src\utility/twi.c:686
    twi_mode = TWI_MODE_SLAVE_TRANSMIT;
  }
  /* If Master Write/Slave Read */
  else
  {
    slave_bytesRead = 0;
     e46:	80 93 cf 28 	sts	0x28CF, r24	; 0x8028cf <twi_mode>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src\utility/twi.c:687
    slave_callUserReceive = 1;
     e4a:	08 95       	ret
     e4c:	10 92 87 28 	sts	0x2887, r1	; 0x802887 <slave_bytesRead>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src\utility/twi.c:688
    twi_mode = TWI_MODE_SLAVE_RECEIVE;
     e50:	80 93 84 28 	sts	0x2884, r24	; 0x802884 <slave_callUserReceive>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src/Wire.cpp:337
// or after requestFrom(address, numBytes)
int TwoWire::peek()
{
  int value = -1;

  if (rxBufferIndex < rxBufferLength)
     e54:	86 e0       	ldi	r24, 0x06	; 6
     e56:	f7 cf       	rjmp	.-18     	; 0xe46 <TWI_SlaveAddressMatchHandler+0x28>

00000e58 <TwoWire::flush()>:
flush():
     e58:	08 95       	ret

00000e5a <TwoWire::peek()>:
peek():
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	30 91 d3 28 	lds	r19, 0x28D3	; 0x8028d3 <TwoWire::rxBufferIndex>
     e62:	20 91 d2 28 	lds	r18, 0x28D2	; 0x8028d2 <TwoWire::rxBufferLength>
     e66:	32 17       	cp	r19, r18
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src/Wire.cpp:343
  {
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
     e68:	10 f4       	brcc	.+4      	; 0xe6e <TwoWire::peek()+0x14>
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	91 95       	neg	r25
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src/Wire.cpp:321
int TwoWire::read()
{
  int value = -1;

  // get each successive byte on each call
  if (rxBufferIndex < rxBufferLength)
     e70:	81 95       	neg	r24
     e72:	91 09       	sbc	r25, r1
     e74:	08 95       	ret

00000e76 <TwoWire::read()>:
read():
     e76:	80 91 d3 28 	lds	r24, 0x28D3	; 0x8028d3 <TwoWire::rxBufferIndex>
     e7a:	90 91 d2 28 	lds	r25, 0x28D2	; 0x8028d2 <TwoWire::rxBufferLength>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src/Wire.cpp:324
  {
    value = rxBuffer[rxBufferIndex];
    rxBufferIndex++;
     e7e:	89 17       	cp	r24, r25
     e80:	30 f4       	brcc	.+12     	; 0xe8e <TwoWire::read()+0x18>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src/Wire.cpp:323
  int value = -1;

  // get each successive byte on each call
  if (rxBufferIndex < rxBufferLength)
  {
    value = rxBuffer[rxBufferIndex];
     e82:	8f 5f       	subi	r24, 0xFF	; 255
     e84:	80 93 d3 28 	sts	0x28D3, r24	; 0x8028d3 <TwoWire::rxBufferIndex>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src/Wire.cpp:318
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read()
{
  int value = -1;
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src/Wire.cpp:328
    value = rxBuffer[rxBufferIndex];
    rxBufferIndex++;
  }

  return value;
}
     e8c:	08 95       	ret
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src/Wire.cpp:310
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available()
{
  return rxBufferLength - rxBufferIndex;
     e8e:	8f ef       	ldi	r24, 0xFF	; 255
     e90:	9f ef       	ldi	r25, 0xFF	; 255
     e92:	08 95       	ret

00000e94 <TwoWire::available()>:
available():
     e94:	80 91 d2 28 	lds	r24, 0x28D2	; 0x8028d2 <TwoWire::rxBufferLength>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src/Wire.cpp:311
}
     e98:	90 91 d3 28 	lds	r25, 0x28D3	; 0x8028d3 <TwoWire::rxBufferIndex>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src/Wire.cpp:296

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
     e9c:	89 1b       	sub	r24, r25
     e9e:	99 0b       	sbc	r25, r25
     ea0:	08 95       	ret

00000ea2 <TwoWire::write(unsigned char const*, unsigned int)>:
write():
     ea2:	cf 92       	push	r12
     ea4:	df 92       	push	r13
     ea6:	ef 92       	push	r14
     ea8:	ff 92       	push	r15
     eaa:	0f 93       	push	r16
     eac:	1f 93       	push	r17
     eae:	cf 93       	push	r28
     eb0:	df 93       	push	r29
     eb2:	7c 01       	movw	r14, r24
     eb4:	8a 01       	movw	r16, r20
     eb6:	eb 01       	movw	r28, r22
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src/Wire.cpp:297
  for (size_t i = 0; i < quantity; i++)
     eb8:	6b 01       	movw	r12, r22
     eba:	c4 0e       	add	r12, r20
     ebc:	d5 1e       	adc	r13, r21
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src/Wire.cpp:299
  {
    write(*(data + i));
     ebe:	cc 15       	cp	r28, r12
     ec0:	dd 05       	cpc	r29, r13
     ec2:	51 f0       	breq	.+20     	; 0xed8 <TwoWire::write(unsigned char const*, unsigned int)+0x36>
     ec4:	69 91       	ld	r22, Y+
     ec6:	d7 01       	movw	r26, r14
     ec8:	ed 91       	ld	r30, X+
     eca:	fc 91       	ld	r31, X
     ecc:	01 90       	ld	r0, Z+
     ece:	f0 81       	ld	r31, Z
     ed0:	e0 2d       	mov	r30, r0
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src/Wire.cpp:303
  }

  return quantity;
}
     ed2:	c7 01       	movw	r24, r14
     ed4:	09 95       	icall
     ed6:	f3 cf       	rjmp	.-26     	; 0xebe <TwoWire::write(unsigned char const*, unsigned int)+0x1c>
     ed8:	c8 01       	movw	r24, r16
     eda:	df 91       	pop	r29
     edc:	cf 91       	pop	r28
     ede:	1f 91       	pop	r17
     ee0:	0f 91       	pop	r16
     ee2:	ff 90       	pop	r15
     ee4:	ef 90       	pop	r14
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src/Wire.cpp:276
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  /* Check if buffer is full */
  if (txBufferLength >= TWI_BUFFER_SIZE)
     ee6:	df 90       	pop	r13
     ee8:	cf 90       	pop	r12
     eea:	08 95       	ret

00000eec <TwoWire::write(unsigned char)>:
     eec:	20 91 d0 28 	lds	r18, 0x28D0	; 0x8028d0 <TwoWire::txBufferLength>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles\api/Print.h:39
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
     ef0:	20 34       	cpi	r18, 0x40	; 64
     ef2:	40 f0       	brcs	.+16     	; 0xf04 <TwoWire::write(unsigned char)+0x18>
_ZN5Print13setWriteErrorEi():
     ef4:	21 e0       	ldi	r18, 0x01	; 1
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src/Wire.cpp:279
  {
    setWriteError();
    return 0;
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	fc 01       	movw	r30, r24
     efa:	22 83       	std	Z+2, r18	; 0x02
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src/Wire.cpp:283
  }

  /* Put byte in txBuffer */
  txBuffer[txBufferIndex] = data;
     efc:	33 83       	std	Z+3, r19	; 0x03
write():
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	08 95       	ret
     f04:	80 91 d1 28 	lds	r24, 0x28D1	; 0x8028d1 <TwoWire::txBufferIndex>
     f08:	e8 2f       	mov	r30, r24
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src/Wire.cpp:284
  txBufferIndex++;
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	e5 5c       	subi	r30, 0xC5	; 197
     f0e:	f7 4d       	sbci	r31, 0xD7	; 215
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src/Wire.cpp:287

  /* Update buffer length */
  txBufferLength = txBufferIndex;
     f10:	60 83       	st	Z, r22
     f12:	8f 5f       	subi	r24, 0xFF	; 255
     f14:	80 93 d1 28 	sts	0x28D1, r24	; 0x8028d1 <TwoWire::txBufferIndex>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src/Wire.cpp:290

  return 1;
}
     f18:	80 93 d0 28 	sts	0x28D0, r24	; 0x8028d0 <TwoWire::txBufferLength>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:253
	expanderWrite(value);
	pulseEnable(value);
}

void LiquidCrystal_I2C::expanderWrite(uint8_t _data){                                        
	Wire.beginTransmission(_Addr);
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src/Wire.cpp:223
void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
  // set address of targeted slave
  txAddress = address;
     f20:	08 95       	ret

00000f22 <LiquidCrystal_I2C::expanderWrite(unsigned char)>:
expanderWrite():
     f22:	cf 93       	push	r28
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src/Wire.cpp:225
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     f24:	fc 01       	movw	r30, r24
     f26:	c4 81       	ldd	r28, Z+4	; 0x04
beginTransmission():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src/Wire.cpp:226
  txBufferLength = 0;
     f28:	c0 93 3a 28 	sts	0x283A, r28	; 0x80283a <TwoWire::txAddress>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:254
	printIIC((int)(_data) | _backlightval);
     f2c:	10 92 d1 28 	sts	0x28D1, r1	; 0x8028d1 <TwoWire::txBufferIndex>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src/Wire.h:94
    void onRequest(void (*)(void));

    inline size_t write(unsigned long data) { return write((uint8_t)data); }
    inline size_t write(long data) { return write((uint8_t)data); }
    inline size_t write(unsigned int data) { return write((uint8_t)data); }
    inline size_t write(int data) { return write((uint8_t)data); }
     f30:	10 92 d0 28 	sts	0x28D0, r1	; 0x8028d0 <TwoWire::txBufferLength>
expanderWrite():
     f34:	83 85       	ldd	r24, Z+11	; 0x0b
     f36:	68 2b       	or	r22, r24
write():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src\utility/twi.c:311
                            uint8_t* write_data,
                            uint8_t bytes_to_write,
                            uint8_t bytes_to_read,
                            uint8_t send_stop)
{
  if (twi_mode != TWI_MODE_MASTER)
     f38:	85 e8       	ldi	r24, 0x85	; 133
     f3a:	99 e2       	ldi	r25, 0x29	; 41
     f3c:	d7 df       	rcall	.-82     	; 0xeec <TwoWire::write(unsigned char)>
TWI_MasterWriteRead():
     f3e:	80 91 cf 28 	lds	r24, 0x28CF	; 0x8028cf <twi_mode>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src\utility/twi.c:315
    return false;

  /*Initiate transaction if bus is ready. */
  if (master_trans_status == TWIM_STATUS_READY)
     f42:	81 30       	cpi	r24, 0x01	; 1
     f44:	09 f0       	breq	.+2      	; 0xf48 <LiquidCrystal_I2C::expanderWrite(unsigned char)+0x26>
     f46:	4b c0       	rjmp	.+150    	; 0xfde <LiquidCrystal_I2C::expanderWrite(unsigned char)+0xbc>
     f48:	90 91 cc 28 	lds	r25, 0x28CC	; 0x8028cc <master_trans_status>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src/Wire.cpp:250
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(bool sendStop)
{
  // transmit buffer (blocking)
  uint8_t status = TWI_MasterWrite(txAddress, txBuffer, txBufferLength, sendStop);
     f4c:	91 11       	cpse	r25, r1
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src\utility/twi.c:317
  {
    master_trans_status = TWIM_STATUS_BUSY;
     f4e:	47 c0       	rjmp	.+142    	; 0xfde <LiquidCrystal_I2C::expanderWrite(unsigned char)+0xbc>
endTransmission():
     f50:	90 91 d0 28 	lds	r25, 0x28D0	; 0x8028d0 <TwoWire::txBufferLength>
TWI_MasterWriteRead():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src\utility/twi.c:318
    master_result = TWIM_RESULT_UNKNOWN;
     f54:	80 93 cc 28 	sts	0x28CC, r24	; 0x8028cc <master_trans_status>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src\utility/twi.c:320

    master_writeData = write_data;
     f58:	10 92 cb 28 	sts	0x28CB, r1	; 0x8028cb <master_result>
     f5c:	2b e3       	ldi	r18, 0x3B	; 59
     f5e:	38 e2       	ldi	r19, 0x28	; 40
     f60:	20 93 7e 28 	sts	0x287E, r18	; 0x80287e <master_writeData>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src\utility/twi.c:322

    master_bytesToWrite = bytes_to_write;
     f64:	30 93 7f 28 	sts	0x287F, r19	; 0x80287f <master_writeData+0x1>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src\utility/twi.c:323
    master_bytesToRead = bytes_to_read;
     f68:	90 93 80 28 	sts	0x2880, r25	; 0x802880 <master_bytesToWrite>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src\utility/twi.c:324
    master_bytesWritten = 0;
     f6c:	10 92 82 28 	sts	0x2882, r1	; 0x802882 <master_bytesToRead>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src\utility/twi.c:325
    master_bytesRead = 0;
     f70:	10 92 cd 28 	sts	0x28CD, r1	; 0x8028cd <master_bytesWritten>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src\utility/twi.c:326
    master_sendStop = send_stop;
     f74:	10 92 ce 28 	sts	0x28CE, r1	; 0x8028ce <master_bytesRead>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src\utility/twi.c:327
    master_slaveAddress = slave_address << 1;
     f78:	80 93 81 28 	sts	0x2881, r24	; 0x802881 <master_sendStop>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src\utility/twi.c:353
      TWI0.MADDR = readAddress;
    }

    else if (master_bytesToWrite == 0 && master_bytesToRead == 0)
    {
      twi_mode = TWI_MODE_MASTER_TRANSMIT;
     f7c:	cc 0f       	add	r28, r28
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src\utility/twi.c:346
    /* If read command, send the START condition + Address +
     * 'R/_W = 1'
     */
    else if (master_bytesToRead > 0)
    {
      twi_mode = TWI_MODE_MASTER_RECEIVE;
     f7e:	c0 93 7d 28 	sts	0x287D, r28	; 0x80287d <master_slaveAddress>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src\utility/twi.c:334
  trigger_action:

    /* If write command, send the START condition + Address +
     * 'R/_W = 0'
     */
    if (master_bytesToWrite > 0)
     f82:	93 e0       	ldi	r25, 0x03	; 3
     f84:	24 e0       	ldi	r18, 0x04	; 4
     f86:	80 91 80 28 	lds	r24, 0x2880	; 0x802880 <master_bytesToWrite>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src\utility/twi.c:353
      TWI0.MADDR = readAddress;
    }

    else if (master_bytesToWrite == 0 && master_bytesToRead == 0)
    {
      twi_mode = TWI_MODE_MASTER_TRANSMIT;
     f8a:	88 23       	and	r24, r24
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src\utility/twi.c:354
      uint8_t writeAddress = ADD_WRITE_BIT(master_slaveAddress);
     f8c:	31 f0       	breq	.+12     	; 0xf9a <LiquidCrystal_I2C::expanderWrite(unsigned char)+0x78>
     f8e:	90 93 cf 28 	sts	0x28CF, r25	; 0x8028cf <twi_mode>
     f92:	80 91 7d 28 	lds	r24, 0x287D	; 0x80287d <master_slaveAddress>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src\utility/twi.c:344
    }

    /* If read command, send the START condition + Address +
     * 'R/_W = 1'
     */
    else if (master_bytesToRead > 0)
     f96:	8e 7f       	andi	r24, 0xFE	; 254
     f98:	09 c0       	rjmp	.+18     	; 0xfac <LiquidCrystal_I2C::expanderWrite(unsigned char)+0x8a>
     f9a:	80 91 82 28 	lds	r24, 0x2882	; 0x802882 <master_bytesToRead>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src\utility/twi.c:346
    {
      twi_mode = TWI_MODE_MASTER_RECEIVE;
     f9e:	88 23       	and	r24, r24
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src\utility/twi.c:347
      uint8_t readAddress = ADD_READ_BIT(master_slaveAddress);
     fa0:	41 f0       	breq	.+16     	; 0xfb2 <LiquidCrystal_I2C::expanderWrite(unsigned char)+0x90>
     fa2:	20 93 cf 28 	sts	0x28CF, r18	; 0x8028cf <twi_mode>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src\utility/twi.c:355

    else if (master_bytesToWrite == 0 && master_bytesToRead == 0)
    {
      twi_mode = TWI_MODE_MASTER_TRANSMIT;
      uint8_t writeAddress = ADD_WRITE_BIT(master_slaveAddress);
      TWI0.MADDR = writeAddress;
     fa6:	80 91 7d 28 	lds	r24, 0x287D	; 0x80287d <master_slaveAddress>
     faa:	81 60       	ori	r24, 0x01	; 1
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src\utility/twi.c:351
      twi_mode = TWI_MODE_MASTER_RECEIVE;
      uint8_t readAddress = ADD_READ_BIT(master_slaveAddress);
      TWI0.MADDR = readAddress;
    }

    else if (master_bytesToWrite == 0 && master_bytesToRead == 0)
     fac:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
     fb0:	08 c0       	rjmp	.+16     	; 0xfc2 <LiquidCrystal_I2C::expanderWrite(unsigned char)+0xa0>
     fb2:	80 91 80 28 	lds	r24, 0x2880	; 0x802880 <master_bytesToWrite>
     fb6:	81 11       	cpse	r24, r1
     fb8:	04 c0       	rjmp	.+8      	; 0xfc2 <LiquidCrystal_I2C::expanderWrite(unsigned char)+0xa0>
     fba:	80 91 82 28 	lds	r24, 0x2882	; 0x802882 <master_bytesToRead>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src\utility/twi.c:359
      uint8_t writeAddress = ADD_WRITE_BIT(master_slaveAddress);
      TWI0.MADDR = writeAddress;
    }

    /* Arduino requires blocking function */
    while (master_result == TWIM_RESULT_UNKNOWN)
     fbe:	88 23       	and	r24, r24
     fc0:	31 f3       	breq	.-52     	; 0xf8e <LiquidCrystal_I2C::expanderWrite(unsigned char)+0x6c>
     fc2:	80 91 cb 28 	lds	r24, 0x28CB	; 0x8028cb <master_result>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src\utility/twi.c:364
    {
    }

    // in case of arbitration lost, retry sending
    if (master_result == TWIM_RESULT_ARBITRATION_LOST)
     fc6:	88 23       	and	r24, r24
     fc8:	e1 f3       	breq	.-8      	; 0xfc2 <LiquidCrystal_I2C::expanderWrite(unsigned char)+0xa0>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src\utility/twi.c:370
    {
      goto trigger_action;
    }

    uint8_t ret = 0;
    if (master_bytesToRead > 0)
     fca:	80 91 cb 28 	lds	r24, 0x28CB	; 0x8028cb <master_result>
     fce:	83 30       	cpi	r24, 0x03	; 3
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src\utility/twi.c:373
    {
      // return bytes really read
      ret = master_bytesRead;
     fd0:	d1 f2       	breq	.-76     	; 0xf86 <LiquidCrystal_I2C::expanderWrite(unsigned char)+0x64>
     fd2:	80 91 82 28 	lds	r24, 0x2882	; 0x802882 <master_bytesToRead>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src/Wire.cpp:253

  // reset tx buffer iterator vars
  txBufferIndex = 0;
     fd6:	88 23       	and	r24, r24
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src/Wire.cpp:254
  txBufferLength = 0;
     fd8:	41 f0       	breq	.+16     	; 0xfea <LiquidCrystal_I2C::expanderWrite(unsigned char)+0xc8>
     fda:	80 91 ce 28 	lds	r24, 0x28CE	; 0x8028ce <master_bytesRead>
endTransmission():
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\LiquidCrystal_I2C/LiquidCrystal_I2C.cpp:256
	Wire.endTransmission();   
}
     fde:	10 92 d1 28 	sts	0x28D1, r1	; 0x8028d1 <TwoWire::txBufferIndex>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\Wire\src\utility/twi.c:378
    }
    else
    {
      // return 0 if success, 1 otherwise
      ret = (master_result == TWIM_RESULT_OK ? 0 : 1);
     fe2:	10 92 d0 28 	sts	0x28D0, r1	; 0x8028d0 <TwoWire::txBufferLength>
expanderWrite():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles\api/print.h:88
    size_t println(void);

    int16_t printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));
    int16_t printf(const __FlashStringHelper *format, ...);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     fe6:	cf 91       	pop	r28
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles\api/print.h:58
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     fe8:	08 95       	ret
TWI_MasterWriteRead():
     fea:	80 91 cb 28 	lds	r24, 0x28CB	; 0x8028cb <master_result>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:104
bool OneButton::isLongPressed(){
  return _isLongPressed;
}

void OneButton::tick(void)
{
     fee:	f7 cf       	rjmp	.-18     	; 0xfde <LiquidCrystal_I2C::expanderWrite(unsigned char)+0xbc>

00000ff0 <Print::flush()>:
flush():
     ff0:	08 95       	ret

00000ff2 <Print::availableForWrite()>:
availableForWrite():
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	80 e0       	ldi	r24, 0x00	; 0
     ff6:	08 95       	ret

00000ff8 <OneButton::tick()>:
tick():
     ff8:	cf 92       	push	r12
     ffa:	df 92       	push	r13
     ffc:	ef 92       	push	r14
     ffe:	ff 92       	push	r15
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:106
  // Detect the input information 
  int buttonLevel = digitalRead(_pin); // current button signal.
    1000:	0f 93       	push	r16
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:230
}

uint8_t digitalRead(uint8_t pin)
{
  /* Get bit mask and check valid pin */
  uint8_t bit_mask = digitalPinToBitMask(pin);
    1002:	1f 93       	push	r17
    1004:	cf 93       	push	r28
    1006:	df 93       	push	r29
    1008:	ec 01       	movw	r28, r24
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:106
    100a:	88 81       	ld	r24, Y
digitalRead():
    100c:	8b 31       	cpi	r24, 0x1B	; 27
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:107
  unsigned long now = millis(); // current (relative) time in msecs.
    100e:	f8 f4       	brcc	.+62     	; 0x104e <OneButton::tick()+0x56>
    1010:	99 dd       	rcall	.-1230   	; 0xb44 <digitalRead.part.3>
tick():
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:110

  // Implementation of the state machine
  if (_state == 0) { // waiting for menu pin being pressed.
    1012:	08 2f       	mov	r16, r24
    1014:	10 e0       	ldi	r17, 0x00	; 0
    1016:	0c de       	rcall	.-1000   	; 0xc30 <millis>
    1018:	29 8d       	ldd	r18, Y+25	; 0x19
    101a:	3a 8d       	ldd	r19, Y+26	; 0x1a
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:111
    if (buttonLevel == _buttonPressed) {
    101c:	21 15       	cp	r18, r1
    101e:	31 05       	cpc	r19, r1
    1020:	c1 f4       	brne	.+48     	; 0x1052 <OneButton::tick()+0x5a>
    1022:	2a 85       	ldd	r18, Y+10	; 0x0a
    1024:	3b 85       	ldd	r19, Y+11	; 0x0b
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:112
      _state = 1; // step to state 1
    1026:	20 17       	cp	r18, r16
    1028:	31 07       	cpc	r19, r17
    102a:	41 f4       	brne	.+16     	; 0x103c <OneButton::tick()+0x44>
    102c:	21 e0       	ldi	r18, 0x01	; 1
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:113
      _startTime = now; // remember starting time
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	29 8f       	std	Y+25, r18	; 0x19
    1032:	3a 8f       	std	Y+26, r19	; 0x1a
    1034:	6b 8f       	std	Y+27, r22	; 0x1b
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:166
	  _isLongPressed = true; // Keep track of long press state
	  if (_duringLongPressFunc) _duringLongPressFunc();
    } // if  

  } // if  
} // OneButton.tick()
    1036:	7c 8f       	std	Y+28, r23	; 0x1c
    1038:	8d 8f       	std	Y+29, r24	; 0x1d
    103a:	9e 8f       	std	Y+30, r25	; 0x1e
    103c:	df 91       	pop	r29
    103e:	cf 91       	pop	r28
    1040:	1f 91       	pop	r17
    1042:	0f 91       	pop	r16
    1044:	ff 90       	pop	r15
    1046:	ef 90       	pop	r14
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:232
  if (bit_mask == NOT_A_PIN)
    return LOW;
    1048:	df 90       	pop	r13
    104a:	cf 90       	pop	r12
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:116
    if (buttonLevel == _buttonPressed) {
      _state = 1; // step to state 1
      _startTime = now; // remember starting time
    } // if

  } else if (_state == 1) { // waiting for menu pin being released.
    104c:	08 95       	ret
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	e0 cf       	rjmp	.-64     	; 0x1012 <OneButton::tick()+0x1a>
    1052:	21 30       	cpi	r18, 0x01	; 1
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:118

    if ((buttonLevel == _buttonReleased) && ((unsigned long)(now - _startTime) < _debounceTicks)) {
    1054:	31 05       	cpc	r19, r1
    1056:	09 f0       	breq	.+2      	; 0x105a <OneButton::tick()+0x62>
    1058:	51 c0       	rjmp	.+162    	; 0x10fc <OneButton::tick()+0x104>
    105a:	28 85       	ldd	r18, Y+8	; 0x08
    105c:	39 85       	ldd	r19, Y+9	; 0x09
    105e:	20 17       	cp	r18, r16
    1060:	31 07       	cpc	r19, r17
    1062:	e9 f4       	brne	.+58     	; 0x109e <OneButton::tick()+0xa6>
    1064:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1066:	1c 8d       	ldd	r17, Y+28	; 0x1c
    1068:	2d 8d       	ldd	r18, Y+29	; 0x1d
    106a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    106c:	ab 01       	movw	r20, r22
    106e:	bc 01       	movw	r22, r24
    1070:	40 1b       	sub	r20, r16
    1072:	51 0b       	sbc	r21, r17
    1074:	62 0b       	sbc	r22, r18
    1076:	73 0b       	sbc	r23, r19
    1078:	8e 81       	ldd	r24, Y+6	; 0x06
    107a:	9f 81       	ldd	r25, Y+7	; 0x07
    107c:	09 2e       	mov	r0, r25
    107e:	00 0c       	add	r0, r0
    1080:	aa 0b       	sbc	r26, r26
    1082:	bb 0b       	sbc	r27, r27
    1084:	48 17       	cp	r20, r24
    1086:	59 07       	cpc	r21, r25
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:121
      // button was released to quickly so I assume some debouncing.
	  // go back to state 0 without calling a function.
      _state = 0;
    1088:	6a 07       	cpc	r22, r26
    108a:	7b 07       	cpc	r23, r27
    108c:	18 f4       	brcc	.+6      	; 0x1094 <OneButton::tick()+0x9c>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:124

    } else if (buttonLevel == _buttonReleased) {
      _state = 2; // step to state 2
    108e:	19 8e       	std	Y+25, r1	; 0x19
    1090:	1a 8e       	std	Y+26, r1	; 0x1a
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:131
    } else if ((buttonLevel == _buttonPressed) && ((unsigned long)(now - _startTime) > _pressTicks)) {
      _isLongPressed = true;  // Keep track of long press state
      if (_pressFunc) _pressFunc();
	  if (_longPressStartFunc) _longPressStartFunc();
	  if (_duringLongPressFunc) _duringLongPressFunc();
      _state = 6; // step to state 6
    1092:	d4 cf       	rjmp	.-88     	; 0x103c <OneButton::tick()+0x44>
    1094:	82 e0       	ldi	r24, 0x02	; 2
    1096:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:126
      _state = 0;

    } else if (buttonLevel == _buttonReleased) {
      _state = 2; // step to state 2

    } else if ((buttonLevel == _buttonPressed) && ((unsigned long)(now - _startTime) > _pressTicks)) {
    1098:	89 8f       	std	Y+25, r24	; 0x19
    109a:	9a 8f       	std	Y+26, r25	; 0x1a
    109c:	cf cf       	rjmp	.-98     	; 0x103c <OneButton::tick()+0x44>
    109e:	2a 85       	ldd	r18, Y+10	; 0x0a
    10a0:	3b 85       	ldd	r19, Y+11	; 0x0b
    10a2:	20 17       	cp	r18, r16
    10a4:	31 07       	cpc	r19, r17
    10a6:	51 f6       	brne	.-108    	; 0x103c <OneButton::tick()+0x44>
    10a8:	0b 8d       	ldd	r16, Y+27	; 0x1b
    10aa:	1c 8d       	ldd	r17, Y+28	; 0x1c
    10ac:	2d 8d       	ldd	r18, Y+29	; 0x1d
    10ae:	3e 8d       	ldd	r19, Y+30	; 0x1e
    10b0:	ab 01       	movw	r20, r22
    10b2:	bc 01       	movw	r22, r24
    10b4:	40 1b       	sub	r20, r16
    10b6:	51 0b       	sbc	r21, r17
    10b8:	62 0b       	sbc	r22, r18
    10ba:	73 0b       	sbc	r23, r19
    10bc:	8c 81       	ldd	r24, Y+4	; 0x04
    10be:	9d 81       	ldd	r25, Y+5	; 0x05
    10c0:	09 2e       	mov	r0, r25
    10c2:	00 0c       	add	r0, r0
    10c4:	aa 0b       	sbc	r26, r26
    10c6:	bb 0b       	sbc	r27, r27
    10c8:	84 17       	cp	r24, r20
    10ca:	95 07       	cpc	r25, r21
    10cc:	a6 07       	cpc	r26, r22
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:127
      _isLongPressed = true;  // Keep track of long press state
    10ce:	b7 07       	cpc	r27, r23
    10d0:	08 f0       	brcs	.+2      	; 0x10d4 <OneButton::tick()+0xdc>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:128
      if (_pressFunc) _pressFunc();
    10d2:	b4 cf       	rjmp	.-152    	; 0x103c <OneButton::tick()+0x44>
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	8c 87       	std	Y+12, r24	; 0x0c
    10d8:	e9 89       	ldd	r30, Y+17	; 0x11
    10da:	fa 89       	ldd	r31, Y+18	; 0x12
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:129
	  if (_longPressStartFunc) _longPressStartFunc();
    10dc:	30 97       	sbiw	r30, 0x00	; 0
    10de:	09 f0       	breq	.+2      	; 0x10e2 <OneButton::tick()+0xea>
    10e0:	09 95       	icall
    10e2:	eb 89       	ldd	r30, Y+19	; 0x13
    10e4:	fc 89       	ldd	r31, Y+20	; 0x14
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:130
	  if (_duringLongPressFunc) _duringLongPressFunc();
    10e6:	30 97       	sbiw	r30, 0x00	; 0
    10e8:	09 f0       	breq	.+2      	; 0x10ec <OneButton::tick()+0xf4>
    10ea:	09 95       	icall
    10ec:	ef 89       	ldd	r30, Y+23	; 0x17
    10ee:	f8 8d       	ldd	r31, Y+24	; 0x18
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:131
      _state = 6; // step to state 6
    10f0:	30 97       	sbiw	r30, 0x00	; 0
    10f2:	09 f0       	breq	.+2      	; 0x10f6 <OneButton::tick()+0xfe>
    10f4:	09 95       	icall
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:137
      
    } else {
      // wait. Stay in this state.
    } // if

  } else if (_state == 2) { // waiting for menu pin being pressed the second time or timeout.
    10f6:	86 e0       	ldi	r24, 0x06	; 6
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	ce cf       	rjmp	.-100    	; 0x1098 <OneButton::tick()+0xa0>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:138
    if ((unsigned long)(now - _startTime) > _clickTicks) {
    10fc:	22 30       	cpi	r18, 0x02	; 2
    10fe:	31 05       	cpc	r19, r1
    1100:	19 f5       	brne	.+70     	; 0x1148 <OneButton::tick()+0x150>
    1102:	cb 8c       	ldd	r12, Y+27	; 0x1b
    1104:	dc 8c       	ldd	r13, Y+28	; 0x1c
    1106:	ed 8c       	ldd	r14, Y+29	; 0x1d
    1108:	fe 8c       	ldd	r15, Y+30	; 0x1e
    110a:	6c 19       	sub	r22, r12
    110c:	7d 09       	sbc	r23, r13
    110e:	8e 09       	sbc	r24, r14
    1110:	9f 09       	sbc	r25, r15
    1112:	ca 80       	ldd	r12, Y+2	; 0x02
    1114:	db 80       	ldd	r13, Y+3	; 0x03
    1116:	0d 2c       	mov	r0, r13
    1118:	00 0c       	add	r0, r0
    111a:	ee 08       	sbc	r14, r14
    111c:	ff 08       	sbc	r15, r15
    111e:	c6 16       	cp	r12, r22
    1120:	d7 06       	cpc	r13, r23
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:140
      // this was only a single short click
      if (_clickFunc) _clickFunc();
    1122:	e8 06       	cpc	r14, r24
    1124:	f9 06       	cpc	r15, r25
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:157
    } // if

  } else if (_state == 6) { // waiting for menu pin being release after long press.
    if (buttonLevel == _buttonReleased) {
	  _isLongPressed = false;  // Keep track of long press state
	  if(_longPressStopFunc) _longPressStopFunc();
    1126:	38 f4       	brcc	.+14     	; 0x1136 <OneButton::tick()+0x13e>
    1128:	ed 85       	ldd	r30, Y+13	; 0x0d
    112a:	fe 85       	ldd	r31, Y+14	; 0x0e
    112c:	30 97       	sbiw	r30, 0x00	; 0
    112e:	09 f4       	brne	.+2      	; 0x1132 <OneButton::tick()+0x13a>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:143
    if ((unsigned long)(now - _startTime) > _clickTicks) {
      // this was only a single short click
      if (_clickFunc) _clickFunc();
      _state = 0; // restart.

    } else if (buttonLevel == _buttonPressed) {
    1130:	ae cf       	rjmp	.-164    	; 0x108e <OneButton::tick()+0x96>
    1132:	09 95       	icall
    1134:	ac cf       	rjmp	.-168    	; 0x108e <OneButton::tick()+0x96>
    1136:	8a 85       	ldd	r24, Y+10	; 0x0a
    1138:	9b 85       	ldd	r25, Y+11	; 0x0b
    113a:	80 17       	cp	r24, r16
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:144
      _state = 3; // step to state 3
    113c:	91 07       	cpc	r25, r17
    113e:	09 f0       	breq	.+2      	; 0x1142 <OneButton::tick()+0x14a>
    1140:	7d cf       	rjmp	.-262    	; 0x103c <OneButton::tick()+0x44>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:147
    } // if

  } else if (_state == 3) { // waiting for menu pin being released finally.
    1142:	83 e0       	ldi	r24, 0x03	; 3
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	a8 cf       	rjmp	.-176    	; 0x1098 <OneButton::tick()+0xa0>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:148
    if (buttonLevel == _buttonReleased) {
    1148:	23 30       	cpi	r18, 0x03	; 3
    114a:	31 05       	cpc	r19, r1
    114c:	49 f4       	brne	.+18     	; 0x1160 <OneButton::tick()+0x168>
    114e:	88 85       	ldd	r24, Y+8	; 0x08
    1150:	99 85       	ldd	r25, Y+9	; 0x09
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:150
      // this was a 2 click sequence.
      if (_doubleClickFunc) _doubleClickFunc();
    1152:	80 17       	cp	r24, r16
    1154:	91 07       	cpc	r25, r17
    1156:	09 f0       	breq	.+2      	; 0x115a <OneButton::tick()+0x162>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:154
      _state = 0; // restart.
    } // if

  } else if (_state == 6) { // waiting for menu pin being release after long press.
    1158:	71 cf       	rjmp	.-286    	; 0x103c <OneButton::tick()+0x44>
    115a:	ef 85       	ldd	r30, Y+15	; 0x0f
    115c:	f8 89       	ldd	r31, Y+16	; 0x10
    115e:	e6 cf       	rjmp	.-52     	; 0x112c <OneButton::tick()+0x134>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:155
    if (buttonLevel == _buttonReleased) {
    1160:	26 30       	cpi	r18, 0x06	; 6
    1162:	31 05       	cpc	r19, r1
    1164:	09 f0       	breq	.+2      	; 0x1168 <OneButton::tick()+0x170>
    1166:	6a cf       	rjmp	.-300    	; 0x103c <OneButton::tick()+0x44>
    1168:	88 85       	ldd	r24, Y+8	; 0x08
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:156
	  _isLongPressed = false;  // Keep track of long press state
    116a:	99 85       	ldd	r25, Y+9	; 0x09
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:157
	  if(_longPressStopFunc) _longPressStopFunc();
    116c:	80 17       	cp	r24, r16
    116e:	91 07       	cpc	r25, r17
    1170:	21 f4       	brne	.+8      	; 0x117a <OneButton::tick()+0x182>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:161
      _state = 0; // restart.
    } else {
	  // button is being long pressed
	  _isLongPressed = true; // Keep track of long press state
    1172:	1c 86       	std	Y+12, r1	; 0x0c
    1174:	ed 89       	ldd	r30, Y+21	; 0x15
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:162
	  if (_duringLongPressFunc) _duringLongPressFunc();
    1176:	fe 89       	ldd	r31, Y+22	; 0x16
    1178:	d9 cf       	rjmp	.-78     	; 0x112c <OneButton::tick()+0x134>
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	8c 87       	std	Y+12, r24	; 0x0c
    117e:	ef 89       	ldd	r30, Y+23	; 0x17
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:166
    } // if  

  } // if  
} // OneButton.tick()
    1180:	f8 8d       	ldd	r31, Y+24	; 0x18
    1182:	30 97       	sbiw	r30, 0x00	; 0
    1184:	09 f4       	brne	.+2      	; 0x1188 <OneButton::tick()+0x190>
    1186:	5a cf       	rjmp	.-332    	; 0x103c <OneButton::tick()+0x44>
    1188:	df 91       	pop	r29
    118a:	cf 91       	pop	r28
    118c:	1f 91       	pop	r17
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\OneButton-master/OneButton.cpp:162
	  if(_longPressStopFunc) _longPressStopFunc();
      _state = 0; // restart.
    } else {
	  // button is being long pressed
	  _isLongPressed = true; // Keep track of long press state
	  if (_duringLongPressFunc) _duringLongPressFunc();
    118e:	0f 91       	pop	r16
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/buzzer_onoff.cpp:25
 }
 
void buzzer_off()                               //Buzzer beep 
{
    1190:	ff 90       	pop	r15
    1192:	ef 90       	pop	r14
    1194:	df 90       	pop	r13
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:59
	enabled = true;
	status = RUNNING;
	}

void Ticker::stop() {
	enabled = false;
    1196:	cf 90       	pop	r12
    1198:	09 94       	ijmp

0000119a <buzzer_off()>:
digitalWrite():
    119a:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:60
	counts = 0;
    119c:	87 e1       	ldi	r24, 0x17	; 23
    119e:	f6 db       	rcall	.-2068   	; 0x98c <digitalWrite.part.2>
stop():
    11a0:	ee ec       	ldi	r30, 0xCE	; 206
    11a2:	fa e2       	ldi	r31, 0x2A	; 42
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:61
	status = STOPPED;
    11a4:	10 82       	st	Z, r1
    11a6:	13 86       	std	Z+11, r1	; 0x0b
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/buzzer_onoff.cpp:28
  digitalWrite(buzzer, LOW);                    //---off
  buz.stop();
}
    11a8:	14 86       	std	Z+12, r1	; 0x0c
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:467
    pcalib=0;
    }           
}

void RESET_LONG() 
{ 
    11aa:	15 86       	std	Z+13, r1	; 0x0d
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:468
  if(inc_time >= 3 && chk_time == 1)                    //3 sec.
    11ac:	16 86       	std	Z+14, r1	; 0x0e
    11ae:	17 86       	std	Z+15, r1	; 0x0f
    11b0:	10 8a       	std	Z+16, r1	; 0x10
buzzer_off():
    11b2:	08 95       	ret

000011b4 <RESET_LONG()>:
RESET_LONG():
    11b4:	cf 93       	push	r28
    11b6:	80 91 2f 28 	lds	r24, 0x282F	; 0x80282f <inc_time>
    11ba:	90 91 30 28 	lds	r25, 0x2830	; 0x802830 <inc_time+0x1>
    11be:	03 97       	sbiw	r24, 0x03	; 3
    11c0:	4c f1       	brlt	.+82     	; 0x1214 <RESET_LONG()+0x60>
    11c2:	80 91 31 28 	lds	r24, 0x2831	; 0x802831 <chk_time>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:470
  {    
    if(emer_start_stop==0)                              //to stop the process again after 5 sec
    11c6:	90 91 32 28 	lds	r25, 0x2832	; 0x802832 <chk_time+0x1>
    11ca:	01 97       	sbiw	r24, 0x01	; 1
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:485
      Level_var=0; 
      Stop_cycle=1;
      Input_checks.Flow_Timer_Stop();
    } 
  }
}
    11cc:	19 f5       	brne	.+70     	; 0x1214 <RESET_LONG()+0x60>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:472
{ 
  if(inc_time >= 3 && chk_time == 1)                    //3 sec.
  {    
    if(emer_start_stop==0)                              //to stop the process again after 5 sec
    {
     Butt.Emergency_Procees_Halt();
    11ce:	c0 91 2e 28 	lds	r28, 0x282E	; 0x80282e <emer_start_stop>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:475
    }
    
    if(emer_start_stop==1)                              //to start the process again after 5 sec
    11d2:	c1 11       	cpse	r28, r1
    11d4:	02 c0       	rjmp	.+4      	; 0x11da <RESET_LONG()+0x26>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:477
    {
      buz1.buzzer_on(1000);
    11d6:	cf 91       	pop	r28
    11d8:	e0 cd       	rjmp	.-1088   	; 0xd9a <Buttonclass::Emergency_Procees_Halt() [clone .constprop.26]>
    11da:	c1 30       	cpi	r28, 0x01	; 1
    11dc:	d9 f4       	brne	.+54     	; 0x1214 <RESET_LONG()+0x60>
    11de:	68 ee       	ldi	r22, 0xE8	; 232
    11e0:	73 e0       	ldi	r23, 0x03	; 3
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:478
      Flow_Err=1;
    11e2:	80 e0       	ldi	r24, 0x00	; 0
    11e4:	90 e0       	ldi	r25, 0x00	; 0
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:479
      sec_Heater=0;
    11e6:	ae dd       	rcall	.-1188   	; 0xd44 <Buzzerclass::buzzer_on(unsigned long) [clone .constprop.93]>
    11e8:	c0 93 c6 28 	sts	0x28C6, r28	; 0x8028c6 <Flow_Err>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:480
      Level_var=0; 
    11ec:	10 92 ca 28 	sts	0x28CA, r1	; 0x8028ca <sec_Heater>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:481
      Stop_cycle=1;
    11f0:	10 92 c9 28 	sts	0x28C9, r1	; 0x8028c9 <Level_var>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:59
	enabled = true;
	status = RUNNING;
	}

void Ticker::stop() {
	enabled = false;
    11f4:	c0 93 06 28 	sts	0x2806, r28	; 0x802806 <Stop_cycle>
stop():
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:60
	counts = 0;
    11f8:	10 92 7d 2a 	sts	0x2A7D, r1	; 0x802a7d <Flow_delay>
    11fc:	10 92 88 2a 	sts	0x2A88, r1	; 0x802a88 <Flow_delay+0xb>
    1200:	10 92 89 2a 	sts	0x2A89, r1	; 0x802a89 <Flow_delay+0xc>
    1204:	10 92 8a 2a 	sts	0x2A8A, r1	; 0x802a8a <Flow_delay+0xd>
C:\Users\Siddhesh.Hadawale\Documents\Arduino\libraries\Ticker-master/Ticker.cpp:61
	status = STOPPED;
    1208:	10 92 8b 2a 	sts	0x2A8B, r1	; 0x802a8b <Flow_delay+0xe>
    120c:	10 92 8c 2a 	sts	0x2A8C, r1	; 0x802a8c <Flow_delay+0xf>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:485
      Input_checks.Flow_Timer_Stop();
    } 
  }
}
    1210:	10 92 8d 2a 	sts	0x2A8D, r1	; 0x802a8d <Flow_delay+0x10>
RESET_LONG():
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:309
   }
}
        
void longpres_Down1()//to decrease the volume by 10 rapidly
{ 
  if(screen==0)
    1214:	cf 91       	pop	r28
    1216:	08 95       	ret

00001218 <longpres_Down1()>:
longpres_Down1():
    1218:	80 91 e5 28 	lds	r24, 0x28E5	; 0x8028e5 <screen>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:311
      {
      count_inc++;
    121c:	81 11       	cpse	r24, r1
    121e:	3a c0       	rjmp	.+116    	; 0x1294 <longpres_Down1()+0x7c>
    1220:	80 91 2b 28 	lds	r24, 0x282B	; 0x80282b <count_inc>
    1224:	90 91 2c 28 	lds	r25, 0x282C	; 0x80282c <count_inc+0x1>
    1228:	01 96       	adiw	r24, 0x01	; 1
    122a:	80 93 2b 28 	sts	0x282B, r24	; 0x80282b <count_inc>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:312
      if(count_inc >= (50))
    122e:	90 93 2c 28 	sts	0x282C, r25	; 0x80282c <count_inc+0x1>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:314
      {
      VOLUME-=10;//...............................................incremented by 10
    1232:	c2 97       	sbiw	r24, 0x32	; 50
    1234:	bc f0       	brlt	.+46     	; 0x1264 <longpres_Down1()+0x4c>
    1236:	80 91 01 28 	lds	r24, 0x2801	; 0x802801 <VOLUME>
    123a:	90 91 02 28 	lds	r25, 0x2802	; 0x802802 <VOLUME+0x1>
    123e:	a0 91 03 28 	lds	r26, 0x2803	; 0x802803 <VOLUME+0x2>
    1242:	b0 91 04 28 	lds	r27, 0x2804	; 0x802804 <VOLUME+0x3>
    1246:	0a 97       	sbiw	r24, 0x0a	; 10
    1248:	a1 09       	sbc	r26, r1
    124a:	b1 09       	sbc	r27, r1
    124c:	80 93 01 28 	sts	0x2801, r24	; 0x802801 <VOLUME>
    1250:	90 93 02 28 	sts	0x2802, r25	; 0x802802 <VOLUME+0x1>
    1254:	a0 93 03 28 	sts	0x2803, r26	; 0x802803 <VOLUME+0x2>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:315
      count_inc=0; 
    1258:	b0 93 04 28 	sts	0x2804, r27	; 0x802804 <VOLUME+0x3>
    125c:	10 92 2b 28 	sts	0x282B, r1	; 0x80282b <count_inc>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:317
      }
      if( VOLUME<9)
    1260:	10 92 2c 28 	sts	0x282C, r1	; 0x80282c <count_inc+0x1>
    1264:	80 91 01 28 	lds	r24, 0x2801	; 0x802801 <VOLUME>
    1268:	90 91 02 28 	lds	r25, 0x2802	; 0x802802 <VOLUME+0x1>
    126c:	a0 91 03 28 	lds	r26, 0x2803	; 0x802803 <VOLUME+0x2>
    1270:	b0 91 04 28 	lds	r27, 0x2804	; 0x802804 <VOLUME+0x3>
    1274:	09 97       	sbiw	r24, 0x09	; 9
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:319
      {
      VOLUME=10000;          
    1276:	a1 05       	cpc	r26, r1
    1278:	b1 05       	cpc	r27, r1
    127a:	60 f4       	brcc	.+24     	; 0x1294 <longpres_Down1()+0x7c>
    127c:	80 e1       	ldi	r24, 0x10	; 16
    127e:	97 e2       	ldi	r25, 0x27	; 39
    1280:	a0 e0       	ldi	r26, 0x00	; 0
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	80 93 01 28 	sts	0x2801, r24	; 0x802801 <VOLUME>
    1288:	90 93 02 28 	sts	0x2802, r25	; 0x802802 <VOLUME+0x1>
    128c:	a0 93 03 28 	sts	0x2803, r26	; 0x802803 <VOLUME+0x2>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:324
      }
    }

//...............................................fast Decrement for pump calib.............................................//
 if((Pump_calib==1)) 
    1290:	b0 93 04 28 	sts	0x2804, r27	; 0x802804 <VOLUME+0x3>
    1294:	80 91 38 28 	lds	r24, 0x2838	; 0x802838 <Pump_calib>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:326
   { 
        if((pcalib>=3)&&(pcalib<15)&&(flip==0))
    1298:	88 23       	and	r24, r24
    129a:	09 f4       	brne	.+2      	; 0x129e <longpres_Down1()+0x86>
    129c:	73 c0       	rjmp	.+230    	; 0x1384 <longpres_Down1()+0x16c>
    129e:	80 91 d9 28 	lds	r24, 0x28D9	; 0x8028d9 <pcalib>
    12a2:	9d ef       	ldi	r25, 0xFD	; 253
    12a4:	98 0f       	add	r25, r24
    12a6:	9c 30       	cpi	r25, 0x0C	; 12
    12a8:	08 f0       	brcs	.+2      	; 0x12ac <longpres_Down1()+0x94>
    12aa:	40 c0       	rjmp	.+128    	; 0x132c <longpres_Down1()+0x114>
    12ac:	80 91 2d 28 	lds	r24, 0x282D	; 0x80282d <flip>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:329
        {

         count_inc++;
    12b0:	81 11       	cpse	r24, r1
    12b2:	68 c0       	rjmp	.+208    	; 0x1384 <longpres_Down1()+0x16c>
    12b4:	80 91 2b 28 	lds	r24, 0x282B	; 0x80282b <count_inc>
    12b8:	90 91 2c 28 	lds	r25, 0x282C	; 0x80282c <count_inc+0x1>
    12bc:	01 96       	adiw	r24, 0x01	; 1
    12be:	80 93 2b 28 	sts	0x282B, r24	; 0x80282b <count_inc>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:330
         if(count_inc==(80))
    12c2:	90 93 2c 28 	sts	0x282C, r25	; 0x80282c <count_inc+0x1>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:332
         {
         Point_dispense-=10;
    12c6:	80 35       	cpi	r24, 0x50	; 80
    12c8:	91 05       	cpc	r25, r1
    12ca:	b9 f4       	brne	.+46     	; 0x12fa <longpres_Down1()+0xe2>
    12cc:	80 91 07 28 	lds	r24, 0x2807	; 0x802807 <Point_dispense>
    12d0:	90 91 08 28 	lds	r25, 0x2808	; 0x802808 <Point_dispense+0x1>
    12d4:	a0 91 09 28 	lds	r26, 0x2809	; 0x802809 <Point_dispense+0x2>
    12d8:	b0 91 0a 28 	lds	r27, 0x280A	; 0x80280a <Point_dispense+0x3>
    12dc:	0a 97       	sbiw	r24, 0x0a	; 10
    12de:	a1 09       	sbc	r26, r1
    12e0:	b1 09       	sbc	r27, r1
    12e2:	80 93 07 28 	sts	0x2807, r24	; 0x802807 <Point_dispense>
    12e6:	90 93 08 28 	sts	0x2808, r25	; 0x802808 <Point_dispense+0x1>
    12ea:	a0 93 09 28 	sts	0x2809, r26	; 0x802809 <Point_dispense+0x2>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:333
         count_inc=0; 
    12ee:	b0 93 0a 28 	sts	0x280A, r27	; 0x80280a <Point_dispense+0x3>
    12f2:	10 92 2b 28 	sts	0x282B, r1	; 0x80282b <count_inc>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:335
         }
         if(Point_dispense<=10)
    12f6:	10 92 2c 28 	sts	0x282C, r1	; 0x80282c <count_inc+0x1>
    12fa:	80 91 07 28 	lds	r24, 0x2807	; 0x802807 <Point_dispense>
    12fe:	90 91 08 28 	lds	r25, 0x2808	; 0x802808 <Point_dispense+0x1>
    1302:	a0 91 09 28 	lds	r26, 0x2809	; 0x802809 <Point_dispense+0x2>
    1306:	b0 91 0a 28 	lds	r27, 0x280A	; 0x80280a <Point_dispense+0x3>
    130a:	0b 97       	sbiw	r24, 0x0b	; 11
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:337
         {
         Point_dispense=1000;          
    130c:	a1 05       	cpc	r26, r1
    130e:	b1 05       	cpc	r27, r1
    1310:	c8 f5       	brcc	.+114    	; 0x1384 <longpres_Down1()+0x16c>
    1312:	88 ee       	ldi	r24, 0xE8	; 232
    1314:	93 e0       	ldi	r25, 0x03	; 3
    1316:	a0 e0       	ldi	r26, 0x00	; 0
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	80 93 07 28 	sts	0x2807, r24	; 0x802807 <Point_dispense>
    131e:	90 93 08 28 	sts	0x2808, r25	; 0x802808 <Point_dispense+0x1>
    1322:	a0 93 09 28 	sts	0x2809, r26	; 0x802809 <Point_dispense+0x2>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:340
         }   
        }
        if((pcalib==15) &&(flip==1))
    1326:	b0 93 0a 28 	sts	0x280A, r27	; 0x80280a <Point_dispense+0x3>
    132a:	08 95       	ret
    132c:	8f 30       	cpi	r24, 0x0F	; 15
    132e:	51 f5       	brne	.+84     	; 0x1384 <longpres_Down1()+0x16c>
    1330:	80 91 2d 28 	lds	r24, 0x282D	; 0x80282d <flip>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:342
        {
           count_inc++;
    1334:	88 23       	and	r24, r24
    1336:	31 f1       	breq	.+76     	; 0x1384 <longpres_Down1()+0x16c>
    1338:	80 91 2b 28 	lds	r24, 0x282B	; 0x80282b <count_inc>
    133c:	90 91 2c 28 	lds	r25, 0x282C	; 0x80282c <count_inc+0x1>
    1340:	01 96       	adiw	r24, 0x01	; 1
    1342:	80 93 2b 28 	sts	0x282B, r24	; 0x80282b <count_inc>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:343
           if(count_inc==(80))
    1346:	90 93 2c 28 	sts	0x282C, r25	; 0x80282c <count_inc+0x1>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:345
           {
           Pump_error-=1;
    134a:	80 35       	cpi	r24, 0x50	; 80
    134c:	91 05       	cpc	r25, r1
    134e:	69 f4       	brne	.+26     	; 0x136a <longpres_Down1()+0x152>
    1350:	80 91 d5 28 	lds	r24, 0x28D5	; 0x8028d5 <Pump_error>
    1354:	90 91 d6 28 	lds	r25, 0x28D6	; 0x8028d6 <Pump_error+0x1>
    1358:	01 97       	sbiw	r24, 0x01	; 1
    135a:	80 93 d5 28 	sts	0x28D5, r24	; 0x8028d5 <Pump_error>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:346
           count_inc=0; 
    135e:	90 93 d6 28 	sts	0x28D6, r25	; 0x8028d6 <Pump_error+0x1>
    1362:	10 92 2b 28 	sts	0x282B, r1	; 0x80282b <count_inc>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:348
           }
           if(Pump_error<=-300)
    1366:	10 92 2c 28 	sts	0x282C, r1	; 0x80282c <count_inc+0x1>
    136a:	80 91 d5 28 	lds	r24, 0x28D5	; 0x8028d5 <Pump_error>
    136e:	90 91 d6 28 	lds	r25, 0x28D6	; 0x8028d6 <Pump_error+0x1>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:350
           {
           Pump_error=300;          
    1372:	85 3d       	cpi	r24, 0xD5	; 213
    1374:	9e 4f       	sbci	r25, 0xFE	; 254
    1376:	34 f4       	brge	.+12     	; 0x1384 <longpres_Down1()+0x16c>
    1378:	8c e2       	ldi	r24, 0x2C	; 44
    137a:	91 e0       	ldi	r25, 0x01	; 1
    137c:	80 93 d5 28 	sts	0x28D5, r24	; 0x8028d5 <Pump_error>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:261
  }
} 
    
void longpres_Up1()   //to increase the volume by 10 rapidly
{
  if(screen==0)
    1380:	90 93 d6 28 	sts	0x28D6, r25	; 0x8028d6 <Pump_error+0x1>
    1384:	08 95       	ret

00001386 <longpres_Up1()>:
longpres_Up1():
    1386:	80 91 e5 28 	lds	r24, 0x28E5	; 0x8028e5 <screen>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:263
   {
  count_inc++;
    138a:	81 11       	cpse	r24, r1
    138c:	3b c0       	rjmp	.+118    	; 0x1404 <longpres_Up1()+0x7e>
    138e:	80 91 2b 28 	lds	r24, 0x282B	; 0x80282b <count_inc>
    1392:	90 91 2c 28 	lds	r25, 0x282C	; 0x80282c <count_inc+0x1>
    1396:	01 96       	adiw	r24, 0x01	; 1
    1398:	80 93 2b 28 	sts	0x282B, r24	; 0x80282b <count_inc>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:264
   if(count_inc >=(50))
    139c:	90 93 2c 28 	sts	0x282C, r25	; 0x80282c <count_inc+0x1>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:266
    {
    VOLUME+=10;
    13a0:	c2 97       	sbiw	r24, 0x32	; 50
    13a2:	bc f0       	brlt	.+46     	; 0x13d2 <longpres_Up1()+0x4c>
    13a4:	80 91 01 28 	lds	r24, 0x2801	; 0x802801 <VOLUME>
    13a8:	90 91 02 28 	lds	r25, 0x2802	; 0x802802 <VOLUME+0x1>
    13ac:	a0 91 03 28 	lds	r26, 0x2803	; 0x802803 <VOLUME+0x2>
    13b0:	b0 91 04 28 	lds	r27, 0x2804	; 0x802804 <VOLUME+0x3>
    13b4:	0a 96       	adiw	r24, 0x0a	; 10
    13b6:	a1 1d       	adc	r26, r1
    13b8:	b1 1d       	adc	r27, r1
    13ba:	80 93 01 28 	sts	0x2801, r24	; 0x802801 <VOLUME>
    13be:	90 93 02 28 	sts	0x2802, r25	; 0x802802 <VOLUME+0x1>
    13c2:	a0 93 03 28 	sts	0x2803, r26	; 0x802803 <VOLUME+0x2>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:267
    count_inc=0; 
    13c6:	b0 93 04 28 	sts	0x2804, r27	; 0x802804 <VOLUME+0x3>
    13ca:	10 92 2b 28 	sts	0x282B, r1	; 0x80282b <count_inc>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:269
    }
   if(VOLUME>10000)
    13ce:	10 92 2c 28 	sts	0x282C, r1	; 0x80282c <count_inc+0x1>
    13d2:	80 91 01 28 	lds	r24, 0x2801	; 0x802801 <VOLUME>
    13d6:	90 91 02 28 	lds	r25, 0x2802	; 0x802802 <VOLUME+0x1>
    13da:	a0 91 03 28 	lds	r26, 0x2803	; 0x802803 <VOLUME+0x2>
    13de:	b0 91 04 28 	lds	r27, 0x2804	; 0x802804 <VOLUME+0x3>
    13e2:	81 31       	cpi	r24, 0x11	; 17
    13e4:	97 42       	sbci	r25, 0x27	; 39
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:271
    {
    VOLUME=10;          
    13e6:	a1 05       	cpc	r26, r1
    13e8:	b1 05       	cpc	r27, r1
    13ea:	60 f0       	brcs	.+24     	; 0x1404 <longpres_Up1()+0x7e>
    13ec:	8a e0       	ldi	r24, 0x0A	; 10
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	a0 e0       	ldi	r26, 0x00	; 0
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	80 93 01 28 	sts	0x2801, r24	; 0x802801 <VOLUME>
    13f8:	90 93 02 28 	sts	0x2802, r25	; 0x802802 <VOLUME+0x1>
    13fc:	a0 93 03 28 	sts	0x2803, r26	; 0x802803 <VOLUME+0x2>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:275
    }
   }
//...............................................fast increment for pump calib......................................................................................//
 if((Pump_calib==1))
    1400:	b0 93 04 28 	sts	0x2804, r27	; 0x802804 <VOLUME+0x3>
    1404:	80 91 38 28 	lds	r24, 0x2838	; 0x802838 <Pump_calib>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:277
   { 
        if((pcalib>=3)&&(pcalib<15)&&(flip==0))
    1408:	88 23       	and	r24, r24
    140a:	09 f4       	brne	.+2      	; 0x140e <longpres_Up1()+0x88>
    140c:	74 c0       	rjmp	.+232    	; 0x14f6 <longpres_Up1()+0x170>
    140e:	80 91 d9 28 	lds	r24, 0x28D9	; 0x8028d9 <pcalib>
    1412:	9d ef       	ldi	r25, 0xFD	; 253
    1414:	98 0f       	add	r25, r24
    1416:	9c 30       	cpi	r25, 0x0C	; 12
    1418:	08 f0       	brcs	.+2      	; 0x141c <longpres_Up1()+0x96>
    141a:	41 c0       	rjmp	.+130    	; 0x149e <longpres_Up1()+0x118>
    141c:	80 91 2d 28 	lds	r24, 0x282D	; 0x80282d <flip>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:280
        {

         count_inc++;
    1420:	81 11       	cpse	r24, r1
    1422:	69 c0       	rjmp	.+210    	; 0x14f6 <longpres_Up1()+0x170>
    1424:	80 91 2b 28 	lds	r24, 0x282B	; 0x80282b <count_inc>
    1428:	90 91 2c 28 	lds	r25, 0x282C	; 0x80282c <count_inc+0x1>
    142c:	01 96       	adiw	r24, 0x01	; 1
    142e:	80 93 2b 28 	sts	0x282B, r24	; 0x80282b <count_inc>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:281
         if(count_inc==(80))
    1432:	90 93 2c 28 	sts	0x282C, r25	; 0x80282c <count_inc+0x1>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:283
         {
         Point_dispense+=10;
    1436:	80 35       	cpi	r24, 0x50	; 80
    1438:	91 05       	cpc	r25, r1
    143a:	b9 f4       	brne	.+46     	; 0x146a <longpres_Up1()+0xe4>
    143c:	80 91 07 28 	lds	r24, 0x2807	; 0x802807 <Point_dispense>
    1440:	90 91 08 28 	lds	r25, 0x2808	; 0x802808 <Point_dispense+0x1>
    1444:	a0 91 09 28 	lds	r26, 0x2809	; 0x802809 <Point_dispense+0x2>
    1448:	b0 91 0a 28 	lds	r27, 0x280A	; 0x80280a <Point_dispense+0x3>
    144c:	0a 96       	adiw	r24, 0x0a	; 10
    144e:	a1 1d       	adc	r26, r1
    1450:	b1 1d       	adc	r27, r1
    1452:	80 93 07 28 	sts	0x2807, r24	; 0x802807 <Point_dispense>
    1456:	90 93 08 28 	sts	0x2808, r25	; 0x802808 <Point_dispense+0x1>
    145a:	a0 93 09 28 	sts	0x2809, r26	; 0x802809 <Point_dispense+0x2>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:284
         count_inc=0; 
    145e:	b0 93 0a 28 	sts	0x280A, r27	; 0x80280a <Point_dispense+0x3>
    1462:	10 92 2b 28 	sts	0x282B, r1	; 0x80282b <count_inc>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:286
         }
         if(Point_dispense>=1000)
    1466:	10 92 2c 28 	sts	0x282C, r1	; 0x80282c <count_inc+0x1>
    146a:	80 91 07 28 	lds	r24, 0x2807	; 0x802807 <Point_dispense>
    146e:	90 91 08 28 	lds	r25, 0x2808	; 0x802808 <Point_dispense+0x1>
    1472:	a0 91 09 28 	lds	r26, 0x2809	; 0x802809 <Point_dispense+0x2>
    1476:	b0 91 0a 28 	lds	r27, 0x280A	; 0x80280a <Point_dispense+0x3>
    147a:	88 3e       	cpi	r24, 0xE8	; 232
    147c:	93 40       	sbci	r25, 0x03	; 3
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:288
         {
         Point_dispense=10;          
    147e:	a1 05       	cpc	r26, r1
    1480:	b1 05       	cpc	r27, r1
    1482:	c8 f1       	brcs	.+114    	; 0x14f6 <longpres_Up1()+0x170>
    1484:	8a e0       	ldi	r24, 0x0A	; 10
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	a0 e0       	ldi	r26, 0x00	; 0
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	80 93 07 28 	sts	0x2807, r24	; 0x802807 <Point_dispense>
    1490:	90 93 08 28 	sts	0x2808, r25	; 0x802808 <Point_dispense+0x1>
    1494:	a0 93 09 28 	sts	0x2809, r26	; 0x802809 <Point_dispense+0x2>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:291
         }   
        }
        if((pcalib==15) &&(flip==1))
    1498:	b0 93 0a 28 	sts	0x280A, r27	; 0x80280a <Point_dispense+0x3>
    149c:	08 95       	ret
    149e:	8f 30       	cpi	r24, 0x0F	; 15
    14a0:	51 f5       	brne	.+84     	; 0x14f6 <longpres_Up1()+0x170>
    14a2:	80 91 2d 28 	lds	r24, 0x282D	; 0x80282d <flip>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:293
        {
           count_inc++;
    14a6:	88 23       	and	r24, r24
    14a8:	31 f1       	breq	.+76     	; 0x14f6 <longpres_Up1()+0x170>
    14aa:	80 91 2b 28 	lds	r24, 0x282B	; 0x80282b <count_inc>
    14ae:	90 91 2c 28 	lds	r25, 0x282C	; 0x80282c <count_inc+0x1>
    14b2:	01 96       	adiw	r24, 0x01	; 1
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:294
           if(count_inc==(80))
    14b4:	80 93 2b 28 	sts	0x282B, r24	; 0x80282b <count_inc>
    14b8:	90 93 2c 28 	sts	0x282C, r25	; 0x80282c <count_inc+0x1>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:296
           {
           Pump_error+=1;
    14bc:	80 35       	cpi	r24, 0x50	; 80
    14be:	91 05       	cpc	r25, r1
    14c0:	69 f4       	brne	.+26     	; 0x14dc <longpres_Up1()+0x156>
    14c2:	80 91 d5 28 	lds	r24, 0x28D5	; 0x8028d5 <Pump_error>
    14c6:	90 91 d6 28 	lds	r25, 0x28D6	; 0x8028d6 <Pump_error+0x1>
    14ca:	01 96       	adiw	r24, 0x01	; 1
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:297
           count_inc=0; 
    14cc:	80 93 d5 28 	sts	0x28D5, r24	; 0x8028d5 <Pump_error>
    14d0:	90 93 d6 28 	sts	0x28D6, r25	; 0x8028d6 <Pump_error+0x1>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:299
           }
           if(Pump_error>=300)
    14d4:	10 92 2b 28 	sts	0x282B, r1	; 0x80282b <count_inc>
    14d8:	10 92 2c 28 	sts	0x282C, r1	; 0x80282c <count_inc+0x1>
    14dc:	80 91 d5 28 	lds	r24, 0x28D5	; 0x8028d5 <Pump_error>
    14e0:	90 91 d6 28 	lds	r25, 0x28D6	; 0x8028d6 <Pump_error+0x1>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:301
           {
           Pump_error=-300;          
    14e4:	8c 32       	cpi	r24, 0x2C	; 44
    14e6:	91 40       	sbci	r25, 0x01	; 1
    14e8:	34 f0       	brlt	.+12     	; 0x14f6 <longpres_Up1()+0x170>
    14ea:	84 ed       	ldi	r24, 0xD4	; 212
    14ec:	9e ef       	ldi	r25, 0xFE	; 254
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:305
           }    
        }
   }
}
    14ee:	80 93 d5 28 	sts	0x28D5, r24	; 0x8028d5 <Pump_error>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:157
  }//..................................................................end of screen 0.................................................................//
}  

 void singleDownclick1()
 { 
       if(screen==1)
    14f2:	90 93 d6 28 	sts	0x28D6, r25	; 0x8028d6 <Pump_error+0x1>
    14f6:	08 95       	ret

000014f8 <singleDownclick1()>:
singleDownclick1():
    14f8:	cf 93       	push	r28
    14fa:	c0 91 e5 28 	lds	r28, 0x28E5	; 0x8028e5 <screen>
    14fe:	c1 30       	cpi	r28, 0x01	; 1
    1500:	99 f4       	brne	.+38     	; 0x1528 <singleDownclick1()+0x30>
digitalWrite():
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:160
        {
       digitalWrite(Green_LED,HIGH);
       if(back==0)//menu traverse
    1502:	61 e0       	ldi	r22, 0x01	; 1
    1504:	89 e1       	ldi	r24, 0x19	; 25
    1506:	42 da       	rcall	.-2940   	; 0x98c <digitalWrite.part.2>
singleDownclick1():
    1508:	80 91 39 28 	lds	r24, 0x2839	; 0x802839 <back>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:162
        {          
          menu_select==7? menu_select=0: menu_select++; 
    150c:	81 11       	cpse	r24, r1
    150e:	5e c0       	rjmp	.+188    	; 0x15cc <singleDownclick1()+0xd4>
    1510:	80 91 e3 28 	lds	r24, 0x28E3	; 0x8028e3 <menu_select>
    1514:	90 91 e4 28 	lds	r25, 0x28E4	; 0x8028e4 <menu_select+0x1>
    1518:	87 30       	cpi	r24, 0x07	; 7
    151a:	91 05       	cpc	r25, r1
    151c:	09 f0       	breq	.+2      	; 0x1520 <singleDownclick1()+0x28>
    151e:	50 c0       	rjmp	.+160    	; 0x15c0 <singleDownclick1()+0xc8>
    1520:	10 92 e3 28 	sts	0x28E3, r1	; 0x8028e3 <menu_select>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:205
      
     }   
  }
//................................................................for pump calib...........................................................................//
  }
   if((Pump_calib==1))
    1524:	10 92 e4 28 	sts	0x28E4, r1	; 0x8028e4 <menu_select+0x1>
    1528:	80 91 38 28 	lds	r24, 0x2838	; 0x802838 <Pump_calib>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:207
   { 
        if((pcalib>=3)&&(pcalib<15)&&(flip==0))
    152c:	88 23       	and	r24, r24
    152e:	29 f1       	breq	.+74     	; 0x157a <singleDownclick1()+0x82>
    1530:	80 91 d9 28 	lds	r24, 0x28D9	; 0x8028d9 <pcalib>
    1534:	9d ef       	ldi	r25, 0xFD	; 253
    1536:	98 0f       	add	r25, r24
    1538:	9c 30       	cpi	r25, 0x0C	; 12
    153a:	08 f0       	brcs	.+2      	; 0x153e <singleDownclick1()+0x46>
    153c:	aa c0       	rjmp	.+340    	; 0x1692 <singleDownclick1()+0x19a>
    153e:	80 91 2d 28 	lds	r24, 0x282D	; 0x80282d <flip>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:209
        {
          Point_dispense<=10?Point_dispense=1000:Point_dispense-=10;
    1542:	81 11       	cpse	r24, r1
    1544:	1a c0       	rjmp	.+52     	; 0x157a <singleDownclick1()+0x82>
    1546:	80 91 07 28 	lds	r24, 0x2807	; 0x802807 <Point_dispense>
    154a:	90 91 08 28 	lds	r25, 0x2808	; 0x802808 <Point_dispense+0x1>
    154e:	a0 91 09 28 	lds	r26, 0x2809	; 0x802809 <Point_dispense+0x2>
    1552:	b0 91 0a 28 	lds	r27, 0x280A	; 0x80280a <Point_dispense+0x3>
    1556:	8b 30       	cpi	r24, 0x0B	; 11
    1558:	91 05       	cpc	r25, r1
    155a:	a1 05       	cpc	r26, r1
    155c:	b1 05       	cpc	r27, r1
    155e:	08 f0       	brcs	.+2      	; 0x1562 <singleDownclick1()+0x6a>
    1560:	94 c0       	rjmp	.+296    	; 0x168a <singleDownclick1()+0x192>
    1562:	88 ee       	ldi	r24, 0xE8	; 232
    1564:	93 e0       	ldi	r25, 0x03	; 3
    1566:	a0 e0       	ldi	r26, 0x00	; 0
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	80 93 07 28 	sts	0x2807, r24	; 0x802807 <Point_dispense>
    156e:	90 93 08 28 	sts	0x2808, r25	; 0x802808 <Point_dispense+0x1>
    1572:	a0 93 09 28 	sts	0x2809, r26	; 0x802809 <Point_dispense+0x2>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:217
        {
        Pump_error<=-300? Pump_error=300: Pump_error-=1; 
        }
   }//.............................................................end of pump down..........................................................................//
   
  if(screen==0)//.................................................screen 0
    1576:	b0 93 0a 28 	sts	0x280A, r27	; 0x80280a <Point_dispense+0x3>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:219
  {
  if(vol_set==1)//................................................to dispense volume only when in screen 0
    157a:	c1 11       	cpse	r28, r1
    157c:	1f c0       	rjmp	.+62     	; 0x15bc <singleDownclick1()+0xc4>
    157e:	80 91 c8 28 	lds	r24, 0x28C8	; 0x8028c8 <vol_set>
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:221
  {
    VOLUME<11?VOLUME=10000:VOLUME-=10; //10
    1582:	81 30       	cpi	r24, 0x01	; 1
    1584:	09 f0       	breq	.+2      	; 0x1588 <singleDownclick1()+0x90>
    1586:	a2 c0       	rjmp	.+324    	; 0x16cc <singleDownclick1()+0x1d4>
    1588:	80 91 01 28 	lds	r24, 0x2801	; 0x802801 <VOLUME>
    158c:	90 91 02 28 	lds	r25, 0x2802	; 0x802802 <VOLUME+0x1>
    1590:	a0 91 03 28 	lds	r26, 0x2803	; 0x802803 <VOLUME+0x2>
    1594:	b0 91 04 28 	lds	r27, 0x2804	; 0x802804 <VOLUME+0x3>
    1598:	8b 30       	cpi	r24, 0x0B	; 11
    159a:	91 05       	cpc	r25, r1
    159c:	a1 05       	cpc	r26, r1
    159e:	b1 05       	cpc	r27, r1
    15a0:	08 f0       	brcs	.+2      	; 0x15a4 <singleDownclick1()+0xac>
    15a2:	90 c0       	rjmp	.+288    	; 0x16c4 <singleDownclick1()+0x1cc>
    15a4:	80 e1       	ldi	r24, 0x10	; 16
    15a6:	97 e2       	ldi	r25, 0x27	; 39
    15a8:	a0 e0       	ldi	r26, 0x00	; 0
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	80 93 01 28 	sts	0x2801, r24	; 0x802801 <VOLUME>
    15b0:	90 93 02 28 	sts	0x2802, r25	; 0x802802 <VOLUME+0x1>
    15b4:	a0 93 03 28 	sts	0x2803, r26	; 0x802803 <VOLUME+0x2>
    15b8:	b0 93 04 28 	sts	0x2804, r27	; 0x802804 <VOLUME+0x3>
    15bc:	cf 91       	pop	r28
    15be:	08 95       	ret
    15c0:	01 96       	adiw	r24, 0x01	; 1
    15c2:	80 93 e3 28 	sts	0x28E3, r24	; 0x8028e3 <menu_select>
    15c6:	90 93 e4 28 	sts	0x28E4, r25	; 0x8028e4 <menu_select+0x1>
    15ca:	ae cf       	rjmp	.-164    	; 0x1528 <singleDownclick1()+0x30>
    15cc:	81 30       	cpi	r24, 0x01	; 1
    15ce:	09 f0       	breq	.+2      	; 0x15d2 <singleDownclick1()+0xda>
    15d0:	ab cf       	rjmp	.-170    	; 0x1528 <singleDownclick1()+0x30>
    15d2:	e0 91 e3 28 	lds	r30, 0x28E3	; 0x8028e3 <menu_select>
    15d6:	f0 91 e4 28 	lds	r31, 0x28E4	; 0x8028e4 <menu_select+0x1>
    15da:	31 97       	sbiw	r30, 0x01	; 1
    15dc:	e7 30       	cpi	r30, 0x07	; 7
    15de:	f1 05       	cpc	r31, r1
    15e0:	08 f0       	brcs	.+2      	; 0x15e4 <singleDownclick1()+0xec>
    15e2:	a2 cf       	rjmp	.-188    	; 0x1528 <singleDownclick1()+0x30>
    15e4:	ea 50       	subi	r30, 0x0A	; 10
    15e6:	f5 4f       	sbci	r31, 0xF5	; 245
    15e8:	0c 94 9c 24 	jmp	0x4938	; 0x4938 <__tablejump2__>
    15ec:	fd 0a       	sbc	r15, r29
    15ee:	07 0b       	sbc	r16, r23
    15f0:	18 0b       	sbc	r17, r24
    15f2:	29 0b       	sbc	r18, r25
    15f4:	2d 0b       	sbc	r18, r29
    15f6:	34 0b       	sbc	r19, r20
    15f8:	3e 0b       	sbc	r19, r30
    15fa:	80 91 0e 28 	lds	r24, 0x280E	; 0x80280e <safe_temp1>
    15fe:	82 33       	cpi	r24, 0x32	; 50
    1600:	21 f4       	brne	.+8      	; 0x160a <singleDownclick1()+0x112>
    1602:	8b e4       	ldi	r24, 0x4B	; 75
    1604:	80 93 0e 28 	sts	0x280E, r24	; 0x80280e <safe_temp1>
    1608:	8f cf       	rjmp	.-226    	; 0x1528 <singleDownclick1()+0x30>
    160a:	85 50       	subi	r24, 0x05	; 5
    160c:	fb cf       	rjmp	.-10     	; 0x1604 <singleDownclick1()+0x10c>
    160e:	80 91 36 28 	lds	r24, 0x2836	; 0x802836 <Probe1>
    1612:	90 91 37 28 	lds	r25, 0x2837	; 0x802837 <Probe1+0x1>
    1616:	8c 3e       	cpi	r24, 0xEC	; 236
    1618:	2f ef       	ldi	r18, 0xFF	; 255
    161a:	92 07       	cpc	r25, r18
    161c:	39 f4       	brne	.+14     	; 0x162c <singleDownclick1()+0x134>
    161e:	84 e1       	ldi	r24, 0x14	; 20
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	80 93 36 28 	sts	0x2836, r24	; 0x802836 <Probe1>
    1626:	90 93 37 28 	sts	0x2837, r25	; 0x802837 <Probe1+0x1>
    162a:	7e cf       	rjmp	.-260    	; 0x1528 <singleDownclick1()+0x30>
    162c:	01 97       	sbiw	r24, 0x01	; 1
    162e:	f9 cf       	rjmp	.-14     	; 0x1622 <singleDownclick1()+0x12a>
    1630:	80 91 34 28 	lds	r24, 0x2834	; 0x802834 <Probe2>
    1634:	90 91 35 28 	lds	r25, 0x2835	; 0x802835 <Probe2+0x1>
    1638:	8c 3e       	cpi	r24, 0xEC	; 236
    163a:	2f ef       	ldi	r18, 0xFF	; 255
    163c:	92 07       	cpc	r25, r18
    163e:	39 f4       	brne	.+14     	; 0x164e <singleDownclick1()+0x156>
    1640:	84 e1       	ldi	r24, 0x14	; 20
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	80 93 34 28 	sts	0x2834, r24	; 0x802834 <Probe2>
    1648:	90 93 35 28 	sts	0x2835, r25	; 0x802835 <Probe2+0x1>
    164c:	6d cf       	rjmp	.-294    	; 0x1528 <singleDownclick1()+0x30>
    164e:	01 97       	sbiw	r24, 0x01	; 1
    1650:	f9 cf       	rjmp	.-14     	; 0x1644 <singleDownclick1()+0x14c>
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	80 93 38 28 	sts	0x2838, r24	; 0x802838 <Pump_calib>
    1658:	67 cf       	rjmp	.-306    	; 0x1528 <singleDownclick1()+0x30>
    165a:	80 91 33 28 	lds	r24, 0x2833	; 0x802833 <Flow_override>
    165e:	91 e0       	ldi	r25, 0x01	; 1
    1660:	89 27       	eor	r24, r25
    1662:	80 93 33 28 	sts	0x2833, r24	; 0x802833 <Flow_override>
    1666:	60 cf       	rjmp	.-320    	; 0x1528 <singleDownclick1()+0x30>
    1668:	80 91 0f 28 	lds	r24, 0x280F	; 0x80280f <Disp_t>
    166c:	81 30       	cpi	r24, 0x01	; 1
    166e:	21 f4       	brne	.+8      	; 0x1678 <singleDownclick1()+0x180>
    1670:	8e e1       	ldi	r24, 0x1E	; 30
    1672:	80 93 0f 28 	sts	0x280F, r24	; 0x80280f <Disp_t>
    1676:	58 cf       	rjmp	.-336    	; 0x1528 <singleDownclick1()+0x30>
    1678:	81 50       	subi	r24, 0x01	; 1
    167a:	fb cf       	rjmp	.-10     	; 0x1672 <singleDownclick1()+0x17a>
    167c:	80 91 94 28 	lds	r24, 0x2894	; 0x802894 <L_override>
    1680:	91 e0       	ldi	r25, 0x01	; 1
    1682:	89 27       	eor	r24, r25
    1684:	80 93 94 28 	sts	0x2894, r24	; 0x802894 <L_override>
    1688:	4f cf       	rjmp	.-354    	; 0x1528 <singleDownclick1()+0x30>
    168a:	0a 97       	sbiw	r24, 0x0a	; 10
    168c:	a1 09       	sbc	r26, r1
    168e:	b1 09       	sbc	r27, r1
    1690:	6c cf       	rjmp	.-296    	; 0x156a <singleDownclick1()+0x72>
    1692:	8f 30       	cpi	r24, 0x0F	; 15
    1694:	09 f0       	breq	.+2      	; 0x1698 <singleDownclick1()+0x1a0>
    1696:	71 cf       	rjmp	.-286    	; 0x157a <singleDownclick1()+0x82>
    1698:	80 91 2d 28 	lds	r24, 0x282D	; 0x80282d <flip>
    169c:	88 23       	and	r24, r24
    169e:	09 f4       	brne	.+2      	; 0x16a2 <singleDownclick1()+0x1aa>
    16a0:	6c cf       	rjmp	.-296    	; 0x157a <singleDownclick1()+0x82>
    16a2:	80 91 d5 28 	lds	r24, 0x28D5	; 0x8028d5 <Pump_error>
    16a6:	90 91 d6 28 	lds	r25, 0x28D6	; 0x8028d6 <Pump_error+0x1>
    16aa:	85 3d       	cpi	r24, 0xD5	; 213
    16ac:	2e ef       	ldi	r18, 0xFE	; 254
    16ae:	92 07       	cpc	r25, r18
    16b0:	3c f4       	brge	.+14     	; 0x16c0 <singleDownclick1()+0x1c8>
    16b2:	8c e2       	ldi	r24, 0x2C	; 44
    16b4:	91 e0       	ldi	r25, 0x01	; 1
    16b6:	80 93 d5 28 	sts	0x28D5, r24	; 0x8028d5 <Pump_error>
    16ba:	90 93 d6 28 	sts	0x28D6, r25	; 0x8028d6 <Pump_error+0x1>
    16be:	5d cf       	rjmp	.-326    	; 0x157a <singleDownclick1()+0x82>
    16c0:	01 97       	sbiw	r24, 0x01	; 1
    16c2:	f9 cf       	rjmp	.-14     	; 0x16b6 <singleDownclick1()+0x1be>
    16c4:	0a 97       	sbiw	r24, 0x0a	; 10
    16c6:	a1 09       	sbc	r26, r1
    16c8:	b1 09       	sbc	r27, r1
    16ca:	70 cf       	rjmp	.-288    	; 0x15ac <singleDownclick1()+0xb4>
    16cc:	82 30       	cpi	r24, 0x02	; 2
    16ce:	09 f0       	breq	.+2      	; 0x16d2 <singleDownclick1()+0x1da>
    16d0:	75 cf       	rjmp	.-278    	; 0x15bc <singleDownclick1()+0xc4>
    16d2:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
    16d6:	82 30       	cpi	r24, 0x02	; 2
    16d8:	20 f4       	brcc	.+8      	; 0x16e2 <singleDownclick1()+0x1ea>
    16da:	8a e0       	ldi	r24, 0x0A	; 10
    16dc:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
    16e0:	6d cf       	rjmp	.-294    	; 0x15bc <singleDownclick1()+0xc4>
    16e2:	81 50       	subi	r24, 0x01	; 1
    16e4:	fb cf       	rjmp	.-10     	; 0x16dc <singleDownclick1()+0x1e4>

000016e6 <LongPress5sec_fun()>:
LongPress5sec_fun():
    16e6:	80 91 31 28 	lds	r24, 0x2831	; 0x802831 <chk_time>
    16ea:	90 91 32 28 	lds	r25, 0x2832	; 0x802832 <chk_time+0x1>
    16ee:	01 97       	sbiw	r24, 0x01	; 1
    16f0:	49 f4       	brne	.+18     	; 0x1704 <LongPress5sec_fun()+0x1e>
    16f2:	80 91 2f 28 	lds	r24, 0x282F	; 0x80282f <inc_time>
    16f6:	90 91 30 28 	lds	r25, 0x2830	; 0x802830 <inc_time+0x1>
    16fa:	01 96       	adiw	r24, 0x01	; 1
    16fc:	80 93 2f 28 	sts	0x282F, r24	; 0x80282f <inc_time>
    1700:	90 93 30 28 	sts	0x2830, r25	; 0x802830 <inc_time+0x1>
    1704:	08 95       	ret

00001706 <Heaters_stop()>:
digitalWrite():
    1706:	60 e0       	ldi	r22, 0x00	; 0
    1708:	86 e1       	ldi	r24, 0x16	; 22
    170a:	40 d9       	rcall	.-3456   	; 0x98c <digitalWrite.part.2>
    170c:	60 e0       	ldi	r22, 0x00	; 0
    170e:	82 e1       	ldi	r24, 0x12	; 18
    1710:	3d d9       	rcall	.-3462   	; 0x98c <digitalWrite.part.2>
    1712:	60 e0       	ldi	r22, 0x00	; 0
    1714:	88 e1       	ldi	r24, 0x18	; 24
    1716:	3a d9       	rcall	.-3468   	; 0x98c <digitalWrite.part.2>
stop():
    1718:	e8 e9       	ldi	r30, 0x98	; 152
    171a:	fa e2       	ldi	r31, 0x2A	; 42
    171c:	10 82       	st	Z, r1
    171e:	13 86       	std	Z+11, r1	; 0x0b
    1720:	14 86       	std	Z+12, r1	; 0x0c
    1722:	15 86       	std	Z+13, r1	; 0x0d
    1724:	16 86       	std	Z+14, r1	; 0x0e
    1726:	17 86       	std	Z+15, r1	; 0x0f
    1728:	10 8a       	std	Z+16, r1	; 0x10
Heaters_stop():
    172a:	08 95       	ret

0000172c <UartClass::begin(unsigned long)>:
begin():
    172c:	dc 01       	movw	r26, r24
    172e:	ed 91       	ld	r30, X+
    1730:	fc 91       	ld	r31, X
    1732:	04 88       	ldd	r0, Z+20	; 0x14
    1734:	f5 89       	ldd	r31, Z+21	; 0x15
    1736:	e0 2d       	mov	r30, r0
    1738:	23 e0       	ldi	r18, 0x03	; 3
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	09 94       	ijmp

0000173e <EERef::operator*() const>:
operator*():
    173e:	fc 01       	movw	r30, r24
    1740:	80 81       	ld	r24, Z
    1742:	91 81       	ldd	r25, Z+1	; 0x01
    1744:	fc 01       	movw	r30, r24
    1746:	ff 27       	eor	r31, r31
    1748:	90 fd       	sbrc	r25, 0
    174a:	06 c0       	rjmp	.+12     	; 0x1758 <EERef::operator*() const+0x1a>
    174c:	80 e0       	ldi	r24, 0x00	; 0
    174e:	94 e1       	ldi	r25, 0x14	; 20
    1750:	e8 2b       	or	r30, r24
    1752:	f9 2b       	or	r31, r25
    1754:	80 81       	ld	r24, Z
    1756:	08 95       	ret
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	93 e1       	ldi	r25, 0x13	; 19
    175c:	f9 cf       	rjmp	.-14     	; 0x1750 <EERef::operator*() const+0x12>

0000175e <eepromclass::readUnsignedIntFromEEPROM(int) [clone .constprop.72]>:
readUnsignedIntFromEEPROM():
    175e:	ef 92       	push	r14
    1760:	ff 92       	push	r15
    1762:	1f 93       	push	r17
    1764:	cf 93       	push	r28
    1766:	df 93       	push	r29
    1768:	00 d0       	rcall	.+0      	; 0x176a <eepromclass::readUnsignedIntFromEEPROM(int) [clone .constprop.72]+0xc>
    176a:	cd b7       	in	r28, 0x3d	; 61
    176c:	de b7       	in	r29, 0x3e	; 62
    176e:	7c 01       	movw	r14, r24
_ZN5EERefC2Ei():
    1770:	89 83       	std	Y+1, r24	; 0x01
    1772:	9a 83       	std	Y+2, r25	; 0x02
_ZNK5EERefcvhEv():
    1774:	ce 01       	movw	r24, r28
    1776:	01 96       	adiw	r24, 0x01	; 1
    1778:	e2 df       	rcall	.-60     	; 0x173e <EERef::operator*() const>
    177a:	18 2f       	mov	r17, r24
readUnsignedIntFromEEPROM():
    177c:	8f ef       	ldi	r24, 0xFF	; 255
    177e:	e8 1a       	sub	r14, r24
    1780:	f8 0a       	sbc	r15, r24
_ZN5EERefC2Ei():
    1782:	e9 82       	std	Y+1, r14	; 0x01
    1784:	fa 82       	std	Y+2, r15	; 0x02
_ZNK5EERefcvhEv():
    1786:	ce 01       	movw	r24, r28
    1788:	01 96       	adiw	r24, 0x01	; 1
    178a:	d9 df       	rcall	.-78     	; 0x173e <EERef::operator*() const>
readUnsignedIntFromEEPROM():
    178c:	21 2f       	mov	r18, r17
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	32 2f       	mov	r19, r18
    1792:	22 27       	eor	r18, r18
    1794:	82 0f       	add	r24, r18
    1796:	93 2f       	mov	r25, r19
    1798:	91 1d       	adc	r25, r1
    179a:	0f 90       	pop	r0
    179c:	0f 90       	pop	r0
    179e:	df 91       	pop	r29
    17a0:	cf 91       	pop	r28
    17a2:	1f 91       	pop	r17
    17a4:	ff 90       	pop	r15
    17a6:	ef 90       	pop	r14
    17a8:	08 95       	ret

000017aa <eepromclass::Read_memory() [clone .constprop.71]>:
Read_memory():
    17aa:	df 92       	push	r13
    17ac:	ef 92       	push	r14
    17ae:	ff 92       	push	r15
    17b0:	0f 93       	push	r16
    17b2:	1f 93       	push	r17
    17b4:	cf 93       	push	r28
    17b6:	df 93       	push	r29
    17b8:	00 d0       	rcall	.+0      	; 0x17ba <eepromclass::Read_memory() [clone .constprop.71]+0x10>
    17ba:	cd b7       	in	r28, 0x3d	; 61
    17bc:	de b7       	in	r29, 0x3e	; 62
_ZN11EEPROMClass3getIhEERT_iS2_.isra.4():
    17be:	8e e0       	ldi	r24, 0x0E	; 14
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	89 83       	std	Y+1, r24	; 0x01
    17c4:	9a 83       	std	Y+2, r25	; 0x02
_ZNK5EERefcvhEv():
    17c6:	ce 01       	movw	r24, r28
    17c8:	01 96       	adiw	r24, 0x01	; 1
    17ca:	b9 df       	rcall	.-142    	; 0x173e <EERef::operator*() const>
_ZN11EEPROMClass3getIhEERT_iS2_.isra.4():
    17cc:	80 93 0d 28 	sts	0x280D, r24	; 0x80280d <safe_temp>
Read_memory():
    17d0:	86 e0       	ldi	r24, 0x06	; 6
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	c4 df       	rcall	.-120    	; 0x175e <eepromclass::readUnsignedIntFromEEPROM(int) [clone .constprop.72]>
    17d6:	7c 01       	movw	r14, r24
    17d8:	80 93 df 28 	sts	0x28DF, r24	; 0x8028df <probe1_calibvalue>
    17dc:	82 e1       	ldi	r24, 0x12	; 18
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	be df       	rcall	.-132    	; 0x175e <eepromclass::readUnsignedIntFromEEPROM(int) [clone .constprop.72]>
    17e2:	8c 01       	movw	r16, r24
    17e4:	80 93 db 28 	sts	0x28DB, r24	; 0x8028db <probe2_calibvalue>
_ZN5EERefC2Ei():
    17e8:	84 e0       	ldi	r24, 0x04	; 4
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	89 83       	std	Y+1, r24	; 0x01
    17ee:	9a 83       	std	Y+2, r25	; 0x02
_ZNK5EERefcvhEv():
    17f0:	ce 01       	movw	r24, r28
    17f2:	01 96       	adiw	r24, 0x01	; 1
    17f4:	a4 df       	rcall	.-184    	; 0x173e <EERef::operator*() const>
    17f6:	d8 2e       	mov	r13, r24
Read_memory():
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	d1 10       	cpse	r13, r1
    17fc:	01 c0       	rjmp	.+2      	; 0x1800 <__DATA_REGION_LENGTH__>
    17fe:	80 e0       	ldi	r24, 0x00	; 0
    1800:	80 93 e0 28 	sts	0x28E0, r24	; 0x8028e0 <Sign1>
_ZN5EERefC2Ei():
    1804:	86 e1       	ldi	r24, 0x16	; 22
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	89 83       	std	Y+1, r24	; 0x01
    180a:	9a 83       	std	Y+2, r25	; 0x02
_ZNK5EERefcvhEv():
    180c:	ce 01       	movw	r24, r28
    180e:	01 96       	adiw	r24, 0x01	; 1
    1810:	96 df       	rcall	.-212    	; 0x173e <EERef::operator*() const>
Read_memory():
    1812:	91 e0       	ldi	r25, 0x01	; 1
    1814:	81 11       	cpse	r24, r1
    1816:	01 c0       	rjmp	.+2      	; 0x181a <__DATA_REGION_LENGTH__+0x1a>
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	90 93 dc 28 	sts	0x28DC, r25	; 0x8028dc <Sign2>
    181e:	ff 24       	eor	r15, r15
    1820:	dd 20       	and	r13, r13
    1822:	19 f0       	breq	.+6      	; 0x182a <__DATA_REGION_LENGTH__+0x2a>
    1824:	f1 94       	neg	r15
    1826:	e1 94       	neg	r14
    1828:	f1 08       	sbc	r15, r1
    182a:	e0 92 e1 28 	sts	0x28E1, r14	; 0x8028e1 <Probe1_actual>
    182e:	f0 92 e2 28 	sts	0x28E2, r15	; 0x8028e2 <Probe1_actual+0x1>
    1832:	11 27       	eor	r17, r17
    1834:	88 23       	and	r24, r24
    1836:	19 f0       	breq	.+6      	; 0x183e <__DATA_REGION_LENGTH__+0x3e>
    1838:	11 95       	neg	r17
    183a:	01 95       	neg	r16
    183c:	11 09       	sbc	r17, r1
    183e:	00 93 dd 28 	sts	0x28DD, r16	; 0x8028dd <Probe2_actual>
    1842:	10 93 de 28 	sts	0x28DE, r17	; 0x8028de <Probe2_actual+0x1>
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	89 df       	rcall	.-238    	; 0x175e <eepromclass::readUnsignedIntFromEEPROM(int) [clone .constprop.72]>
    184c:	80 93 0c 28 	sts	0x280C, r24	; 0x80280c <Pump1>
    1850:	64 e6       	ldi	r22, 0x64	; 100
    1852:	70 e0       	ldi	r23, 0x00	; 0
    1854:	80 e0       	ldi	r24, 0x00	; 0
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	be d9       	rcall	.-3204   	; 0xbd6 <delay>
    185a:	0f 90       	pop	r0
    185c:	0f 90       	pop	r0
    185e:	df 91       	pop	r29
    1860:	cf 91       	pop	r28
    1862:	1f 91       	pop	r17
    1864:	0f 91       	pop	r16
    1866:	ff 90       	pop	r15
    1868:	ef 90       	pop	r14
    186a:	df 90       	pop	r13
    186c:	08 95       	ret

0000186e <RESET1()>:
RESET1():
    186e:	80 91 e5 28 	lds	r24, 0x28E5	; 0x8028e5 <screen>
    1872:	82 30       	cpi	r24, 0x02	; 2
    1874:	b1 f4       	brne	.+44     	; 0x18a2 <RESET1()+0x34>
digitalWrite():
    1876:	60 e0       	ldi	r22, 0x00	; 0
    1878:	84 e0       	ldi	r24, 0x04	; 4
    187a:	88 d8       	rcall	.-3824   	; 0x98c <digitalWrite.part.2>
RESET1():
    187c:	10 92 e7 28 	sts	0x28E7, r1	; 0x8028e7 <stop_pump>
    1880:	0e 94 7d 01 	call	0x2fa	; 0x2fa <Dispenseclass::ticker_stop() [clone .constprop.89]>
    1884:	80 91 c6 28 	lds	r24, 0x28C6	; 0x8028c6 <Flow_Err>
    1888:	81 11       	cpse	r24, r1
    188a:	24 c0       	rjmp	.+72     	; 0x18d4 <RESET1()+0x66>
    188c:	80 91 c5 28 	lds	r24, 0x28C5	; 0x8028c5 <Temp_Err>
    1890:	81 11       	cpse	r24, r1
    1892:	20 c0       	rjmp	.+64     	; 0x18d4 <RESET1()+0x66>
    1894:	80 91 b7 28 	lds	r24, 0x28B7	; 0x8028b7 <warning_generate>
    1898:	81 11       	cpse	r24, r1
    189a:	1c c0       	rjmp	.+56     	; 0x18d4 <RESET1()+0x66>
    189c:	10 92 e5 28 	sts	0x28E5, r1	; 0x8028e5 <screen>
    18a0:	19 c0       	rjmp	.+50     	; 0x18d4 <RESET1()+0x66>
    18a2:	81 30       	cpi	r24, 0x01	; 1
    18a4:	79 f7       	brne	.-34     	; 0x1884 <RESET1()+0x16>
    18a6:	10 92 b0 28 	sts	0x28B0, r1	; 0x8028b0 <flowerror_screen_switch>
    18aa:	80 91 39 28 	lds	r24, 0x2839	; 0x802839 <back>
    18ae:	81 11       	cpse	r24, r1
    18b0:	27 c0       	rjmp	.+78     	; 0x1900 <RESET1()+0x92>
    18b2:	80 91 38 28 	lds	r24, 0x2838	; 0x802838 <Pump_calib>
    18b6:	81 11       	cpse	r24, r1
    18b8:	0d c0       	rjmp	.+26     	; 0x18d4 <RESET1()+0x66>
    18ba:	10 92 e5 28 	sts	0x28E5, r1	; 0x8028e5 <screen>
    18be:	10 92 e6 28 	sts	0x28E6, r1	; 0x8028e6 <tim_disp>
    18c2:	10 92 c8 28 	sts	0x28C8, r1	; 0x8028c8 <vol_set>
    18c6:	10 92 e3 28 	sts	0x28E3, r1	; 0x8028e3 <menu_select>
    18ca:	10 92 e4 28 	sts	0x28E4, r1	; 0x8028e4 <menu_select+0x1>
digitalWrite():
    18ce:	60 e0       	ldi	r22, 0x00	; 0
    18d0:	89 e1       	ldi	r24, 0x19	; 25
    18d2:	5c d8       	rcall	.-3912   	; 0x98c <digitalWrite.part.2>
RESET1():
    18d4:	80 91 06 28 	lds	r24, 0x2806	; 0x802806 <Stop_cycle>
    18d8:	81 11       	cpse	r24, r1
    18da:	03 c0       	rjmp	.+6      	; 0x18e2 <RESET1()+0x74>
    18dc:	82 e0       	ldi	r24, 0x02	; 2
    18de:	80 93 c9 28 	sts	0x28C9, r24	; 0x8028c9 <Level_var>
    18e2:	10 92 c8 28 	sts	0x28C8, r1	; 0x8028c8 <vol_set>
    18e6:	80 91 e3 28 	lds	r24, 0x28E3	; 0x8028e3 <menu_select>
    18ea:	90 91 e4 28 	lds	r25, 0x28E4	; 0x8028e4 <menu_select+0x1>
    18ee:	04 97       	sbiw	r24, 0x04	; 4
    18f0:	31 f4       	brne	.+12     	; 0x18fe <RESET1()+0x90>
    18f2:	10 92 38 28 	sts	0x2838, r1	; 0x802838 <Pump_calib>
    18f6:	10 92 d9 28 	sts	0x28D9, r1	; 0x8028d9 <pcalib>
    18fa:	10 92 39 28 	sts	0x2839, r1	; 0x802839 <back>
    18fe:	08 95       	ret
    1900:	81 30       	cpi	r24, 0x01	; 1
    1902:	41 f7       	brne	.-48     	; 0x18d4 <RESET1()+0x66>
    1904:	80 91 e3 28 	lds	r24, 0x28E3	; 0x8028e3 <menu_select>
    1908:	90 91 e4 28 	lds	r25, 0x28E4	; 0x8028e4 <menu_select+0x1>
    190c:	10 92 39 28 	sts	0x2839, r1	; 0x802839 <back>
    1910:	83 30       	cpi	r24, 0x03	; 3
    1912:	91 05       	cpc	r25, r1
    1914:	f9 f0       	breq	.+62     	; 0x1954 <RESET1()+0xe6>
    1916:	7c f4       	brge	.+30     	; 0x1936 <RESET1()+0xc8>
    1918:	81 30       	cpi	r24, 0x01	; 1
    191a:	91 05       	cpc	r25, r1
    191c:	a9 f0       	breq	.+42     	; 0x1948 <RESET1()+0xda>
    191e:	02 97       	sbiw	r24, 0x02	; 2
    1920:	c9 f6       	brne	.-78     	; 0x18d4 <RESET1()+0x66>
    1922:	80 91 e1 28 	lds	r24, 0x28E1	; 0x8028e1 <Probe1_actual>
    1926:	90 91 e2 28 	lds	r25, 0x28E2	; 0x8028e2 <Probe1_actual+0x1>
    192a:	80 93 36 28 	sts	0x2836, r24	; 0x802836 <Probe1>
    192e:	90 93 37 28 	sts	0x2837, r25	; 0x802837 <Probe1+0x1>
    1932:	3b df       	rcall	.-394    	; 0x17aa <eepromclass::Read_memory() [clone .constprop.71]>
    1934:	cf cf       	rjmp	.-98     	; 0x18d4 <RESET1()+0x66>
    1936:	85 30       	cpi	r24, 0x05	; 5
    1938:	91 05       	cpc	r25, r1
    193a:	d9 f0       	breq	.+54     	; 0x1972 <RESET1()+0x104>
    193c:	a4 f0       	brlt	.+40     	; 0x1966 <RESET1()+0xf8>
    193e:	07 97       	sbiw	r24, 0x07	; 7
    1940:	49 f6       	brne	.-110    	; 0x18d4 <RESET1()+0x66>
    1942:	10 92 94 28 	sts	0x2894, r1	; 0x802894 <L_override>
    1946:	c6 cf       	rjmp	.-116    	; 0x18d4 <RESET1()+0x66>
    1948:	30 df       	rcall	.-416    	; 0x17aa <eepromclass::Read_memory() [clone .constprop.71]>
    194a:	80 91 0d 28 	lds	r24, 0x280D	; 0x80280d <safe_temp>
    194e:	80 93 0e 28 	sts	0x280E, r24	; 0x80280e <safe_temp1>
    1952:	c0 cf       	rjmp	.-128    	; 0x18d4 <RESET1()+0x66>
    1954:	80 91 dd 28 	lds	r24, 0x28DD	; 0x8028dd <Probe2_actual>
    1958:	90 91 de 28 	lds	r25, 0x28DE	; 0x8028de <Probe2_actual+0x1>
    195c:	80 93 34 28 	sts	0x2834, r24	; 0x802834 <Probe2>
    1960:	90 93 35 28 	sts	0x2835, r25	; 0x802835 <Probe2+0x1>
    1964:	e6 cf       	rjmp	.-52     	; 0x1932 <RESET1()+0xc4>
    1966:	21 df       	rcall	.-446    	; 0x17aa <eepromclass::Read_memory() [clone .constprop.71]>
    1968:	10 92 d9 28 	sts	0x28D9, r1	; 0x8028d9 <pcalib>
    196c:	10 92 38 28 	sts	0x2838, r1	; 0x802838 <Pump_calib>
    1970:	b1 cf       	rjmp	.-158    	; 0x18d4 <RESET1()+0x66>
    1972:	10 92 33 28 	sts	0x2833, r1	; 0x802833 <Flow_override>
    1976:	ae cf       	rjmp	.-164    	; 0x18d4 <RESET1()+0x66>

00001978 <longpress1()>:
longpress1():
    1978:	80 91 e7 28 	lds	r24, 0x28E7	; 0x8028e7 <stop_pump>
    197c:	88 23       	and	r24, r24
    197e:	21 f0       	breq	.+8      	; 0x1988 <longpress1()+0x10>
    1980:	82 e0       	ldi	r24, 0x02	; 2
    1982:	80 93 e5 28 	sts	0x28E5, r24	; 0x8028e5 <screen>
    1986:	08 95       	ret
    1988:	80 91 da 28 	lds	r24, 0x28DA	; 0x8028da <sfil_comp>
    198c:	81 11       	cpse	r24, r1
    198e:	06 c0       	rjmp	.+12     	; 0x199c <longpress1()+0x24>
    1990:	10 92 e5 28 	sts	0x28E5, r1	; 0x8028e5 <screen>
digitalWrite():
    1994:	60 e0       	ldi	r22, 0x00	; 0
    1996:	89 e1       	ldi	r24, 0x19	; 25
    1998:	0c 94 c6 04 	jmp	0x98c	; 0x98c <digitalWrite.part.2>
longpress1():
    199c:	80 91 e5 28 	lds	r24, 0x28E5	; 0x8028e5 <screen>
    19a0:	81 11       	cpse	r24, r1
    19a2:	2e c0       	rjmp	.+92     	; 0x1a00 <longpress1()+0x88>
    19a4:	80 91 2e 28 	lds	r24, 0x282E	; 0x80282e <emer_start_stop>
    19a8:	81 11       	cpse	r24, r1
    19aa:	2a c0       	rjmp	.+84     	; 0x1a00 <longpress1()+0x88>
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	80 93 b0 28 	sts	0x28B0, r24	; 0x8028b0 <flowerror_screen_switch>
    19b2:	80 93 e5 28 	sts	0x28E5, r24	; 0x8028e5 <screen>
    19b6:	83 e0       	ldi	r24, 0x03	; 3
    19b8:	80 93 c8 28 	sts	0x28C8, r24	; 0x8028c8 <vol_set>
    19bc:	10 92 39 28 	sts	0x2839, r1	; 0x802839 <back>
    19c0:	10 92 e3 28 	sts	0x28E3, r1	; 0x8028e3 <menu_select>
    19c4:	10 92 e4 28 	sts	0x28E4, r1	; 0x8028e4 <menu_select+0x1>
    19c8:	f0 de       	rcall	.-544    	; 0x17aa <eepromclass::Read_memory() [clone .constprop.71]>
    19ca:	80 91 e1 28 	lds	r24, 0x28E1	; 0x8028e1 <Probe1_actual>
    19ce:	90 91 e2 28 	lds	r25, 0x28E2	; 0x8028e2 <Probe1_actual+0x1>
    19d2:	80 93 36 28 	sts	0x2836, r24	; 0x802836 <Probe1>
    19d6:	90 93 37 28 	sts	0x2837, r25	; 0x802837 <Probe1+0x1>
    19da:	80 91 dd 28 	lds	r24, 0x28DD	; 0x8028dd <Probe2_actual>
    19de:	90 91 de 28 	lds	r25, 0x28DE	; 0x8028de <Probe2_actual+0x1>
    19e2:	80 93 34 28 	sts	0x2834, r24	; 0x802834 <Probe2>
    19e6:	90 93 35 28 	sts	0x2835, r25	; 0x802835 <Probe2+0x1>
    19ea:	80 91 0d 28 	lds	r24, 0x280D	; 0x80280d <safe_temp>
    19ee:	80 93 0e 28 	sts	0x280E, r24	; 0x80280e <safe_temp1>
    19f2:	64 ef       	ldi	r22, 0xF4	; 244
    19f4:	71 e0       	ldi	r23, 0x01	; 1
    19f6:	80 e0       	ldi	r24, 0x00	; 0
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	a4 d9       	rcall	.-3256   	; 0xd44 <Buzzerclass::buzzer_on(unsigned long) [clone .constprop.93]>
digitalWrite():
    19fc:	61 e0       	ldi	r22, 0x01	; 1
    19fe:	cb cf       	rjmp	.-106    	; 0x1996 <longpress1()+0x1e>
longpress1():
    1a00:	08 95       	ret

00001a02 <nvm_write_byte(unsigned int, unsigned char)>:
nvm_write_byte():
    1a02:	fc 01       	movw	r30, r24
    1a04:	ff 27       	eor	r31, r31
    1a06:	90 fd       	sbrc	r25, 0
    1a08:	12 c0       	rjmp	.+36     	; 0x1a2e <nvm_write_byte(unsigned int, unsigned char)+0x2c>
    1a0a:	80 e0       	ldi	r24, 0x00	; 0
    1a0c:	94 e1       	ldi	r25, 0x14	; 20
    1a0e:	e8 2b       	or	r30, r24
    1a10:	f9 2b       	or	r31, r25
    1a12:	60 83       	st	Z, r22
    1a14:	8f b7       	in	r24, 0x3f	; 63
    1a16:	f8 94       	cli
    1a18:	9d e9       	ldi	r25, 0x9D	; 157
    1a1a:	23 e0       	ldi	r18, 0x03	; 3
    1a1c:	94 bf       	out	0x34, r25	; 52
    1a1e:	20 93 00 10 	sts	0x1000, r18	; 0x801000 <__TEXT_REGION_LENGTH__+0x7f5000>
    1a22:	8f bf       	out	0x3f, r24	; 63
    1a24:	80 91 02 10 	lds	r24, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x7f5002>
    1a28:	81 fd       	sbrc	r24, 1
    1a2a:	fc cf       	rjmp	.-8      	; 0x1a24 <nvm_write_byte(unsigned int, unsigned char)+0x22>
    1a2c:	08 95       	ret
    1a2e:	80 e0       	ldi	r24, 0x00	; 0
    1a30:	93 e1       	ldi	r25, 0x13	; 19
    1a32:	ed cf       	rjmp	.-38     	; 0x1a0e <nvm_write_byte(unsigned int, unsigned char)+0xc>

00001a34 <eepromclass::writeUnsignedIntIntoEEPROM(int, unsigned int) [clone .constprop.74]>:
writeUnsignedIntIntoEEPROM():
    1a34:	1f 93       	push	r17
    1a36:	cf 93       	push	r28
    1a38:	df 93       	push	r29
    1a3a:	ec 01       	movw	r28, r24
    1a3c:	16 2f       	mov	r17, r22
operator=():
    1a3e:	60 e0       	ldi	r22, 0x00	; 0
    1a40:	e0 df       	rcall	.-64     	; 0x1a02 <nvm_write_byte(unsigned int, unsigned char)>
    1a42:	61 2f       	mov	r22, r17
    1a44:	ce 01       	movw	r24, r28
    1a46:	01 96       	adiw	r24, 0x01	; 1
writeUnsignedIntIntoEEPROM():
    1a48:	df 91       	pop	r29
    1a4a:	cf 91       	pop	r28
    1a4c:	1f 91       	pop	r17
operator=():
    1a4e:	d9 cf       	rjmp	.-78     	; 0x1a02 <nvm_write_byte(unsigned int, unsigned char)>

00001a50 <eepromclass::Write_memory() [clone .constprop.73]>:
Write_memory():
    1a50:	1f 93       	push	r17
    1a52:	cf 93       	push	r28
    1a54:	df 93       	push	r29
    1a56:	00 d0       	rcall	.+0      	; 0x1a58 <eepromclass::Write_memory() [clone .constprop.73]+0x8>
    1a58:	cd b7       	in	r28, 0x3d	; 61
    1a5a:	de b7       	in	r29, 0x3e	; 62
    1a5c:	80 91 e3 28 	lds	r24, 0x28E3	; 0x8028e3 <menu_select>
    1a60:	90 91 e4 28 	lds	r25, 0x28E4	; 0x8028e4 <menu_select+0x1>
    1a64:	82 30       	cpi	r24, 0x02	; 2
    1a66:	91 05       	cpc	r25, r1
    1a68:	81 f1       	breq	.+96     	; 0x1aca <eepromclass::Write_memory() [clone .constprop.73]+0x7a>
    1a6a:	44 f4       	brge	.+16     	; 0x1a7c <eepromclass::Write_memory() [clone .constprop.73]+0x2c>
    1a6c:	01 97       	sbiw	r24, 0x01	; 1
    1a6e:	b9 f0       	breq	.+46     	; 0x1a9e <eepromclass::Write_memory() [clone .constprop.73]+0x4e>
    1a70:	0f 90       	pop	r0
    1a72:	0f 90       	pop	r0
    1a74:	df 91       	pop	r29
    1a76:	cf 91       	pop	r28
    1a78:	1f 91       	pop	r17
    1a7a:	08 95       	ret
    1a7c:	83 30       	cpi	r24, 0x03	; 3
    1a7e:	91 05       	cpc	r25, r1
    1a80:	09 f4       	brne	.+2      	; 0x1a84 <eepromclass::Write_memory() [clone .constprop.73]+0x34>
    1a82:	3d c0       	rjmp	.+122    	; 0x1afe <eepromclass::Write_memory() [clone .constprop.73]+0xae>
    1a84:	04 97       	sbiw	r24, 0x04	; 4
    1a86:	a1 f7       	brne	.-24     	; 0x1a70 <eepromclass::Write_memory() [clone .constprop.73]+0x20>
    1a88:	60 91 0c 28 	lds	r22, 0x280C	; 0x80280c <Pump1>
    1a8c:	70 e0       	ldi	r23, 0x00	; 0
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	0f 90       	pop	r0
    1a94:	0f 90       	pop	r0
    1a96:	df 91       	pop	r29
    1a98:	cf 91       	pop	r28
    1a9a:	1f 91       	pop	r17
    1a9c:	cb cf       	rjmp	.-106    	; 0x1a34 <eepromclass::writeUnsignedIntIntoEEPROM(int, unsigned int) [clone .constprop.74]>
    1a9e:	10 91 0e 28 	lds	r17, 0x280E	; 0x80280e <safe_temp1>
    1aa2:	10 93 0d 28 	sts	0x280D, r17	; 0x80280d <safe_temp>
_ZN11EEPROMClass3putIhEERKT_iS3_.isra.3():
    1aa6:	8e e0       	ldi	r24, 0x0E	; 14
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	89 83       	std	Y+1, r24	; 0x01
    1aac:	9a 83       	std	Y+2, r25	; 0x02
_ZNK5EERefcvhEv():
    1aae:	ce 01       	movw	r24, r28
    1ab0:	01 96       	adiw	r24, 0x01	; 1
    1ab2:	45 de       	rcall	.-886    	; 0x173e <EERef::operator*() const>
update():
    1ab4:	18 17       	cp	r17, r24
    1ab6:	e1 f2       	breq	.-72     	; 0x1a70 <eepromclass::Write_memory() [clone .constprop.73]+0x20>
operator=():
    1ab8:	61 2f       	mov	r22, r17
    1aba:	8e e0       	ldi	r24, 0x0E	; 14
    1abc:	90 e0       	ldi	r25, 0x00	; 0
Write_memory():
    1abe:	0f 90       	pop	r0
    1ac0:	0f 90       	pop	r0
    1ac2:	df 91       	pop	r29
    1ac4:	cf 91       	pop	r28
    1ac6:	1f 91       	pop	r17
operator=():
    1ac8:	9c cf       	rjmp	.-200    	; 0x1a02 <nvm_write_byte(unsigned int, unsigned char)>
Write_memory():
    1aca:	80 91 e1 28 	lds	r24, 0x28E1	; 0x8028e1 <Probe1_actual>
    1ace:	90 91 e2 28 	lds	r25, 0x28E2	; 0x8028e2 <Probe1_actual+0x1>
    1ad2:	97 ff       	sbrs	r25, 7
    1ad4:	11 c0       	rjmp	.+34     	; 0x1af8 <eepromclass::Write_memory() [clone .constprop.73]+0xa8>
    1ad6:	91 e0       	ldi	r25, 0x01	; 1
    1ad8:	90 93 e0 28 	sts	0x28E0, r25	; 0x8028e0 <Sign1>
    1adc:	81 95       	neg	r24
    1ade:	80 93 df 28 	sts	0x28DF, r24	; 0x8028df <probe1_calibvalue>
    1ae2:	60 91 df 28 	lds	r22, 0x28DF	; 0x8028df <probe1_calibvalue>
    1ae6:	70 e0       	ldi	r23, 0x00	; 0
    1ae8:	86 e0       	ldi	r24, 0x06	; 6
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	a3 df       	rcall	.-186    	; 0x1a34 <eepromclass::writeUnsignedIntIntoEEPROM(int, unsigned int) [clone .constprop.74]>
operator=():
    1aee:	60 91 e0 28 	lds	r22, 0x28E0	; 0x8028e0 <Sign1>
    1af2:	84 e0       	ldi	r24, 0x04	; 4
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	e3 cf       	rjmp	.-58     	; 0x1abe <eepromclass::Write_memory() [clone .constprop.73]+0x6e>
Write_memory():
    1af8:	10 92 e0 28 	sts	0x28E0, r1	; 0x8028e0 <Sign1>
    1afc:	f0 cf       	rjmp	.-32     	; 0x1ade <eepromclass::Write_memory() [clone .constprop.73]+0x8e>
    1afe:	80 91 dd 28 	lds	r24, 0x28DD	; 0x8028dd <Probe2_actual>
    1b02:	90 91 de 28 	lds	r25, 0x28DE	; 0x8028de <Probe2_actual+0x1>
    1b06:	97 ff       	sbrs	r25, 7
    1b08:	11 c0       	rjmp	.+34     	; 0x1b2c <eepromclass::Write_memory() [clone .constprop.73]+0xdc>
    1b0a:	91 e0       	ldi	r25, 0x01	; 1
    1b0c:	90 93 dc 28 	sts	0x28DC, r25	; 0x8028dc <Sign2>
    1b10:	81 95       	neg	r24
    1b12:	80 93 db 28 	sts	0x28DB, r24	; 0x8028db <probe2_calibvalue>
    1b16:	60 91 db 28 	lds	r22, 0x28DB	; 0x8028db <probe2_calibvalue>
    1b1a:	70 e0       	ldi	r23, 0x00	; 0
    1b1c:	82 e1       	ldi	r24, 0x12	; 18
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	89 df       	rcall	.-238    	; 0x1a34 <eepromclass::writeUnsignedIntIntoEEPROM(int, unsigned int) [clone .constprop.74]>
operator=():
    1b22:	60 91 dc 28 	lds	r22, 0x28DC	; 0x8028dc <Sign2>
    1b26:	86 e1       	ldi	r24, 0x16	; 22
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	c9 cf       	rjmp	.-110    	; 0x1abe <eepromclass::Write_memory() [clone .constprop.73]+0x6e>
Write_memory():
    1b2c:	10 92 dc 28 	sts	0x28DC, r1	; 0x8028dc <Sign2>
    1b30:	f0 cf       	rjmp	.-32     	; 0x1b12 <eepromclass::Write_memory() [clone .constprop.73]+0xc2>

00001b32 <SET1()>:
SET1():
    1b32:	8f 92       	push	r8
    1b34:	9f 92       	push	r9
    1b36:	af 92       	push	r10
    1b38:	bf 92       	push	r11
    1b3a:	cf 92       	push	r12
    1b3c:	df 92       	push	r13
    1b3e:	ef 92       	push	r14
    1b40:	ff 92       	push	r15
    1b42:	cf 93       	push	r28
    1b44:	80 91 e5 28 	lds	r24, 0x28E5	; 0x8028e5 <screen>
    1b48:	81 11       	cpse	r24, r1
    1b4a:	18 c0       	rjmp	.+48     	; 0x1b7c <SET1()+0x4a>
    1b4c:	80 91 da 28 	lds	r24, 0x28DA	; 0x8028da <sfil_comp>
    1b50:	88 23       	and	r24, r24
    1b52:	39 f0       	breq	.+14     	; 0x1b62 <SET1()+0x30>
    1b54:	80 91 c8 28 	lds	r24, 0x28C8	; 0x8028c8 <vol_set>
    1b58:	8f 5f       	subi	r24, 0xFF	; 255
    1b5a:	83 30       	cpi	r24, 0x03	; 3
    1b5c:	60 f4       	brcc	.+24     	; 0x1b76 <SET1()+0x44>
    1b5e:	80 93 c8 28 	sts	0x28C8, r24	; 0x8028c8 <vol_set>
    1b62:	cf 91       	pop	r28
    1b64:	ff 90       	pop	r15
    1b66:	ef 90       	pop	r14
    1b68:	df 90       	pop	r13
    1b6a:	cf 90       	pop	r12
    1b6c:	bf 90       	pop	r11
    1b6e:	af 90       	pop	r10
    1b70:	9f 90       	pop	r9
    1b72:	8f 90       	pop	r8
    1b74:	08 95       	ret
    1b76:	10 92 c8 28 	sts	0x28C8, r1	; 0x8028c8 <vol_set>
    1b7a:	f3 cf       	rjmp	.-26     	; 0x1b62 <SET1()+0x30>
    1b7c:	81 30       	cpi	r24, 0x01	; 1
    1b7e:	89 f7       	brne	.-30     	; 0x1b62 <SET1()+0x30>
    1b80:	c0 91 39 28 	lds	r28, 0x2839	; 0x802839 <back>
    1b84:	cf 5f       	subi	r28, 0xFF	; 255
    1b86:	c0 93 39 28 	sts	0x2839, r28	; 0x802839 <back>
digitalWrite():
    1b8a:	61 e0       	ldi	r22, 0x01	; 1
    1b8c:	89 e1       	ldi	r24, 0x19	; 25
    1b8e:	0e 94 c6 04 	call	0x98c	; 0x98c <digitalWrite.part.2>
    1b92:	80 91 e3 28 	lds	r24, 0x28E3	; 0x8028e3 <menu_select>
    1b96:	90 91 e4 28 	lds	r25, 0x28E4	; 0x8028e4 <menu_select+0x1>
SET1():
    1b9a:	c2 30       	cpi	r28, 0x02	; 2
    1b9c:	09 f0       	breq	.+2      	; 0x1ba0 <SET1()+0x6e>
    1b9e:	4a c0       	rjmp	.+148    	; 0x1c34 <SET1()+0x102>
    1ba0:	88 30       	cpi	r24, 0x08	; 8
    1ba2:	91 05       	cpc	r25, r1
    1ba4:	08 f0       	brcs	.+2      	; 0x1ba8 <SET1()+0x76>
    1ba6:	46 c0       	rjmp	.+140    	; 0x1c34 <SET1()+0x102>
    1ba8:	fc 01       	movw	r30, r24
    1baa:	e7 52       	subi	r30, 0x27	; 39
    1bac:	f2 4f       	sbci	r31, 0xF2	; 242
    1bae:	0c 94 9c 24 	jmp	0x4938	; 0x4938 <__tablejump2__>
    1bb2:	e1 0d       	add	r30, r1
    1bb4:	f9 0d       	add	r31, r9
    1bb6:	01 0e       	add	r0, r17
    1bb8:	0a 0e       	add	r0, r26
    1bba:	1a 0e       	add	r1, r26
    1bbc:	13 0e       	add	r1, r19
    1bbe:	18 0e       	add	r1, r24
    1bc0:	18 0e       	add	r1, r24
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	80 93 c4 28 	sts	0x28C4, r24	; 0x8028c4 <sfil>
    1bc8:	10 92 da 28 	sts	0x28DA, r1	; 0x8028da <sfil_comp>
    1bcc:	10 92 c0 28 	sts	0x28C0, r1	; 0x8028c0 <sfil_on>
    1bd0:	10 92 c1 28 	sts	0x28C1, r1	; 0x8028c1 <sfil_on+0x1>
    1bd4:	10 92 c2 28 	sts	0x28C2, r1	; 0x8028c2 <sfil_on+0x2>
    1bd8:	10 92 c3 28 	sts	0x28C3, r1	; 0x8028c3 <sfil_on+0x3>
    1bdc:	80 93 92 28 	sts	0x2892, r24	; 0x802892 <boil2_var>
    1be0:	10 92 ca 28 	sts	0x28CA, r1	; 0x8028ca <sec_Heater>
    1be4:	10 92 39 28 	sts	0x2839, r1	; 0x802839 <back>
    1be8:	10 92 c8 28 	sts	0x28C8, r1	; 0x8028c8 <vol_set>
    1bec:	10 92 e5 28 	sts	0x28E5, r1	; 0x8028e5 <screen>
    1bf0:	b8 cf       	rjmp	.-144    	; 0x1b62 <SET1()+0x30>
    1bf2:	80 91 0e 28 	lds	r24, 0x280E	; 0x80280e <safe_temp1>
    1bf6:	80 93 0d 28 	sts	0x280D, r24	; 0x80280d <safe_temp>
    1bfa:	2a df       	rcall	.-428    	; 0x1a50 <eepromclass::Write_memory() [clone .constprop.73]>
    1bfc:	10 92 39 28 	sts	0x2839, r1	; 0x802839 <back>
    1c00:	b0 cf       	rjmp	.-160    	; 0x1b62 <SET1()+0x30>
    1c02:	80 91 36 28 	lds	r24, 0x2836	; 0x802836 <Probe1>
    1c06:	90 91 37 28 	lds	r25, 0x2837	; 0x802837 <Probe1+0x1>
    1c0a:	80 93 e1 28 	sts	0x28E1, r24	; 0x8028e1 <Probe1_actual>
    1c0e:	90 93 e2 28 	sts	0x28E2, r25	; 0x8028e2 <Probe1_actual+0x1>
    1c12:	f3 cf       	rjmp	.-26     	; 0x1bfa <SET1()+0xc8>
    1c14:	80 91 34 28 	lds	r24, 0x2834	; 0x802834 <Probe2>
    1c18:	90 91 35 28 	lds	r25, 0x2835	; 0x802835 <Probe2+0x1>
    1c1c:	80 93 dd 28 	sts	0x28DD, r24	; 0x8028dd <Probe2_actual>
    1c20:	90 93 de 28 	sts	0x28DE, r25	; 0x8028de <Probe2_actual+0x1>
    1c24:	ea cf       	rjmp	.-44     	; 0x1bfa <SET1()+0xc8>
    1c26:	80 91 33 28 	lds	r24, 0x2833	; 0x802833 <Flow_override>
    1c2a:	80 93 b6 28 	sts	0x28B6, r24	; 0x8028b6 <F_override>
    1c2e:	e6 cf       	rjmp	.-52     	; 0x1bfc <SET1()+0xca>
    1c30:	10 92 39 28 	sts	0x2839, r1	; 0x802839 <back>
    1c34:	04 97       	sbiw	r24, 0x04	; 4
    1c36:	09 f0       	breq	.+2      	; 0x1c3a <SET1()+0x108>
    1c38:	94 cf       	rjmp	.-216    	; 0x1b62 <SET1()+0x30>
calibration_steps():
    1c3a:	80 91 d9 28 	lds	r24, 0x28D9	; 0x8028d9 <pcalib>
    1c3e:	81 11       	cpse	r24, r1
    1c40:	05 c0       	rjmp	.+10     	; 0x1c4c <SET1()+0x11a>
    1c42:	91 e0       	ldi	r25, 0x01	; 1
    1c44:	90 93 38 28 	sts	0x2838, r25	; 0x802838 <Pump_calib>
    1c48:	10 92 2d 28 	sts	0x282D, r1	; 0x80282d <flip>
    1c4c:	91 e0       	ldi	r25, 0x01	; 1
    1c4e:	98 0f       	add	r25, r24
    1c50:	90 93 d9 28 	sts	0x28D9, r25	; 0x8028d9 <pcalib>
    1c54:	9f 30       	cpi	r25, 0x0F	; 15
    1c56:	61 f4       	brne	.+24     	; 0x1c70 <SET1()+0x13e>
    1c58:	21 e0       	ldi	r18, 0x01	; 1
    1c5a:	20 93 2d 28 	sts	0x282D, r18	; 0x80282d <flip>
    1c5e:	82 50       	subi	r24, 0x02	; 2
    1c60:	8c 30       	cpi	r24, 0x0C	; 12
    1c62:	58 f4       	brcc	.+22     	; 0x1c7a <SET1()+0x148>
    1c64:	83 e0       	ldi	r24, 0x03	; 3
    1c66:	80 93 d9 28 	sts	0x28D9, r24	; 0x8028d9 <pcalib>
    1c6a:	10 92 2d 28 	sts	0x282D, r1	; 0x80282d <flip>
    1c6e:	79 cf       	rjmp	.-270    	; 0x1b62 <SET1()+0x30>
    1c70:	92 30       	cpi	r25, 0x02	; 2
    1c72:	a9 f7       	brne	.-22     	; 0x1c5e <SET1()+0x12c>
    1c74:	10 92 0b 28 	sts	0x280B, r1	; 0x80280b <calib_count>
    1c78:	74 cf       	rjmp	.-280    	; 0x1b62 <SET1()+0x30>
    1c7a:	90 31       	cpi	r25, 0x10	; 16
    1c7c:	09 f0       	breq	.+2      	; 0x1c80 <SET1()+0x14e>
    1c7e:	71 cf       	rjmp	.-286    	; 0x1b62 <SET1()+0x30>
pump_calculations():
    1c80:	80 90 07 28 	lds	r8, 0x2807	; 0x802807 <Point_dispense>
    1c84:	90 90 08 28 	lds	r9, 0x2808	; 0x802808 <Point_dispense+0x1>
    1c88:	a0 90 09 28 	lds	r10, 0x2809	; 0x802809 <Point_dispense+0x2>
    1c8c:	b0 90 0a 28 	lds	r11, 0x280A	; 0x80280a <Point_dispense+0x3>
    1c90:	c5 01       	movw	r24, r10
    1c92:	b4 01       	movw	r22, r8
    1c94:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <__floatunsisf>
    1c98:	6b 01       	movw	r12, r22
    1c9a:	7c 01       	movw	r14, r24
    1c9c:	60 91 d5 28 	lds	r22, 0x28D5	; 0x8028d5 <Pump_error>
    1ca0:	70 91 d6 28 	lds	r23, 0x28D6	; 0x8028d6 <Pump_error+0x1>
    1ca4:	07 2e       	mov	r0, r23
    1ca6:	00 0c       	add	r0, r0
    1ca8:	88 0b       	sbc	r24, r24
    1caa:	99 0b       	sbc	r25, r25
    1cac:	68 0d       	add	r22, r8
    1cae:	79 1d       	adc	r23, r9
    1cb0:	8a 1d       	adc	r24, r10
    1cb2:	9b 1d       	adc	r25, r11
    1cb4:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <__floatunsisf>
    1cb8:	9b 01       	movw	r18, r22
    1cba:	ac 01       	movw	r20, r24
    1cbc:	c7 01       	movw	r24, r14
    1cbe:	b6 01       	movw	r22, r12
    1cc0:	0e 94 bd 23 	call	0x477a	; 0x477a <__divsf3>
    1cc4:	6b 01       	movw	r12, r22
    1cc6:	7c 01       	movw	r14, r24
    1cc8:	60 91 0c 28 	lds	r22, 0x280C	; 0x80280c <Pump1>
    1ccc:	70 e0       	ldi	r23, 0x00	; 0
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	80 e0       	ldi	r24, 0x00	; 0
    1cd2:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <__floatsisf>
    1cd6:	9b 01       	movw	r18, r22
    1cd8:	ac 01       	movw	r20, r24
    1cda:	c7 01       	movw	r24, r14
    1cdc:	b6 01       	movw	r22, r12
    1cde:	0e 94 5a 22 	call	0x44b4	; 0x44b4 <__mulsf3>
    1ce2:	6b 01       	movw	r12, r22
    1ce4:	7c 01       	movw	r14, r24
_Z5roundIfElRKT_.isra.7():
    1ce6:	20 e0       	ldi	r18, 0x00	; 0
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	a9 01       	movw	r20, r18
    1cec:	0e 94 56 24 	call	0x48ac	; 0x48ac <__gesf2>
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	40 e0       	ldi	r20, 0x00	; 0
    1cf6:	5f e3       	ldi	r21, 0x3F	; 63
    1cf8:	87 fd       	sbrc	r24, 7
    1cfa:	10 c0       	rjmp	.+32     	; 0x1d1c <SET1()+0x1ea>
    1cfc:	c7 01       	movw	r24, r14
    1cfe:	b6 01       	movw	r22, r12
    1d00:	0e 94 59 23 	call	0x46b2	; 0x46b2 <__addsf3>
    1d04:	0e 94 25 24 	call	0x484a	; 0x484a <__fixsfsi>
pump_calculations():
    1d08:	60 93 0c 28 	sts	0x280C, r22	; 0x80280c <Pump1>
calibration_steps():
    1d0c:	a1 de       	rcall	.-702    	; 0x1a50 <eepromclass::Write_memory() [clone .constprop.73]>
    1d0e:	10 92 39 28 	sts	0x2839, r1	; 0x802839 <back>
    1d12:	10 92 38 28 	sts	0x2838, r1	; 0x802838 <Pump_calib>
    1d16:	10 92 d9 28 	sts	0x28D9, r1	; 0x8028d9 <pcalib>
    1d1a:	23 cf       	rjmp	.-442    	; 0x1b62 <SET1()+0x30>
_Z5roundIfElRKT_.isra.7():
    1d1c:	c7 01       	movw	r24, r14
    1d1e:	b6 01       	movw	r22, r12
    1d20:	0e 94 58 23 	call	0x46b0	; 0x46b0 <__subsf3>
    1d24:	ef cf       	rjmp	.-34     	; 0x1d04 <SET1()+0x1d2>

00001d26 <pump_off()>:
pump_off():
    1d26:	80 91 da 28 	lds	r24, 0x28DA	; 0x8028da <sfil_comp>
    1d2a:	90 91 38 28 	lds	r25, 0x2838	; 0x802838 <Pump_calib>
    1d2e:	99 23       	and	r25, r25
    1d30:	c9 f0       	breq	.+50     	; 0x1d64 <pump_off()+0x3e>
    1d32:	88 23       	and	r24, r24
    1d34:	b1 f0       	breq	.+44     	; 0x1d62 <pump_off()+0x3c>
digitalWrite():
    1d36:	61 e0       	ldi	r22, 0x01	; 1
    1d38:	84 e0       	ldi	r24, 0x04	; 4
    1d3a:	0e 94 c6 04 	call	0x98c	; 0x98c <digitalWrite.part.2>
pump_off():
    1d3e:	8c e2       	ldi	r24, 0x2C	; 44
    1d40:	9a e2       	ldi	r25, 0x2A	; 42
    1d42:	0e 94 82 06 	call	0xd04	; 0xd04 <Ticker::start()>
stop():
    1d46:	10 92 47 2a 	sts	0x2A47, r1	; 0x802a47 <pump_Wait>
    1d4a:	10 92 52 2a 	sts	0x2A52, r1	; 0x802a52 <pump_Wait+0xb>
    1d4e:	10 92 53 2a 	sts	0x2A53, r1	; 0x802a53 <pump_Wait+0xc>
    1d52:	10 92 54 2a 	sts	0x2A54, r1	; 0x802a54 <pump_Wait+0xd>
    1d56:	10 92 55 2a 	sts	0x2A55, r1	; 0x802a55 <pump_Wait+0xe>
    1d5a:	10 92 56 2a 	sts	0x2A56, r1	; 0x802a56 <pump_Wait+0xf>
    1d5e:	10 92 57 2a 	sts	0x2A57, r1	; 0x802a57 <pump_Wait+0x10>
pump_off():
    1d62:	08 95       	ret
    1d64:	88 23       	and	r24, r24
    1d66:	e9 f3       	breq	.-6      	; 0x1d62 <pump_off()+0x3c>
digitalWrite():
    1d68:	61 e0       	ldi	r22, 0x01	; 1
    1d6a:	84 e0       	ldi	r24, 0x04	; 4
    1d6c:	0e 94 c6 04 	call	0x98c	; 0x98c <digitalWrite.part.2>
pump_off():
    1d70:	a0 91 2a 28 	lds	r26, 0x282A	; 0x80282a <count>
    1d74:	af 5f       	subi	r26, 0xFF	; 255
    1d76:	a0 93 2a 28 	sts	0x282A, r26	; 0x80282a <count>
    1d7a:	20 91 01 28 	lds	r18, 0x2801	; 0x802801 <VOLUME>
    1d7e:	30 91 02 28 	lds	r19, 0x2802	; 0x802802 <VOLUME+0x1>
    1d82:	40 91 03 28 	lds	r20, 0x2803	; 0x802803 <VOLUME+0x2>
    1d86:	50 91 04 28 	lds	r21, 0x2804	; 0x802804 <VOLUME+0x3>
    1d8a:	b0 e0       	ldi	r27, 0x00	; 0
    1d8c:	0e 94 0e 23 	call	0x461c	; 0x461c <__muluhisi3>
    1d90:	60 93 25 28 	sts	0x2825, r22	; 0x802825 <VOLUME1>
    1d94:	70 93 26 28 	sts	0x2826, r23	; 0x802826 <VOLUME1+0x1>
    1d98:	80 93 27 28 	sts	0x2827, r24	; 0x802827 <VOLUME1+0x2>
    1d9c:	90 93 28 28 	sts	0x2828, r25	; 0x802828 <VOLUME1+0x3>
    1da0:	ce cf       	rjmp	.-100    	; 0x1d3e <pump_off()+0x18>

00001da2 <pump_on()>:
pump_on():
    1da2:	80 91 da 28 	lds	r24, 0x28DA	; 0x8028da <sfil_comp>
    1da6:	90 91 38 28 	lds	r25, 0x2838	; 0x802838 <Pump_calib>
    1daa:	99 23       	and	r25, r25
    1dac:	59 f1       	breq	.+86     	; 0x1e04 <pump_on()+0x62>
    1dae:	88 23       	and	r24, r24
    1db0:	41 f1       	breq	.+80     	; 0x1e02 <pump_on()+0x60>
digitalWrite():
    1db2:	60 e0       	ldi	r22, 0x00	; 0
    1db4:	84 e0       	ldi	r24, 0x04	; 4
    1db6:	0e 94 c6 04 	call	0x98c	; 0x98c <digitalWrite.part.2>
pump_on():
    1dba:	8f e0       	ldi	r24, 0x0F	; 15
    1dbc:	80 93 d9 28 	sts	0x28D9, r24	; 0x8028d9 <pcalib>
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	80 93 e5 28 	sts	0x28E5, r24	; 0x8028e5 <screen>
    1dc6:	80 93 2d 28 	sts	0x282D, r24	; 0x80282d <flip>
stop():
    1dca:	10 92 47 2a 	sts	0x2A47, r1	; 0x802a47 <pump_Wait>
    1dce:	10 92 52 2a 	sts	0x2A52, r1	; 0x802a52 <pump_Wait+0xb>
    1dd2:	10 92 53 2a 	sts	0x2A53, r1	; 0x802a53 <pump_Wait+0xc>
    1dd6:	10 92 54 2a 	sts	0x2A54, r1	; 0x802a54 <pump_Wait+0xd>
    1dda:	10 92 55 2a 	sts	0x2A55, r1	; 0x802a55 <pump_Wait+0xe>
    1dde:	10 92 56 2a 	sts	0x2A56, r1	; 0x802a56 <pump_Wait+0xf>
    1de2:	10 92 57 2a 	sts	0x2A57, r1	; 0x802a57 <pump_Wait+0x10>
    1de6:	10 92 2c 2a 	sts	0x2A2C, r1	; 0x802a2c <pump_on1>
    1dea:	10 92 37 2a 	sts	0x2A37, r1	; 0x802a37 <pump_on1+0xb>
    1dee:	10 92 38 2a 	sts	0x2A38, r1	; 0x802a38 <pump_on1+0xc>
    1df2:	10 92 39 2a 	sts	0x2A39, r1	; 0x802a39 <pump_on1+0xd>
    1df6:	10 92 3a 2a 	sts	0x2A3A, r1	; 0x802a3a <pump_on1+0xe>
    1dfa:	10 92 3b 2a 	sts	0x2A3B, r1	; 0x802a3b <pump_on1+0xf>
    1dfe:	10 92 3c 2a 	sts	0x2A3C, r1	; 0x802a3c <pump_on1+0x10>
pump_on():
    1e02:	08 95       	ret
    1e04:	88 23       	and	r24, r24
    1e06:	e9 f3       	breq	.-6      	; 0x1e02 <pump_on()+0x60>
digitalWrite():
    1e08:	60 e0       	ldi	r22, 0x00	; 0
    1e0a:	84 e0       	ldi	r24, 0x04	; 4
    1e0c:	0e 94 c6 04 	call	0x98c	; 0x98c <digitalWrite.part.2>
pump_on():
    1e10:	90 91 2a 28 	lds	r25, 0x282A	; 0x80282a <count>
    1e14:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
    1e18:	98 17       	cp	r25, r24
    1e1a:	d0 f0       	brcs	.+52     	; 0x1e50 <pump_on()+0xae>
    1e1c:	84 e0       	ldi	r24, 0x04	; 4
    1e1e:	80 93 e6 28 	sts	0x28E6, r24	; 0x8028e6 <tim_disp>
    1e22:	64 ef       	ldi	r22, 0xF4	; 244
    1e24:	71 e0       	ldi	r23, 0x01	; 1
    1e26:	80 e0       	ldi	r24, 0x00	; 0
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	0e 94 a2 06 	call	0xd44	; 0xd44 <Buzzerclass::buzzer_on(unsigned long) [clone .constprop.93]>
stop():
    1e2e:	10 92 47 2a 	sts	0x2A47, r1	; 0x802a47 <pump_Wait>
    1e32:	10 92 52 2a 	sts	0x2A52, r1	; 0x802a52 <pump_Wait+0xb>
    1e36:	10 92 53 2a 	sts	0x2A53, r1	; 0x802a53 <pump_Wait+0xc>
    1e3a:	10 92 54 2a 	sts	0x2A54, r1	; 0x802a54 <pump_Wait+0xd>
    1e3e:	10 92 55 2a 	sts	0x2A55, r1	; 0x802a55 <pump_Wait+0xe>
    1e42:	10 92 56 2a 	sts	0x2A56, r1	; 0x802a56 <pump_Wait+0xf>
    1e46:	10 92 57 2a 	sts	0x2A57, r1	; 0x802a57 <pump_Wait+0x10>
pump_on():
    1e4a:	10 92 e7 28 	sts	0x28E7, r1	; 0x8028e7 <stop_pump>
    1e4e:	cb cf       	rjmp	.-106    	; 0x1de6 <pump_on()+0x44>
    1e50:	20 91 0f 28 	lds	r18, 0x280F	; 0x80280f <Disp_t>
    1e54:	88 ee       	ldi	r24, 0xE8	; 232
    1e56:	93 e0       	ldi	r25, 0x03	; 3
    1e58:	28 9f       	mul	r18, r24
    1e5a:	d0 01       	movw	r26, r0
    1e5c:	29 9f       	mul	r18, r25
    1e5e:	b0 0d       	add	r27, r0
    1e60:	11 24       	eor	r1, r1
    1e62:	bd 01       	movw	r22, r26
    1e64:	0b 2e       	mov	r0, r27
    1e66:	00 0c       	add	r0, r0
    1e68:	88 0b       	sbc	r24, r24
    1e6a:	99 0b       	sbc	r25, r25
interval():
    1e6c:	20 91 50 2a 	lds	r18, 0x2A50	; 0x802a50 <pump_Wait+0x9>
    1e70:	30 91 51 2a 	lds	r19, 0x2A51	; 0x802a51 <pump_Wait+0xa>
    1e74:	23 2b       	or	r18, r19
    1e76:	21 f4       	brne	.+8      	; 0x1e80 <pump_on()+0xde>
    1e78:	28 ee       	ldi	r18, 0xE8	; 232
    1e7a:	33 e0       	ldi	r19, 0x03	; 3
    1e7c:	0e 94 a2 24 	call	0x4944	; 0x4944 <__usmulhisi3>
    1e80:	60 93 48 2a 	sts	0x2A48, r22	; 0x802a48 <pump_Wait+0x1>
    1e84:	70 93 49 2a 	sts	0x2A49, r23	; 0x802a49 <pump_Wait+0x2>
    1e88:	80 93 4a 2a 	sts	0x2A4A, r24	; 0x802a4a <pump_Wait+0x3>
    1e8c:	90 93 4b 2a 	sts	0x2A4B, r25	; 0x802a4b <pump_Wait+0x4>
pump_on():
    1e90:	87 e4       	ldi	r24, 0x47	; 71
    1e92:	9a e2       	ldi	r25, 0x2A	; 42
    1e94:	0e 94 82 06 	call	0xd04	; 0xd04 <Ticker::start()>
    1e98:	a6 cf       	rjmp	.-180    	; 0x1de6 <pump_on()+0x44>

00001e9a <Long_Dispense()>:
Long_Dispense():
    1e9a:	80 91 da 28 	lds	r24, 0x28DA	; 0x8028da <sfil_comp>
    1e9e:	88 23       	and	r24, r24
    1ea0:	d1 f0       	breq	.+52     	; 0x1ed6 <Long_Dispense()+0x3c>
    1ea2:	82 e0       	ldi	r24, 0x02	; 2
    1ea4:	80 93 e6 28 	sts	0x28E6, r24	; 0x8028e6 <tim_disp>
    1ea8:	80 93 e5 28 	sts	0x28E5, r24	; 0x8028e5 <screen>
    1eac:	0e 94 18 06 	call	0xc30	; 0xc30 <millis>
    1eb0:	20 91 23 28 	lds	r18, 0x2823	; 0x802823 <once>
    1eb4:	21 11       	cpse	r18, r1
    1eb6:	0b c0       	rjmp	.+22     	; 0x1ece <Long_Dispense()+0x34>
    1eb8:	60 93 1f 28 	sts	0x281F, r22	; 0x80281f <startTime>
    1ebc:	70 93 20 28 	sts	0x2820, r23	; 0x802820 <startTime+0x1>
    1ec0:	80 93 21 28 	sts	0x2821, r24	; 0x802821 <startTime+0x2>
    1ec4:	90 93 22 28 	sts	0x2822, r25	; 0x802822 <startTime+0x3>
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
    1eca:	80 93 23 28 	sts	0x2823, r24	; 0x802823 <once>
digitalWrite():
    1ece:	61 e0       	ldi	r22, 0x01	; 1
    1ed0:	84 e0       	ldi	r24, 0x04	; 4
    1ed2:	0c 94 c6 04 	jmp	0x98c	; 0x98c <digitalWrite.part.2>
Long_Dispense():
    1ed6:	08 95       	ret

00001ed8 <disp_count()>:
disp_count():
    1ed8:	80 91 e6 28 	lds	r24, 0x28E6	; 0x8028e6 <tim_disp>
    1edc:	81 30       	cpi	r24, 0x01	; 1
    1ede:	b1 f4       	brne	.+44     	; 0x1f0c <disp_count()+0x34>
    1ee0:	a0 91 0c 28 	lds	r26, 0x280C	; 0x80280c <Pump1>
    1ee4:	20 91 01 28 	lds	r18, 0x2801	; 0x802801 <VOLUME>
    1ee8:	30 91 02 28 	lds	r19, 0x2802	; 0x802802 <VOLUME+0x1>
    1eec:	40 91 03 28 	lds	r20, 0x2803	; 0x802803 <VOLUME+0x2>
    1ef0:	50 91 04 28 	lds	r21, 0x2804	; 0x802804 <VOLUME+0x3>
    1ef4:	b0 e0       	ldi	r27, 0x00	; 0
    1ef6:	0e 94 0e 23 	call	0x461c	; 0x461c <__muluhisi3>
    1efa:	60 93 10 28 	sts	0x2810, r22	; 0x802810 <DC>
    1efe:	70 93 11 28 	sts	0x2811, r23	; 0x802811 <DC+0x1>
    1f02:	80 93 12 28 	sts	0x2812, r24	; 0x802812 <DC+0x2>
    1f06:	90 93 13 28 	sts	0x2813, r25	; 0x802813 <DC+0x3>
    1f0a:	08 95       	ret
    1f0c:	82 30       	cpi	r24, 0x02	; 2
    1f0e:	11 f4       	brne	.+4      	; 0x1f14 <disp_count()+0x3c>
    1f10:	10 92 23 28 	sts	0x2823, r1	; 0x802823 <once>
    1f14:	08 95       	ret

00001f16 <LiquidCrystal_I2C::write4bits(unsigned char)>:
write4bits():
    1f16:	0f 93       	push	r16
    1f18:	1f 93       	push	r17
    1f1a:	cf 93       	push	r28
    1f1c:	8c 01       	movw	r16, r24
    1f1e:	c6 2f       	mov	r28, r22
    1f20:	00 d8       	rcall	.-4096   	; 0xf22 <LiquidCrystal_I2C::expanderWrite(unsigned char)>
pulseEnable():
    1f22:	6c 2f       	mov	r22, r28
    1f24:	64 60       	ori	r22, 0x04	; 4
    1f26:	c8 01       	movw	r24, r16
    1f28:	0e 94 91 07 	call	0xf22	; 0xf22 <LiquidCrystal_I2C::expanderWrite(unsigned char)>
    1f2c:	6c 2f       	mov	r22, r28
    1f2e:	6b 7f       	andi	r22, 0xFB	; 251
    1f30:	c8 01       	movw	r24, r16
    1f32:	0e 94 91 07 	call	0xf22	; 0xf22 <LiquidCrystal_I2C::expanderWrite(unsigned char)>
delayMicroseconds():
    1f36:	83 ec       	ldi	r24, 0xC3	; 195
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	01 97       	sbiw	r24, 0x01	; 1
    1f3c:	f1 f7       	brne	.-4      	; 0x1f3a <LiquidCrystal_I2C::write4bits(unsigned char)+0x24>
write4bits():
    1f3e:	cf 91       	pop	r28
    1f40:	1f 91       	pop	r17
    1f42:	0f 91       	pop	r16
    1f44:	08 95       	ret

00001f46 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>:
send():
    1f46:	0f 93       	push	r16
    1f48:	1f 93       	push	r17
    1f4a:	cf 93       	push	r28
    1f4c:	df 93       	push	r29
    1f4e:	8c 01       	movw	r16, r24
    1f50:	d6 2f       	mov	r29, r22
    1f52:	c4 2f       	mov	r28, r20
    1f54:	60 7f       	andi	r22, 0xF0	; 240
    1f56:	64 2b       	or	r22, r20
    1f58:	de df       	rcall	.-68     	; 0x1f16 <LiquidCrystal_I2C::write4bits(unsigned char)>
    1f5a:	80 e1       	ldi	r24, 0x10	; 16
    1f5c:	d8 9f       	mul	r29, r24
    1f5e:	b0 01       	movw	r22, r0
    1f60:	11 24       	eor	r1, r1
    1f62:	6c 2b       	or	r22, r28
    1f64:	c8 01       	movw	r24, r16
    1f66:	df 91       	pop	r29
    1f68:	cf 91       	pop	r28
    1f6a:	1f 91       	pop	r17
    1f6c:	0f 91       	pop	r16
    1f6e:	d3 cf       	rjmp	.-90     	; 0x1f16 <LiquidCrystal_I2C::write4bits(unsigned char)>

00001f70 <LiquidCrystal_I2C::clear() [clone .constprop.80]>:
command():
    1f70:	40 e0       	ldi	r20, 0x00	; 0
    1f72:	61 e0       	ldi	r22, 0x01	; 1
    1f74:	87 e3       	ldi	r24, 0x37	; 55
    1f76:	9b e2       	ldi	r25, 0x2B	; 43
    1f78:	e6 df       	rcall	.-52     	; 0x1f46 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
delayMicroseconds():
    1f7a:	8b e3       	ldi	r24, 0x3B	; 59
    1f7c:	9f e1       	ldi	r25, 0x1F	; 31
    1f7e:	01 97       	sbiw	r24, 0x01	; 1
    1f80:	f1 f7       	brne	.-4      	; 0x1f7e <LiquidCrystal_I2C::clear() [clone .constprop.80]+0xe>
clear():
    1f82:	08 95       	ret

00001f84 <Dispense_start()>:
Dispense_start():
    1f84:	f5 df       	rcall	.-22     	; 0x1f70 <LiquidCrystal_I2C::clear() [clone .constprop.80]>
    1f86:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <level_detect>
    1f8a:	83 30       	cpi	r24, 0x03	; 3
    1f8c:	09 f0       	breq	.+2      	; 0x1f90 <Dispense_start()+0xc>
    1f8e:	83 c0       	rjmp	.+262    	; 0x2096 <Dispense_start()+0x112>
    1f90:	82 e0       	ldi	r24, 0x02	; 2
    1f92:	80 93 e5 28 	sts	0x28E5, r24	; 0x8028e5 <screen>
    1f96:	08 95       	ret
    1f98:	80 91 d9 28 	lds	r24, 0x28D9	; 0x8028d9 <pcalib>
    1f9c:	82 30       	cpi	r24, 0x02	; 2
    1f9e:	08 f4       	brcc	.+2      	; 0x1fa2 <Dispense_start()+0x1e>
    1fa0:	7e c0       	rjmp	.+252    	; 0x209e <Dispense_start()+0x11a>
    1fa2:	80 91 da 28 	lds	r24, 0x28DA	; 0x8028da <sfil_comp>
    1fa6:	88 23       	and	r24, r24
    1fa8:	09 f4       	brne	.+2      	; 0x1fac <Dispense_start()+0x28>
    1faa:	79 c0       	rjmp	.+242    	; 0x209e <Dispense_start()+0x11a>
    1fac:	a0 91 0c 28 	lds	r26, 0x280C	; 0x80280c <Pump1>
    1fb0:	20 91 07 28 	lds	r18, 0x2807	; 0x802807 <Point_dispense>
    1fb4:	30 91 08 28 	lds	r19, 0x2808	; 0x802808 <Point_dispense+0x1>
    1fb8:	40 91 09 28 	lds	r20, 0x2809	; 0x802809 <Point_dispense+0x2>
    1fbc:	50 91 0a 28 	lds	r21, 0x280A	; 0x80280a <Point_dispense+0x3>
    1fc0:	b0 e0       	ldi	r27, 0x00	; 0
    1fc2:	0e 94 0e 23 	call	0x461c	; 0x461c <__muluhisi3>
    1fc6:	60 93 10 28 	sts	0x2810, r22	; 0x802810 <DC>
    1fca:	70 93 11 28 	sts	0x2811, r23	; 0x802811 <DC+0x1>
    1fce:	80 93 12 28 	sts	0x2812, r24	; 0x802812 <DC+0x2>
    1fd2:	90 93 13 28 	sts	0x2813, r25	; 0x802813 <DC+0x3>
interval():
    1fd6:	20 91 35 2a 	lds	r18, 0x2A35	; 0x802a35 <pump_on1+0x9>
    1fda:	30 91 36 2a 	lds	r19, 0x2A36	; 0x802a36 <pump_on1+0xa>
    1fde:	23 2b       	or	r18, r19
    1fe0:	31 f4       	brne	.+12     	; 0x1fee <Dispense_start()+0x6a>
    1fe2:	a8 ee       	ldi	r26, 0xE8	; 232
    1fe4:	b3 e0       	ldi	r27, 0x03	; 3
    1fe6:	9b 01       	movw	r18, r22
    1fe8:	ac 01       	movw	r20, r24
    1fea:	0e 94 0e 23 	call	0x461c	; 0x461c <__muluhisi3>
    1fee:	60 93 2d 2a 	sts	0x2A2D, r22	; 0x802a2d <pump_on1+0x1>
    1ff2:	70 93 2e 2a 	sts	0x2A2E, r23	; 0x802a2e <pump_on1+0x2>
    1ff6:	80 93 2f 2a 	sts	0x2A2F, r24	; 0x802a2f <pump_on1+0x3>
    1ffa:	90 93 30 2a 	sts	0x2A30, r25	; 0x802a30 <pump_on1+0x4>
Dispense_start():
    1ffe:	82 e0       	ldi	r24, 0x02	; 2
    2000:	80 93 e5 28 	sts	0x28E5, r24	; 0x8028e5 <screen>
    2004:	85 e0       	ldi	r24, 0x05	; 5
    2006:	80 93 e6 28 	sts	0x28E6, r24	; 0x8028e6 <tim_disp>
    200a:	20 91 0f 28 	lds	r18, 0x280F	; 0x80280f <Disp_t>
    200e:	88 ee       	ldi	r24, 0xE8	; 232
    2010:	93 e0       	ldi	r25, 0x03	; 3
    2012:	28 9f       	mul	r18, r24
    2014:	d0 01       	movw	r26, r0
    2016:	29 9f       	mul	r18, r25
    2018:	b0 0d       	add	r27, r0
    201a:	11 24       	eor	r1, r1
    201c:	bd 01       	movw	r22, r26
    201e:	0b 2e       	mov	r0, r27
    2020:	00 0c       	add	r0, r0
    2022:	88 0b       	sbc	r24, r24
    2024:	99 0b       	sbc	r25, r25
interval():
    2026:	20 91 50 2a 	lds	r18, 0x2A50	; 0x802a50 <pump_Wait+0x9>
    202a:	30 91 51 2a 	lds	r19, 0x2A51	; 0x802a51 <pump_Wait+0xa>
    202e:	23 2b       	or	r18, r19
    2030:	21 f4       	brne	.+8      	; 0x203a <Dispense_start()+0xb6>
    2032:	28 ee       	ldi	r18, 0xE8	; 232
    2034:	33 e0       	ldi	r19, 0x03	; 3
    2036:	0e 94 a2 24 	call	0x4944	; 0x4944 <__usmulhisi3>
    203a:	60 93 48 2a 	sts	0x2A48, r22	; 0x802a48 <pump_Wait+0x1>
    203e:	70 93 49 2a 	sts	0x2A49, r23	; 0x802a49 <pump_Wait+0x2>
    2042:	80 93 4a 2a 	sts	0x2A4A, r24	; 0x802a4a <pump_Wait+0x3>
    2046:	90 93 4b 2a 	sts	0x2A4B, r25	; 0x802a4b <pump_Wait+0x4>
Dispense_start():
    204a:	87 e4       	ldi	r24, 0x47	; 71
    204c:	9a e2       	ldi	r25, 0x2A	; 42
    204e:	0c 94 82 06 	jmp	0xd04	; 0xd04 <Ticker::start()>
    2052:	0e 94 18 06 	call	0xc30	; 0xc30 <millis>
    2056:	60 93 1b 28 	sts	0x281B, r22	; 0x80281b <Endtime>
    205a:	70 93 1c 28 	sts	0x281C, r23	; 0x80281c <Endtime+0x1>
    205e:	80 93 1d 28 	sts	0x281D, r24	; 0x80281d <Endtime+0x2>
    2062:	90 93 1e 28 	sts	0x281E, r25	; 0x80281e <Endtime+0x3>
    2066:	10 92 29 28 	sts	0x2829, r1	; 0x802829 <i>
    206a:	80 91 06 28 	lds	r24, 0x2806	; 0x802806 <Stop_cycle>
    206e:	81 11       	cpse	r24, r1
    2070:	10 92 c9 28 	sts	0x28C9, r1	; 0x8028c9 <Level_var>
    2074:	82 e0       	ldi	r24, 0x02	; 2
    2076:	80 93 e5 28 	sts	0x28E5, r24	; 0x8028e5 <screen>
digitalWrite():
    207a:	60 e0       	ldi	r22, 0x00	; 0
    207c:	84 e0       	ldi	r24, 0x04	; 4
    207e:	0e 94 c6 04 	call	0x98c	; 0x98c <digitalWrite.part.2>
Dispense_start():
    2082:	83 e0       	ldi	r24, 0x03	; 3
    2084:	80 93 e6 28 	sts	0x28E6, r24	; 0x8028e6 <tim_disp>
    2088:	27 df       	rcall	.-434    	; 0x1ed8 <disp_count()>
    208a:	68 ee       	ldi	r22, 0xE8	; 232
    208c:	73 e0       	ldi	r23, 0x03	; 3
    208e:	80 e0       	ldi	r24, 0x00	; 0
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	0c 94 a2 06 	jmp	0xd44	; 0xd44 <Buzzerclass::buzzer_on(unsigned long) [clone .constprop.93]>
    2096:	90 91 38 28 	lds	r25, 0x2838	; 0x802838 <Pump_calib>
    209a:	91 11       	cpse	r25, r1
    209c:	7d cf       	rjmp	.-262    	; 0x1f98 <Dispense_start()+0x14>
    209e:	80 91 e6 28 	lds	r24, 0x28E6	; 0x8028e6 <tim_disp>
    20a2:	82 30       	cpi	r24, 0x02	; 2
    20a4:	b1 f2       	breq	.-84     	; 0x2052 <Dispense_start()+0xce>
    20a6:	20 91 e7 28 	lds	r18, 0x28E7	; 0x8028e7 <stop_pump>
    20aa:	21 11       	cpse	r18, r1
    20ac:	6f c0       	rjmp	.+222    	; 0x218c <Dispense_start()+0x208>
    20ae:	91 11       	cpse	r25, r1
    20b0:	6f c0       	rjmp	.+222    	; 0x2190 <Dispense_start()+0x20c>
    20b2:	80 91 da 28 	lds	r24, 0x28DA	; 0x8028da <sfil_comp>
    20b6:	88 23       	and	r24, r24
    20b8:	09 f4       	brne	.+2      	; 0x20bc <Dispense_start()+0x138>
    20ba:	6a c0       	rjmp	.+212    	; 0x2190 <Dispense_start()+0x20c>
    20bc:	10 92 29 28 	sts	0x2829, r1	; 0x802829 <i>
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	80 93 e6 28 	sts	0x28E6, r24	; 0x8028e6 <tim_disp>
    20c6:	10 92 2a 28 	sts	0x282A, r1	; 0x80282a <count>
    20ca:	82 e0       	ldi	r24, 0x02	; 2
    20cc:	80 93 e5 28 	sts	0x28E5, r24	; 0x8028e5 <screen>
    20d0:	80 91 06 28 	lds	r24, 0x2806	; 0x802806 <Stop_cycle>
    20d4:	81 11       	cpse	r24, r1
    20d6:	10 92 c9 28 	sts	0x28C9, r1	; 0x8028c9 <Level_var>
    20da:	fe de       	rcall	.-516    	; 0x1ed8 <disp_count()>
    20dc:	20 91 10 28 	lds	r18, 0x2810	; 0x802810 <DC>
    20e0:	30 91 11 28 	lds	r19, 0x2811	; 0x802811 <DC+0x1>
    20e4:	40 91 12 28 	lds	r20, 0x2812	; 0x802812 <DC+0x2>
    20e8:	50 91 13 28 	lds	r21, 0x2813	; 0x802813 <DC+0x3>
interval():
    20ec:	80 91 35 2a 	lds	r24, 0x2A35	; 0x802a35 <pump_on1+0x9>
    20f0:	90 91 36 2a 	lds	r25, 0x2A36	; 0x802a36 <pump_on1+0xa>
    20f4:	89 2b       	or	r24, r25
    20f6:	31 f4       	brne	.+12     	; 0x2104 <Dispense_start()+0x180>
    20f8:	a8 ee       	ldi	r26, 0xE8	; 232
    20fa:	b3 e0       	ldi	r27, 0x03	; 3
    20fc:	0e 94 0e 23 	call	0x461c	; 0x461c <__muluhisi3>
    2100:	9b 01       	movw	r18, r22
    2102:	ac 01       	movw	r20, r24
    2104:	20 93 2d 2a 	sts	0x2A2D, r18	; 0x802a2d <pump_on1+0x1>
    2108:	30 93 2e 2a 	sts	0x2A2E, r19	; 0x802a2e <pump_on1+0x2>
    210c:	40 93 2f 2a 	sts	0x2A2F, r20	; 0x802a2f <pump_on1+0x3>
    2110:	50 93 30 2a 	sts	0x2A30, r21	; 0x802a30 <pump_on1+0x4>
Dispense_start():
    2114:	20 91 0f 28 	lds	r18, 0x280F	; 0x80280f <Disp_t>
    2118:	88 ee       	ldi	r24, 0xE8	; 232
    211a:	93 e0       	ldi	r25, 0x03	; 3
    211c:	28 9f       	mul	r18, r24
    211e:	d0 01       	movw	r26, r0
    2120:	29 9f       	mul	r18, r25
    2122:	b0 0d       	add	r27, r0
    2124:	11 24       	eor	r1, r1
    2126:	bd 01       	movw	r22, r26
    2128:	0b 2e       	mov	r0, r27
    212a:	00 0c       	add	r0, r0
    212c:	88 0b       	sbc	r24, r24
    212e:	99 0b       	sbc	r25, r25
interval():
    2130:	20 91 50 2a 	lds	r18, 0x2A50	; 0x802a50 <pump_Wait+0x9>
    2134:	30 91 51 2a 	lds	r19, 0x2A51	; 0x802a51 <pump_Wait+0xa>
    2138:	23 2b       	or	r18, r19
    213a:	21 f4       	brne	.+8      	; 0x2144 <Dispense_start()+0x1c0>
    213c:	28 ee       	ldi	r18, 0xE8	; 232
    213e:	33 e0       	ldi	r19, 0x03	; 3
    2140:	0e 94 a2 24 	call	0x4944	; 0x4944 <__usmulhisi3>
    2144:	60 93 48 2a 	sts	0x2A48, r22	; 0x802a48 <pump_Wait+0x1>
    2148:	70 93 49 2a 	sts	0x2A49, r23	; 0x802a49 <pump_Wait+0x2>
    214c:	80 93 4a 2a 	sts	0x2A4A, r24	; 0x802a4a <pump_Wait+0x3>
    2150:	90 93 4b 2a 	sts	0x2A4B, r25	; 0x802a4b <pump_Wait+0x4>
Dispense_start():
    2154:	87 e4       	ldi	r24, 0x47	; 71
    2156:	9a e2       	ldi	r25, 0x2A	; 42
    2158:	0e 94 82 06 	call	0xd04	; 0xd04 <Ticker::start()>
    215c:	81 e0       	ldi	r24, 0x01	; 1
    215e:	80 93 e7 28 	sts	0x28E7, r24	; 0x8028e7 <stop_pump>
    2162:	08 95       	ret
    2164:	10 92 e7 28 	sts	0x28E7, r1	; 0x8028e7 <stop_pump>
    2168:	82 e0       	ldi	r24, 0x02	; 2
    216a:	80 93 e5 28 	sts	0x28E5, r24	; 0x8028e5 <screen>
digitalWrite():
    216e:	60 e0       	ldi	r22, 0x00	; 0
    2170:	84 e0       	ldi	r24, 0x04	; 4
    2172:	0e 94 c6 04 	call	0x98c	; 0x98c <digitalWrite.part.2>
Dispense_start():
    2176:	84 e0       	ldi	r24, 0x04	; 4
    2178:	80 93 e6 28 	sts	0x28E6, r24	; 0x8028e6 <tim_disp>
    217c:	64 ef       	ldi	r22, 0xF4	; 244
    217e:	71 e0       	ldi	r23, 0x01	; 1
    2180:	80 e0       	ldi	r24, 0x00	; 0
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	0e 94 a2 06 	call	0xd44	; 0xd44 <Buzzerclass::buzzer_on(unsigned long) [clone .constprop.93]>
    2188:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <Dispenseclass::ticker_stop() [clone .constprop.89]>
    218c:	81 30       	cpi	r24, 0x01	; 1
    218e:	51 f3       	breq	.-44     	; 0x2164 <Dispense_start()+0x1e0>
    2190:	08 95       	ret

00002192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>:
setCursor():
    2192:	cf 93       	push	r28
    2194:	df 93       	push	r29
    2196:	cd b7       	in	r28, 0x3d	; 61
    2198:	de b7       	in	r29, 0x3e	; 62
    219a:	28 97       	sbiw	r28, 0x08	; 8
    219c:	cd bf       	out	0x3d, r28	; 61
    219e:	de bf       	out	0x3e, r29	; 62
    21a0:	98 e0       	ldi	r25, 0x08	; 8
    21a2:	ea e4       	ldi	r30, 0x4A	; 74
    21a4:	fd e8       	ldi	r31, 0x8D	; 141
    21a6:	de 01       	movw	r26, r28
    21a8:	11 96       	adiw	r26, 0x01	; 1
    21aa:	01 90       	ld	r0, Z+
    21ac:	0d 92       	st	X+, r0
    21ae:	9a 95       	dec	r25
    21b0:	e1 f7       	brne	.-8      	; 0x21aa <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]+0x18>
    21b2:	90 91 3f 2b 	lds	r25, 0x2B3F	; 0x802b3f <lcd+0x8>
    21b6:	96 17       	cp	r25, r22
    21b8:	08 f4       	brcc	.+2      	; 0x21bc <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]+0x2a>
    21ba:	6f ef       	ldi	r22, 0xFF	; 255
    21bc:	26 2f       	mov	r18, r22
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	22 0f       	add	r18, r18
    21c2:	33 1f       	adc	r19, r19
    21c4:	41 e0       	ldi	r20, 0x01	; 1
    21c6:	50 e0       	ldi	r21, 0x00	; 0
    21c8:	4c 0f       	add	r20, r28
    21ca:	5d 1f       	adc	r21, r29
    21cc:	24 0f       	add	r18, r20
    21ce:	35 1f       	adc	r19, r21
    21d0:	f9 01       	movw	r30, r18
    21d2:	60 81       	ld	r22, Z
    21d4:	68 0f       	add	r22, r24
    21d6:	60 68       	ori	r22, 0x80	; 128
command():
    21d8:	40 e0       	ldi	r20, 0x00	; 0
    21da:	87 e3       	ldi	r24, 0x37	; 55
    21dc:	9b e2       	ldi	r25, 0x2B	; 43
setCursor():
    21de:	28 96       	adiw	r28, 0x08	; 8
    21e0:	cd bf       	out	0x3d, r28	; 61
    21e2:	de bf       	out	0x3e, r29	; 62
    21e4:	df 91       	pop	r29
    21e6:	cf 91       	pop	r28
command():
    21e8:	ae ce       	rjmp	.-676    	; 0x1f46 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>

000021ea <LiquidCrystal_I2C::write(unsigned char)>:
write():
    21ea:	41 e0       	ldi	r20, 0x01	; 1
    21ec:	ac de       	rcall	.-680    	; 0x1f46 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
    21ee:	81 e0       	ldi	r24, 0x01	; 1
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	08 95       	ret

000021f4 <LiquidCrystal_I2C::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.37]>:
begin():
    21f4:	cf 93       	push	r28
    21f6:	df 93       	push	r29
    21f8:	82 30       	cpi	r24, 0x02	; 2
    21fa:	28 f0       	brcs	.+10     	; 0x2206 <LiquidCrystal_I2C::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.37]+0x12>
    21fc:	90 91 3c 2b 	lds	r25, 0x2B3C	; 0x802b3c <lcd+0x5>
    2200:	98 60       	ori	r25, 0x08	; 8
    2202:	90 93 3c 2b 	sts	0x2B3C, r25	; 0x802b3c <lcd+0x5>
    2206:	80 93 3f 2b 	sts	0x2B3F, r24	; 0x802b3f <lcd+0x8>
    220a:	62 e3       	ldi	r22, 0x32	; 50
    220c:	70 e0       	ldi	r23, 0x00	; 0
    220e:	80 e0       	ldi	r24, 0x00	; 0
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <delay>
    2216:	60 91 42 2b 	lds	r22, 0x2B42	; 0x802b42 <lcd+0xb>
    221a:	87 e3       	ldi	r24, 0x37	; 55
    221c:	9b e2       	ldi	r25, 0x2B	; 43
    221e:	0e 94 91 07 	call	0xf22	; 0xf22 <LiquidCrystal_I2C::expanderWrite(unsigned char)>
    2222:	68 ee       	ldi	r22, 0xE8	; 232
    2224:	73 e0       	ldi	r23, 0x03	; 3
    2226:	80 e0       	ldi	r24, 0x00	; 0
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <delay>
    222e:	60 e3       	ldi	r22, 0x30	; 48
    2230:	87 e3       	ldi	r24, 0x37	; 55
    2232:	9b e2       	ldi	r25, 0x2B	; 43
    2234:	70 de       	rcall	.-800    	; 0x1f16 <LiquidCrystal_I2C::write4bits(unsigned char)>
delayMicroseconds():
    2236:	cb e4       	ldi	r28, 0x4B	; 75
    2238:	d6 e4       	ldi	r29, 0x46	; 70
    223a:	ce 01       	movw	r24, r28
    223c:	01 97       	sbiw	r24, 0x01	; 1
    223e:	f1 f7       	brne	.-4      	; 0x223c <LiquidCrystal_I2C::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.37]+0x48>
begin():
    2240:	60 e3       	ldi	r22, 0x30	; 48
    2242:	87 e3       	ldi	r24, 0x37	; 55
    2244:	9b e2       	ldi	r25, 0x2B	; 43
    2246:	67 de       	rcall	.-818    	; 0x1f16 <LiquidCrystal_I2C::write4bits(unsigned char)>
delayMicroseconds():
    2248:	21 97       	sbiw	r28, 0x01	; 1
    224a:	f1 f7       	brne	.-4      	; 0x2248 <LiquidCrystal_I2C::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.37]+0x54>
begin():
    224c:	60 e3       	ldi	r22, 0x30	; 48
    224e:	87 e3       	ldi	r24, 0x37	; 55
    2250:	9b e2       	ldi	r25, 0x2B	; 43
    2252:	61 de       	rcall	.-830    	; 0x1f16 <LiquidCrystal_I2C::write4bits(unsigned char)>
delayMicroseconds():
    2254:	83 e5       	ldi	r24, 0x53	; 83
    2256:	92 e0       	ldi	r25, 0x02	; 2
    2258:	01 97       	sbiw	r24, 0x01	; 1
    225a:	f1 f7       	brne	.-4      	; 0x2258 <LiquidCrystal_I2C::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.37]+0x64>
begin():
    225c:	60 e2       	ldi	r22, 0x20	; 32
    225e:	87 e3       	ldi	r24, 0x37	; 55
    2260:	9b e2       	ldi	r25, 0x2B	; 43
    2262:	59 de       	rcall	.-846    	; 0x1f16 <LiquidCrystal_I2C::write4bits(unsigned char)>
    2264:	60 91 3c 2b 	lds	r22, 0x2B3C	; 0x802b3c <lcd+0x5>
    2268:	60 62       	ori	r22, 0x20	; 32
command():
    226a:	40 e0       	ldi	r20, 0x00	; 0
    226c:	87 e3       	ldi	r24, 0x37	; 55
    226e:	9b e2       	ldi	r25, 0x2B	; 43
    2270:	6a de       	rcall	.-812    	; 0x1f46 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
begin():
    2272:	84 e0       	ldi	r24, 0x04	; 4
    2274:	80 93 3d 2b 	sts	0x2B3D, r24	; 0x802b3d <lcd+0x6>
command():
    2278:	40 e0       	ldi	r20, 0x00	; 0
    227a:	6c e0       	ldi	r22, 0x0C	; 12
    227c:	87 e3       	ldi	r24, 0x37	; 55
    227e:	9b e2       	ldi	r25, 0x2B	; 43
    2280:	62 de       	rcall	.-828    	; 0x1f46 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
begin():
    2282:	76 de       	rcall	.-788    	; 0x1f70 <LiquidCrystal_I2C::clear() [clone .constprop.80]>
    2284:	82 e0       	ldi	r24, 0x02	; 2
    2286:	80 93 3e 2b 	sts	0x2B3E, r24	; 0x802b3e <lcd+0x7>
command():
    228a:	40 e0       	ldi	r20, 0x00	; 0
    228c:	66 e0       	ldi	r22, 0x06	; 6
    228e:	87 e3       	ldi	r24, 0x37	; 55
    2290:	9b e2       	ldi	r25, 0x2B	; 43
    2292:	59 de       	rcall	.-846    	; 0x1f46 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
    2294:	40 e0       	ldi	r20, 0x00	; 0
    2296:	62 e0       	ldi	r22, 0x02	; 2
    2298:	87 e3       	ldi	r24, 0x37	; 55
    229a:	9b e2       	ldi	r25, 0x2B	; 43
    229c:	54 de       	rcall	.-856    	; 0x1f46 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
delayMicroseconds():
    229e:	8b e3       	ldi	r24, 0x3B	; 59
    22a0:	9f e1       	ldi	r25, 0x1F	; 31
    22a2:	01 97       	sbiw	r24, 0x01	; 1
    22a4:	f1 f7       	brne	.-4      	; 0x22a2 <LiquidCrystal_I2C::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.37]+0xae>
begin():
    22a6:	df 91       	pop	r29
    22a8:	cf 91       	pop	r28
    22aa:	08 95       	ret

000022ac <Print::write(char const*) [clone .part.2] [clone .constprop.70]>:
_ZN5Print5writeEPKc.part.2():
    22ac:	fc 01       	movw	r30, r24
    22ae:	01 90       	ld	r0, Z+
    22b0:	00 20       	and	r0, r0
    22b2:	e9 f7       	brne	.-6      	; 0x22ae <Print::write(char const*) [clone .part.2] [clone .constprop.70]+0x2>
    22b4:	31 97       	sbiw	r30, 0x01	; 1
    22b6:	af 01       	movw	r20, r30
    22b8:	48 1b       	sub	r20, r24
    22ba:	59 0b       	sbc	r21, r25
    22bc:	bc 01       	movw	r22, r24
    22be:	87 e3       	ldi	r24, 0x37	; 55
    22c0:	9b e2       	ldi	r25, 0x2B	; 43
    22c2:	0c 94 fb 03 	jmp	0x7f6	; 0x7f6 <Print::write(unsigned char const*, unsigned int)>

000022c6 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.66]>:
printNumber():
    22c6:	8f 92       	push	r8
    22c8:	9f 92       	push	r9
    22ca:	af 92       	push	r10
    22cc:	bf 92       	push	r11
    22ce:	0f 93       	push	r16
    22d0:	1f 93       	push	r17
    22d2:	cf 93       	push	r28
    22d4:	df 93       	push	r29
    22d6:	cd b7       	in	r28, 0x3d	; 61
    22d8:	de b7       	in	r29, 0x3e	; 62
    22da:	a1 97       	sbiw	r28, 0x21	; 33
    22dc:	cd bf       	out	0x3d, r28	; 61
    22de:	de bf       	out	0x3e, r29	; 62
    22e0:	19 a2       	std	Y+33, r1	; 0x21
    22e2:	42 30       	cpi	r20, 0x02	; 2
    22e4:	08 f4       	brcc	.+2      	; 0x22e8 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.66]+0x22>
    22e6:	4a e0       	ldi	r20, 0x0A	; 10
    22e8:	8e 01       	movw	r16, r28
    22ea:	0f 5d       	subi	r16, 0xDF	; 223
    22ec:	1f 4f       	sbci	r17, 0xFF	; 255
    22ee:	84 2e       	mov	r8, r20
    22f0:	91 2c       	mov	r9, r1
    22f2:	b1 2c       	mov	r11, r1
    22f4:	a1 2c       	mov	r10, r1
    22f6:	a5 01       	movw	r20, r10
    22f8:	94 01       	movw	r18, r8
    22fa:	0e 94 5e 24 	call	0x48bc	; 0x48bc <__udivmodsi4>
    22fe:	e6 2f       	mov	r30, r22
    2300:	b9 01       	movw	r22, r18
    2302:	ca 01       	movw	r24, r20
    2304:	ea 30       	cpi	r30, 0x0A	; 10
    2306:	d4 f4       	brge	.+52     	; 0x233c <Print::printNumber(unsigned long, unsigned char) [clone .constprop.66]+0x76>
    2308:	e0 5d       	subi	r30, 0xD0	; 208
    230a:	d8 01       	movw	r26, r16
    230c:	ee 93       	st	-X, r30
    230e:	8d 01       	movw	r16, r26
    2310:	23 2b       	or	r18, r19
    2312:	24 2b       	or	r18, r20
    2314:	25 2b       	or	r18, r21
    2316:	79 f7       	brne	.-34     	; 0x22f6 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.66]+0x30>
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	80 e0       	ldi	r24, 0x00	; 0
write():
    231c:	10 97       	sbiw	r26, 0x00	; 0
    231e:	11 f0       	breq	.+4      	; 0x2324 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.66]+0x5e>
    2320:	cd 01       	movw	r24, r26
    2322:	c4 df       	rcall	.-120    	; 0x22ac <Print::write(char const*) [clone .part.2] [clone .constprop.70]>
printNumber():
    2324:	a1 96       	adiw	r28, 0x21	; 33
    2326:	cd bf       	out	0x3d, r28	; 61
    2328:	de bf       	out	0x3e, r29	; 62
    232a:	df 91       	pop	r29
    232c:	cf 91       	pop	r28
    232e:	1f 91       	pop	r17
    2330:	0f 91       	pop	r16
    2332:	bf 90       	pop	r11
    2334:	af 90       	pop	r10
    2336:	9f 90       	pop	r9
    2338:	8f 90       	pop	r8
    233a:	08 95       	ret
    233c:	e9 5c       	subi	r30, 0xC9	; 201
    233e:	e5 cf       	rjmp	.-54     	; 0x230a <Print::printNumber(unsigned long, unsigned char) [clone .constprop.66]+0x44>

00002340 <Print::print(int, int) [clone .constprop.62]>:
print():
    2340:	cf 92       	push	r12
    2342:	df 92       	push	r13
    2344:	ef 92       	push	r14
    2346:	ff 92       	push	r15
    2348:	6c 01       	movw	r12, r24
    234a:	99 0f       	add	r25, r25
    234c:	ee 08       	sbc	r14, r14
    234e:	ff 08       	sbc	r15, r15
    2350:	f7 fe       	sbrs	r15, 7
    2352:	14 c0       	rjmp	.+40     	; 0x237c <Print::print(int, int) [clone .constprop.62]+0x3c>
write():
    2354:	41 e0       	ldi	r20, 0x01	; 1
    2356:	6d e2       	ldi	r22, 0x2D	; 45
    2358:	87 e3       	ldi	r24, 0x37	; 55
    235a:	9b e2       	ldi	r25, 0x2B	; 43
    235c:	f4 dd       	rcall	.-1048   	; 0x1f46 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
print():
    235e:	66 27       	eor	r22, r22
    2360:	77 27       	eor	r23, r23
    2362:	cb 01       	movw	r24, r22
    2364:	6c 19       	sub	r22, r12
    2366:	7d 09       	sbc	r23, r13
    2368:	8e 09       	sbc	r24, r14
    236a:	9f 09       	sbc	r25, r15
    236c:	4a e0       	ldi	r20, 0x0A	; 10
    236e:	ab df       	rcall	.-170    	; 0x22c6 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.66]>
    2370:	01 96       	adiw	r24, 0x01	; 1
    2372:	ff 90       	pop	r15
    2374:	ef 90       	pop	r14
    2376:	df 90       	pop	r13
    2378:	cf 90       	pop	r12
    237a:	08 95       	ret
    237c:	4a e0       	ldi	r20, 0x0A	; 10
    237e:	c7 01       	movw	r24, r14
    2380:	b6 01       	movw	r22, r12
    2382:	ff 90       	pop	r15
    2384:	ef 90       	pop	r14
    2386:	df 90       	pop	r13
    2388:	cf 90       	pop	r12
    238a:	9d cf       	rjmp	.-198    	; 0x22c6 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.66]>

0000238c <Print::print(unsigned char, int) [clone .constprop.58]>:
    238c:	68 2f       	mov	r22, r24
    238e:	70 e0       	ldi	r23, 0x00	; 0
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	80 e0       	ldi	r24, 0x00	; 0
    2394:	4a e0       	ldi	r20, 0x0A	; 10
    2396:	97 cf       	rjmp	.-210    	; 0x22c6 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.66]>

00002398 <Print::print(char const*) [clone .constprop.68]>:
write():
    2398:	00 97       	sbiw	r24, 0x00	; 0
    239a:	09 f0       	breq	.+2      	; 0x239e <Print::print(char const*) [clone .constprop.68]+0x6>
    239c:	87 cf       	rjmp	.-242    	; 0x22ac <Print::write(char const*) [clone .part.2] [clone .constprop.70]>
print():
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	80 e0       	ldi	r24, 0x00	; 0
    23a2:	08 95       	ret

000023a4 <Displayclass::pump_disp() [clone .constprop.59]>:
pump_disp():
    23a4:	cf 93       	push	r28
    23a6:	df 93       	push	r29
    23a8:	80 91 da 28 	lds	r24, 0x28DA	; 0x8028da <sfil_comp>
    23ac:	81 11       	cpse	r24, r1
    23ae:	b8 c0       	rjmp	.+368    	; 0x2520 <Displayclass::pump_disp() [clone .constprop.59]+0x17c>
    23b0:	10 92 e5 28 	sts	0x28E5, r1	; 0x8028e5 <screen>
    23b4:	df 91       	pop	r29
    23b6:	cf 91       	pop	r28
    23b8:	08 95       	ret
    23ba:	60 e0       	ldi	r22, 0x00	; 0
    23bc:	80 e0       	ldi	r24, 0x00	; 0
    23be:	e9 de       	rcall	.-558    	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    23c0:	82 e0       	ldi	r24, 0x02	; 2
    23c2:	9e e8       	ldi	r25, 0x8E	; 142
    23c4:	e9 df       	rcall	.-46     	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    23c6:	61 e0       	ldi	r22, 0x01	; 1
    23c8:	80 e0       	ldi	r24, 0x00	; 0
    23ca:	e3 de       	rcall	.-570    	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    23cc:	83 e1       	ldi	r24, 0x13	; 19
    23ce:	9e e8       	ldi	r25, 0x8E	; 142
    23d0:	df 91       	pop	r29
    23d2:	cf 91       	pop	r28
    23d4:	e1 cf       	rjmp	.-62     	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    23d6:	80 91 0b 28 	lds	r24, 0x280B	; 0x80280b <calib_count>
    23da:	85 30       	cpi	r24, 0x05	; 5
    23dc:	00 f5       	brcc	.+64     	; 0x241e <Displayclass::pump_disp() [clone .constprop.59]+0x7a>
    23de:	60 e0       	ldi	r22, 0x00	; 0
    23e0:	80 e0       	ldi	r24, 0x00	; 0
    23e2:	d7 de       	rcall	.-594    	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    23e4:	84 e2       	ldi	r24, 0x24	; 36
    23e6:	9e e8       	ldi	r25, 0x8E	; 142
    23e8:	d7 df       	rcall	.-82     	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    23ea:	61 e0       	ldi	r22, 0x01	; 1
    23ec:	80 e0       	ldi	r24, 0x00	; 0
    23ee:	d1 de       	rcall	.-606    	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    23f0:	85 e3       	ldi	r24, 0x35	; 53
    23f2:	9e e8       	ldi	r25, 0x8E	; 142
    23f4:	d1 df       	rcall	.-94     	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    23f6:	61 e0       	ldi	r22, 0x01	; 1
    23f8:	88 e0       	ldi	r24, 0x08	; 8
    23fa:	cb de       	rcall	.-618    	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    23fc:	90 91 0b 28 	lds	r25, 0x280B	; 0x80280b <calib_count>
    2400:	25 e0       	ldi	r18, 0x05	; 5
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	a9 01       	movw	r20, r18
    2406:	49 1b       	sub	r20, r25
    2408:	51 09       	sbc	r21, r1
    240a:	ca 01       	movw	r24, r20
    240c:	99 df       	rcall	.-206    	; 0x2340 <Print::print(int, int) [clone .constprop.62]>
    240e:	61 e0       	ldi	r22, 0x01	; 1
    2410:	89 e0       	ldi	r24, 0x09	; 9
    2412:	bf de       	rcall	.-642    	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2414:	8b e3       	ldi	r24, 0x3B	; 59
    2416:	9e e8       	ldi	r25, 0x8E	; 142
    2418:	bf df       	rcall	.-130    	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    241a:	10 92 d8 28 	sts	0x28D8, r1	; 0x8028d8 <Once1>
    241e:	80 91 0b 28 	lds	r24, 0x280B	; 0x80280b <calib_count>
    2422:	86 30       	cpi	r24, 0x06	; 6
    2424:	08 f4       	brcc	.+2      	; 0x2428 <Displayclass::pump_disp() [clone .constprop.59]+0x84>
    2426:	c6 cf       	rjmp	.-116    	; 0x23b4 <Displayclass::pump_disp() [clone .constprop.59]+0x10>
    2428:	80 91 d8 28 	lds	r24, 0x28D8	; 0x8028d8 <Once1>
    242c:	81 11       	cpse	r24, r1
    242e:	1c c0       	rjmp	.+56     	; 0x2468 <Displayclass::pump_disp() [clone .constprop.59]+0xc4>
    2430:	60 e0       	ldi	r22, 0x00	; 0
    2432:	af de       	rcall	.-674    	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2434:	85 e3       	ldi	r24, 0x35	; 53
    2436:	9e e8       	ldi	r25, 0x8E	; 142
    2438:	af df       	rcall	.-162    	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    243a:	61 e0       	ldi	r22, 0x01	; 1
    243c:	80 e0       	ldi	r24, 0x00	; 0
    243e:	a9 de       	rcall	.-686    	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2440:	86 e4       	ldi	r24, 0x46	; 70
    2442:	9e e8       	ldi	r25, 0x8E	; 142
    2444:	a9 df       	rcall	.-174    	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
digitalWrite():
    2446:	61 e0       	ldi	r22, 0x01	; 1
    2448:	84 e0       	ldi	r24, 0x04	; 4
    244a:	0e 94 c6 04 	call	0x98c	; 0x98c <digitalWrite.part.2>
pump_disp():
    244e:	68 e5       	ldi	r22, 0x58	; 88
    2450:	7b e1       	ldi	r23, 0x1B	; 27
    2452:	80 e0       	ldi	r24, 0x00	; 0
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <delay>
digitalWrite():
    245a:	60 e0       	ldi	r22, 0x00	; 0
    245c:	84 e0       	ldi	r24, 0x04	; 4
    245e:	0e 94 c6 04 	call	0x98c	; 0x98c <digitalWrite.part.2>
pump_disp():
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	80 93 d8 28 	sts	0x28D8, r24	; 0x8028d8 <Once1>
    2468:	60 e0       	ldi	r22, 0x00	; 0
    246a:	80 e0       	ldi	r24, 0x00	; 0
    246c:	92 de       	rcall	.-732    	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    246e:	87 e5       	ldi	r24, 0x57	; 87
    2470:	9e e8       	ldi	r25, 0x8E	; 142
    2472:	92 df       	rcall	.-220    	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    2474:	61 e0       	ldi	r22, 0x01	; 1
    2476:	80 e0       	ldi	r24, 0x00	; 0
    2478:	8c de       	rcall	.-744    	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    247a:	87 e6       	ldi	r24, 0x67	; 103
    247c:	9e e8       	ldi	r25, 0x8E	; 142
    247e:	a8 cf       	rjmp	.-176    	; 0x23d0 <Displayclass::pump_disp() [clone .constprop.59]+0x2c>
    2480:	60 e0       	ldi	r22, 0x00	; 0
    2482:	80 e0       	ldi	r24, 0x00	; 0
    2484:	86 de       	rcall	.-756    	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2486:	88 e7       	ldi	r24, 0x78	; 120
    2488:	9e e8       	ldi	r25, 0x8E	; 142
    248a:	86 df       	rcall	.-244    	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    248c:	60 e0       	ldi	r22, 0x00	; 0
    248e:	88 e0       	ldi	r24, 0x08	; 8
    2490:	80 de       	rcall	.-768    	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
print():
    2492:	60 91 07 28 	lds	r22, 0x2807	; 0x802807 <Point_dispense>
    2496:	70 91 08 28 	lds	r23, 0x2808	; 0x802808 <Point_dispense+0x1>
    249a:	80 91 09 28 	lds	r24, 0x2809	; 0x802809 <Point_dispense+0x2>
    249e:	90 91 0a 28 	lds	r25, 0x280A	; 0x80280a <Point_dispense+0x3>
    24a2:	4a e0       	ldi	r20, 0x0A	; 10
    24a4:	10 df       	rcall	.-480    	; 0x22c6 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.66]>
pump_disp():
    24a6:	61 e0       	ldi	r22, 0x01	; 1
    24a8:	80 e0       	ldi	r24, 0x00	; 0
    24aa:	73 de       	rcall	.-794    	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    24ac:	89 e8       	ldi	r24, 0x89	; 137
    24ae:	9e e8       	ldi	r25, 0x8E	; 142
    24b0:	73 df       	rcall	.-282    	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    24b2:	80 91 d7 28 	lds	r24, 0x28D7	; 0x8028d7 <Probe_blink>
    24b6:	91 e0       	ldi	r25, 0x01	; 1
    24b8:	98 0f       	add	r25, r24
    24ba:	90 93 d7 28 	sts	0x28D7, r25	; 0x8028d7 <Probe_blink>
    24be:	95 30       	cpi	r25, 0x05	; 5
    24c0:	49 f4       	brne	.+18     	; 0x24d4 <Displayclass::pump_disp() [clone .constprop.59]+0x130>
    24c2:	60 e0       	ldi	r22, 0x00	; 0
    24c4:	88 e0       	ldi	r24, 0x08	; 8
    24c6:	65 de       	rcall	.-822    	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    24c8:	88 e3       	ldi	r24, 0x38	; 56
    24ca:	9e e8       	ldi	r25, 0x8E	; 142
    24cc:	65 df       	rcall	.-310    	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    24ce:	10 92 d7 28 	sts	0x28D7, r1	; 0x8028d7 <Probe_blink>
    24d2:	70 cf       	rjmp	.-288    	; 0x23b4 <Displayclass::pump_disp() [clone .constprop.59]+0x10>
    24d4:	84 30       	cpi	r24, 0x04	; 4
    24d6:	08 f0       	brcs	.+2      	; 0x24da <Displayclass::pump_disp() [clone .constprop.59]+0x136>
    24d8:	6d cf       	rjmp	.-294    	; 0x23b4 <Displayclass::pump_disp() [clone .constprop.59]+0x10>
    24da:	60 e0       	ldi	r22, 0x00	; 0
    24dc:	88 e0       	ldi	r24, 0x08	; 8
    24de:	59 de       	rcall	.-846    	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
print():
    24e0:	60 91 07 28 	lds	r22, 0x2807	; 0x802807 <Point_dispense>
    24e4:	70 91 08 28 	lds	r23, 0x2808	; 0x802808 <Point_dispense+0x1>
    24e8:	80 91 09 28 	lds	r24, 0x2809	; 0x802809 <Point_dispense+0x2>
    24ec:	90 91 0a 28 	lds	r25, 0x280A	; 0x80280a <Point_dispense+0x3>
    24f0:	4a e0       	ldi	r20, 0x0A	; 10
pump_disp():
    24f2:	df 91       	pop	r29
    24f4:	cf 91       	pop	r28
print():
    24f6:	e7 ce       	rjmp	.-562    	; 0x22c6 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.66]>
pump_disp():
    24f8:	84 30       	cpi	r24, 0x04	; 4
    24fa:	08 f0       	brcs	.+2      	; 0x24fe <Displayclass::pump_disp() [clone .constprop.59]+0x15a>
    24fc:	5b cf       	rjmp	.-330    	; 0x23b4 <Displayclass::pump_disp() [clone .constprop.59]+0x10>
    24fe:	c0 91 07 28 	lds	r28, 0x2807	; 0x802807 <Point_dispense>
    2502:	d0 91 08 28 	lds	r29, 0x2808	; 0x802808 <Point_dispense+0x1>
    2506:	80 91 d5 28 	lds	r24, 0x28D5	; 0x8028d5 <Pump_error>
    250a:	90 91 d6 28 	lds	r25, 0x28D6	; 0x8028d6 <Pump_error+0x1>
    250e:	c8 0f       	add	r28, r24
    2510:	d9 1f       	adc	r29, r25
    2512:	61 e0       	ldi	r22, 0x01	; 1
    2514:	86 e0       	ldi	r24, 0x06	; 6
    2516:	3d de       	rcall	.-902    	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2518:	ce 01       	movw	r24, r28
    251a:	df 91       	pop	r29
    251c:	cf 91       	pop	r28
    251e:	10 cf       	rjmp	.-480    	; 0x2340 <Print::print(int, int) [clone .constprop.62]>
    2520:	80 91 d9 28 	lds	r24, 0x28D9	; 0x8028d9 <pcalib>
    2524:	82 30       	cpi	r24, 0x02	; 2
    2526:	09 f4       	brne	.+2      	; 0x252a <Displayclass::pump_disp() [clone .constprop.59]+0x186>
    2528:	56 cf       	rjmp	.-340    	; 0x23d6 <Displayclass::pump_disp() [clone .constprop.59]+0x32>
    252a:	08 f4       	brcc	.+2      	; 0x252e <Displayclass::pump_disp() [clone .constprop.59]+0x18a>
    252c:	46 cf       	rjmp	.-372    	; 0x23ba <Displayclass::pump_disp() [clone .constprop.59]+0x16>
    252e:	83 30       	cpi	r24, 0x03	; 3
    2530:	09 f4       	brne	.+2      	; 0x2534 <Displayclass::pump_disp() [clone .constprop.59]+0x190>
    2532:	a6 cf       	rjmp	.-180    	; 0x2480 <Displayclass::pump_disp() [clone .constprop.59]+0xdc>
    2534:	8f 30       	cpi	r24, 0x0F	; 15
    2536:	09 f0       	breq	.+2      	; 0x253a <Displayclass::pump_disp() [clone .constprop.59]+0x196>
    2538:	3d cf       	rjmp	.-390    	; 0x23b4 <Displayclass::pump_disp() [clone .constprop.59]+0x10>
    253a:	60 e0       	ldi	r22, 0x00	; 0
    253c:	80 e0       	ldi	r24, 0x00	; 0
    253e:	29 de       	rcall	.-942    	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2540:	8a e9       	ldi	r24, 0x9A	; 154
    2542:	9e e8       	ldi	r25, 0x8E	; 142
    2544:	29 df       	rcall	.-430    	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    2546:	61 e0       	ldi	r22, 0x01	; 1
    2548:	80 e0       	ldi	r24, 0x00	; 0
    254a:	23 de       	rcall	.-954    	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    254c:	8c ea       	ldi	r24, 0xAC	; 172
    254e:	9e e8       	ldi	r25, 0x8E	; 142
    2550:	23 df       	rcall	.-442    	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    2552:	80 91 d7 28 	lds	r24, 0x28D7	; 0x8028d7 <Probe_blink>
    2556:	91 e0       	ldi	r25, 0x01	; 1
    2558:	98 0f       	add	r25, r24
    255a:	90 93 d7 28 	sts	0x28D7, r25	; 0x8028d7 <Probe_blink>
    255e:	9c ef       	ldi	r25, 0xFC	; 252
    2560:	98 0f       	add	r25, r24
    2562:	92 30       	cpi	r25, 0x02	; 2
    2564:	48 f6       	brcc	.-110    	; 0x24f8 <Displayclass::pump_disp() [clone .constprop.59]+0x154>
    2566:	61 e0       	ldi	r22, 0x01	; 1
    2568:	86 e0       	ldi	r24, 0x06	; 6
    256a:	13 de       	rcall	.-986    	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    256c:	82 e4       	ldi	r24, 0x42	; 66
    256e:	9e e8       	ldi	r25, 0x8E	; 142
    2570:	ad cf       	rjmp	.-166    	; 0x24cc <Displayclass::pump_disp() [clone .constprop.59]+0x128>

00002572 <Print::print(double, int) [clone .constprop.54]>:
print():
    2572:	4f 92       	push	r4
    2574:	5f 92       	push	r5
    2576:	6f 92       	push	r6
    2578:	7f 92       	push	r7
    257a:	8f 92       	push	r8
    257c:	9f 92       	push	r9
    257e:	af 92       	push	r10
    2580:	bf 92       	push	r11
    2582:	cf 92       	push	r12
    2584:	df 92       	push	r13
    2586:	ef 92       	push	r14
    2588:	ff 92       	push	r15
    258a:	cf 93       	push	r28
    258c:	df 93       	push	r29
    258e:	6b 01       	movw	r12, r22
    2590:	7c 01       	movw	r14, r24
printFloat():
    2592:	ac 01       	movw	r20, r24
    2594:	9b 01       	movw	r18, r22
    2596:	0e 94 5a 24 	call	0x48b4	; 0x48b4 <__unordsf2>
    259a:	88 23       	and	r24, r24
    259c:	89 f0       	breq	.+34     	; 0x25c0 <Print::print(double, int) [clone .constprop.54]+0x4e>
write():
    259e:	8d eb       	ldi	r24, 0xBD	; 189
    25a0:	9e e8       	ldi	r25, 0x8E	; 142
print():
    25a2:	df 91       	pop	r29
    25a4:	cf 91       	pop	r28
    25a6:	ff 90       	pop	r15
    25a8:	ef 90       	pop	r14
    25aa:	df 90       	pop	r13
    25ac:	cf 90       	pop	r12
    25ae:	bf 90       	pop	r11
    25b0:	af 90       	pop	r10
    25b2:	9f 90       	pop	r9
    25b4:	8f 90       	pop	r8
    25b6:	7f 90       	pop	r7
    25b8:	6f 90       	pop	r6
    25ba:	5f 90       	pop	r5
    25bc:	4f 90       	pop	r4
write():
    25be:	76 ce       	rjmp	.-788    	; 0x22ac <Print::write(char const*) [clone .part.2] [clone .constprop.70]>
printFloat():
    25c0:	46 01       	movw	r8, r12
    25c2:	57 01       	movw	r10, r14
    25c4:	e8 94       	clt
    25c6:	b7 f8       	bld	r11, 7
    25c8:	2f ef       	ldi	r18, 0xFF	; 255
    25ca:	3f ef       	ldi	r19, 0xFF	; 255
    25cc:	4f e7       	ldi	r20, 0x7F	; 127
    25ce:	5f e7       	ldi	r21, 0x7F	; 127
    25d0:	c5 01       	movw	r24, r10
    25d2:	b4 01       	movw	r22, r8
    25d4:	0e 94 5a 24 	call	0x48b4	; 0x48b4 <__unordsf2>
    25d8:	81 11       	cpse	r24, r1
    25da:	0d c0       	rjmp	.+26     	; 0x25f6 <Print::print(double, int) [clone .constprop.54]+0x84>
    25dc:	2f ef       	ldi	r18, 0xFF	; 255
    25de:	3f ef       	ldi	r19, 0xFF	; 255
    25e0:	4f e7       	ldi	r20, 0x7F	; 127
    25e2:	5f e7       	ldi	r21, 0x7F	; 127
    25e4:	c5 01       	movw	r24, r10
    25e6:	b4 01       	movw	r22, r8
    25e8:	0e 94 f5 21 	call	0x43ea	; 0x43ea <__cmpsf2>
    25ec:	18 16       	cp	r1, r24
    25ee:	1c f4       	brge	.+6      	; 0x25f6 <Print::print(double, int) [clone .constprop.54]+0x84>
write():
    25f0:	81 ec       	ldi	r24, 0xC1	; 193
    25f2:	9e e8       	ldi	r25, 0x8E	; 142
    25f4:	d6 cf       	rjmp	.-84     	; 0x25a2 <Print::print(double, int) [clone .constprop.54]+0x30>
printFloat():
    25f6:	2f ef       	ldi	r18, 0xFF	; 255
    25f8:	3f ef       	ldi	r19, 0xFF	; 255
    25fa:	4f e7       	ldi	r20, 0x7F	; 127
    25fc:	5f e4       	ldi	r21, 0x4F	; 79
    25fe:	c7 01       	movw	r24, r14
    2600:	b6 01       	movw	r22, r12
    2602:	0e 94 56 24 	call	0x48ac	; 0x48ac <__gesf2>
    2606:	18 16       	cp	r1, r24
    2608:	1c f4       	brge	.+6      	; 0x2610 <Print::print(double, int) [clone .constprop.54]+0x9e>
write():
    260a:	85 ec       	ldi	r24, 0xC5	; 197
    260c:	9e e8       	ldi	r25, 0x8E	; 142
    260e:	c9 cf       	rjmp	.-110    	; 0x25a2 <Print::print(double, int) [clone .constprop.54]+0x30>
printFloat():
    2610:	2f ef       	ldi	r18, 0xFF	; 255
    2612:	3f ef       	ldi	r19, 0xFF	; 255
    2614:	4f e7       	ldi	r20, 0x7F	; 127
    2616:	5f ec       	ldi	r21, 0xCF	; 207
    2618:	c7 01       	movw	r24, r14
    261a:	b6 01       	movw	r22, r12
    261c:	0e 94 f5 21 	call	0x43ea	; 0x43ea <__cmpsf2>
    2620:	87 fd       	sbrc	r24, 7
    2622:	f3 cf       	rjmp	.-26     	; 0x260a <Print::print(double, int) [clone .constprop.54]+0x98>
    2624:	20 e0       	ldi	r18, 0x00	; 0
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	a9 01       	movw	r20, r18
    262a:	c7 01       	movw	r24, r14
    262c:	b6 01       	movw	r22, r12
    262e:	0e 94 f5 21 	call	0x43ea	; 0x43ea <__cmpsf2>
print():
    2632:	d0 e0       	ldi	r29, 0x00	; 0
    2634:	c0 e0       	ldi	r28, 0x00	; 0
printFloat():
    2636:	87 ff       	sbrs	r24, 7
    2638:	0b c0       	rjmp	.+22     	; 0x2650 <Print::print(double, int) [clone .constprop.54]+0xde>
write():
    263a:	41 e0       	ldi	r20, 0x01	; 1
    263c:	6d e2       	ldi	r22, 0x2D	; 45
    263e:	87 e3       	ldi	r24, 0x37	; 55
    2640:	9b e2       	ldi	r25, 0x2B	; 43
    2642:	81 dc       	rcall	.-1790   	; 0x1f46 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
printFloat():
    2644:	f7 fa       	bst	r15, 7
    2646:	f0 94       	com	r15
    2648:	f7 f8       	bld	r15, 7
    264a:	f0 94       	com	r15
print():
    264c:	c1 e0       	ldi	r28, 0x01	; 1
    264e:	d0 e0       	ldi	r29, 0x00	; 0
printFloat():
    2650:	2a e0       	ldi	r18, 0x0A	; 10
    2652:	37 ed       	ldi	r19, 0xD7	; 215
    2654:	43 ea       	ldi	r20, 0xA3	; 163
    2656:	5b e3       	ldi	r21, 0x3B	; 59
    2658:	c7 01       	movw	r24, r14
    265a:	b6 01       	movw	r22, r12
    265c:	0e 94 59 23 	call	0x46b2	; 0x46b2 <__addsf3>
    2660:	4b 01       	movw	r8, r22
    2662:	5c 01       	movw	r10, r24
    2664:	0e 94 2a 24 	call	0x4854	; 0x4854 <__fixunssfsi>
    2668:	6b 01       	movw	r12, r22
    266a:	7c 01       	movw	r14, r24
    266c:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <__floatunsisf>
    2670:	9b 01       	movw	r18, r22
    2672:	ac 01       	movw	r20, r24
    2674:	c5 01       	movw	r24, r10
    2676:	b4 01       	movw	r22, r8
    2678:	0e 94 58 23 	call	0x46b0	; 0x46b0 <__subsf3>
    267c:	4b 01       	movw	r8, r22
    267e:	5c 01       	movw	r10, r24
print():
    2680:	4a e0       	ldi	r20, 0x0A	; 10
    2682:	c7 01       	movw	r24, r14
    2684:	b6 01       	movw	r22, r12
    2686:	1f de       	rcall	.-962    	; 0x22c6 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.66]>
printFloat():
    2688:	7c 01       	movw	r14, r24
    268a:	ec 0e       	add	r14, r28
    268c:	fd 1e       	adc	r15, r29
write():
    268e:	89 ec       	ldi	r24, 0xC9	; 201
    2690:	9e e8       	ldi	r25, 0x8E	; 142
    2692:	0c de       	rcall	.-1000   	; 0x22ac <Print::write(char const*) [clone .part.2] [clone .constprop.70]>
printFloat():
    2694:	e8 0e       	add	r14, r24
    2696:	f9 1e       	adc	r15, r25
    2698:	20 e0       	ldi	r18, 0x00	; 0
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	40 e2       	ldi	r20, 0x20	; 32
    269e:	51 e4       	ldi	r21, 0x41	; 65
    26a0:	c5 01       	movw	r24, r10
    26a2:	b4 01       	movw	r22, r8
    26a4:	0e 94 5a 22 	call	0x44b4	; 0x44b4 <__mulsf3>
    26a8:	2b 01       	movw	r4, r22
    26aa:	3c 01       	movw	r6, r24
    26ac:	0e 94 2a 24 	call	0x4854	; 0x4854 <__fixunssfsi>
print():
    26b0:	4b 01       	movw	r8, r22
    26b2:	b1 2c       	mov	r11, r1
    26b4:	a1 2c       	mov	r10, r1
    26b6:	4a e0       	ldi	r20, 0x0A	; 10
    26b8:	c5 01       	movw	r24, r10
    26ba:	b4 01       	movw	r22, r8
    26bc:	04 de       	rcall	.-1016   	; 0x22c6 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.66]>
printFloat():
    26be:	e8 0e       	add	r14, r24
    26c0:	f9 1e       	adc	r15, r25
    26c2:	c5 01       	movw	r24, r10
    26c4:	b4 01       	movw	r22, r8
    26c6:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <__floatunsisf>
    26ca:	9b 01       	movw	r18, r22
    26cc:	ac 01       	movw	r20, r24
    26ce:	c3 01       	movw	r24, r6
    26d0:	b2 01       	movw	r22, r4
    26d2:	0e 94 58 23 	call	0x46b0	; 0x46b0 <__subsf3>
    26d6:	20 e0       	ldi	r18, 0x00	; 0
    26d8:	30 e0       	ldi	r19, 0x00	; 0
    26da:	40 e2       	ldi	r20, 0x20	; 32
    26dc:	51 e4       	ldi	r21, 0x41	; 65
    26de:	0e 94 5a 22 	call	0x44b4	; 0x44b4 <__mulsf3>
    26e2:	0e 94 2a 24 	call	0x4854	; 0x4854 <__fixunssfsi>
print():
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	80 e0       	ldi	r24, 0x00	; 0
    26ea:	4a e0       	ldi	r20, 0x0A	; 10
    26ec:	ec dd       	rcall	.-1064   	; 0x22c6 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.66]>
    26ee:	8e 0d       	add	r24, r14
    26f0:	9f 1d       	adc	r25, r15
    26f2:	df 91       	pop	r29
    26f4:	cf 91       	pop	r28
    26f6:	ff 90       	pop	r15
    26f8:	ef 90       	pop	r14
    26fa:	df 90       	pop	r13
    26fc:	cf 90       	pop	r12
    26fe:	bf 90       	pop	r11
    2700:	af 90       	pop	r10
    2702:	9f 90       	pop	r9
    2704:	8f 90       	pop	r8
    2706:	7f 90       	pop	r7
    2708:	6f 90       	pop	r6
    270a:	5f 90       	pop	r5
    270c:	4f 90       	pop	r4
    270e:	08 95       	ret

00002710 <Display1()>:
Display1():
    2710:	0f 93       	push	r16
    2712:	1f 93       	push	r17
    2714:	cf 93       	push	r28
    2716:	df 93       	push	r29
LCD():
    2718:	80 91 e5 28 	lds	r24, 0x28E5	; 0x8028e5 <screen>
    271c:	82 30       	cpi	r24, 0x02	; 2
    271e:	31 f5       	brne	.+76     	; 0x276c <Display1()+0x5c>
    2720:	80 91 e6 28 	lds	r24, 0x28E6	; 0x8028e6 <tim_disp>
    2724:	85 30       	cpi	r24, 0x05	; 5
    2726:	09 f0       	breq	.+2      	; 0x272a <Display1()+0x1a>
    2728:	85 c0       	rjmp	.+266    	; 0x2834 <Display1()+0x124>
    272a:	80 91 38 28 	lds	r24, 0x2838	; 0x802838 <Pump_calib>
    272e:	88 23       	and	r24, r24
    2730:	e9 f0       	breq	.+58     	; 0x276c <Display1()+0x5c>
    2732:	80 91 d9 28 	lds	r24, 0x28D9	; 0x8028d9 <pcalib>
    2736:	82 30       	cpi	r24, 0x02	; 2
    2738:	c8 f0       	brcs	.+50     	; 0x276c <Display1()+0x5c>
    273a:	61 e0       	ldi	r22, 0x01	; 1
    273c:	80 e0       	ldi	r24, 0x00	; 0
    273e:	29 dd       	rcall	.-1454   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2740:	8b ec       	ldi	r24, 0xCB	; 203
    2742:	9e e8       	ldi	r25, 0x8E	; 142
    2744:	29 de       	rcall	.-942    	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    2746:	60 e0       	ldi	r22, 0x00	; 0
    2748:	80 e0       	ldi	r24, 0x00	; 0
    274a:	23 dd       	rcall	.-1466   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    274c:	88 e7       	ldi	r24, 0x78	; 120
    274e:	9e e8       	ldi	r25, 0x8E	; 142
    2750:	23 de       	rcall	.-954    	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    2752:	60 e0       	ldi	r22, 0x00	; 0
    2754:	88 e0       	ldi	r24, 0x08	; 8
    2756:	1d dd       	rcall	.-1478   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
print():
    2758:	60 91 07 28 	lds	r22, 0x2807	; 0x802807 <Point_dispense>
    275c:	70 91 08 28 	lds	r23, 0x2808	; 0x802808 <Point_dispense+0x1>
    2760:	80 91 09 28 	lds	r24, 0x2809	; 0x802809 <Point_dispense+0x2>
    2764:	90 91 0a 28 	lds	r25, 0x280A	; 0x80280a <Point_dispense+0x3>
    2768:	4a e0       	ldi	r20, 0x0A	; 10
    276a:	ad dd       	rcall	.-1190   	; 0x22c6 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.66]>
LCD():
    276c:	80 91 e5 28 	lds	r24, 0x28E5	; 0x8028e5 <screen>
    2770:	81 11       	cpse	r24, r1
    2772:	32 c0       	rjmp	.+100    	; 0x27d8 <Display1()+0xc8>
    2774:	80 91 c8 28 	lds	r24, 0x28C8	; 0x8028c8 <vol_set>
    2778:	81 11       	cpse	r24, r1
    277a:	14 c1       	rjmp	.+552    	; 0x29a4 <Display1()+0x294>
    277c:	60 e0       	ldi	r22, 0x00	; 0
    277e:	09 dd       	rcall	.-1518   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2780:	81 e2       	ldi	r24, 0x21	; 33
    2782:	9f e8       	ldi	r25, 0x8F	; 143
    2784:	09 de       	rcall	.-1006   	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    2786:	60 e0       	ldi	r22, 0x00	; 0
    2788:	8c e0       	ldi	r24, 0x0C	; 12
    278a:	03 dd       	rcall	.-1530   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    278c:	60 91 bc 28 	lds	r22, 0x28BC	; 0x8028bc <calib_Heater1>
    2790:	70 91 bd 28 	lds	r23, 0x28BD	; 0x8028bd <calib_Heater1+0x1>
    2794:	80 91 be 28 	lds	r24, 0x28BE	; 0x8028be <calib_Heater1+0x2>
    2798:	90 91 bf 28 	lds	r25, 0x28BF	; 0x8028bf <calib_Heater1+0x3>
    279c:	ea de       	rcall	.-556    	; 0x2572 <Print::print(double, int) [clone .constprop.54]>
    279e:	90 91 da 28 	lds	r25, 0x28DA	; 0x8028da <sfil_comp>
    27a2:	80 91 06 28 	lds	r24, 0x2806	; 0x802806 <Stop_cycle>
    27a6:	99 23       	and	r25, r25
    27a8:	09 f4       	brne	.+2      	; 0x27ac <Display1()+0x9c>
    27aa:	cd c0       	rjmp	.+410    	; 0x2946 <Display1()+0x236>
    27ac:	81 11       	cpse	r24, r1
    27ae:	03 c0       	rjmp	.+6      	; 0x27b6 <Display1()+0xa6>
    27b0:	82 e0       	ldi	r24, 0x02	; 2
    27b2:	80 93 c9 28 	sts	0x28C9, r24	; 0x8028c9 <Level_var>
    27b6:	61 e0       	ldi	r22, 0x01	; 1
    27b8:	80 e0       	ldi	r24, 0x00	; 0
    27ba:	eb dc       	rcall	.-1578   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    27bc:	80 91 c9 28 	lds	r24, 0x28C9	; 0x8028c9 <Level_var>
    27c0:	26 e0       	ldi	r18, 0x06	; 6
    27c2:	82 9f       	mul	r24, r18
    27c4:	c0 01       	movw	r24, r0
    27c6:	11 24       	eor	r1, r1
    27c8:	8b 5d       	subi	r24, 0xDB	; 219
    27ca:	94 4d       	sbci	r25, 0xD4	; 212
    27cc:	0e 94 28 04 	call	0x850	; 0x850 <Print::print(String const&) [clone .constprop.51]>
digitalWrite():
    27d0:	60 e0       	ldi	r22, 0x00	; 0
    27d2:	89 e1       	ldi	r24, 0x19	; 25
    27d4:	0e 94 c6 04 	call	0x98c	; 0x98c <digitalWrite.part.2>
LCD():
    27d8:	80 91 e5 28 	lds	r24, 0x28E5	; 0x8028e5 <screen>
    27dc:	81 30       	cpi	r24, 0x01	; 1
    27de:	09 f0       	breq	.+2      	; 0x27e2 <Display1()+0xd2>
    27e0:	a0 c1       	rjmp	.+832    	; 0x2b22 <Display1()+0x412>
    27e2:	80 91 39 28 	lds	r24, 0x2839	; 0x802839 <back>
    27e6:	81 11       	cpse	r24, r1
    27e8:	54 c1       	rjmp	.+680    	; 0x2a92 <Display1()+0x382>
    27ea:	00 91 e3 28 	lds	r16, 0x28E3	; 0x8028e3 <menu_select>
    27ee:	10 91 e4 28 	lds	r17, 0x28E4	; 0x8028e4 <menu_select+0x1>
disp_menu():
    27f2:	60 e0       	ldi	r22, 0x00	; 0
    27f4:	ce dc       	rcall	.-1636   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    27f6:	86 e0       	ldi	r24, 0x06	; 6
    27f8:	80 9f       	mul	r24, r16
    27fa:	e0 01       	movw	r28, r0
    27fc:	81 9f       	mul	r24, r17
    27fe:	d0 0d       	add	r29, r0
    2800:	11 24       	eor	r1, r1
    2802:	ce 01       	movw	r24, r28
    2804:	87 51       	subi	r24, 0x17	; 23
    2806:	95 4d       	sbci	r25, 0xD5	; 213
    2808:	0e 94 28 04 	call	0x850	; 0x850 <Print::print(String const&) [clone .constprop.51]>
    280c:	61 e0       	ldi	r22, 0x01	; 1
    280e:	80 e0       	ldi	r24, 0x00	; 0
    2810:	c0 dc       	rcall	.-1664   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2812:	ce 01       	movw	r24, r28
    2814:	81 51       	subi	r24, 0x11	; 17
    2816:	95 4d       	sbci	r25, 0xD5	; 213
    2818:	07 30       	cpi	r16, 0x07	; 7
    281a:	11 05       	cpc	r17, r1
    281c:	11 f4       	brne	.+4      	; 0x2822 <Display1()+0x112>
Display1():
    281e:	89 ee       	ldi	r24, 0xE9	; 233
    2820:	9a e2       	ldi	r25, 0x2A	; 42
disp_menu():
    2822:	0e 94 28 04 	call	0x850	; 0x850 <Print::print(String const&) [clone .constprop.51]>
    2826:	61 e0       	ldi	r22, 0x01	; 1
    2828:	80 e0       	ldi	r24, 0x00	; 0
    282a:	b3 dc       	rcall	.-1690   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    282c:	84 e4       	ldi	r24, 0x44	; 68
    282e:	9e e8       	ldi	r25, 0x8E	; 142
LCD():
    2830:	b3 dd       	rcall	.-1178   	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    2832:	77 c1       	rjmp	.+750    	; 0x2b22 <Display1()+0x412>
    2834:	81 30       	cpi	r24, 0x01	; 1
    2836:	29 f5       	brne	.+74     	; 0x2882 <Display1()+0x172>
    2838:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <level_detect>
    283c:	83 30       	cpi	r24, 0x03	; 3
    283e:	09 f4       	brne	.+2      	; 0x2842 <Display1()+0x132>
    2840:	95 cf       	rjmp	.-214    	; 0x276c <Display1()+0x5c>
    2842:	60 e0       	ldi	r22, 0x00	; 0
    2844:	80 e0       	ldi	r24, 0x00	; 0
    2846:	a5 dc       	rcall	.-1718   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2848:	88 e7       	ldi	r24, 0x78	; 120
    284a:	9e e8       	ldi	r25, 0x8E	; 142
    284c:	a5 dd       	rcall	.-1206   	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    284e:	60 e0       	ldi	r22, 0x00	; 0
    2850:	88 e0       	ldi	r24, 0x08	; 8
    2852:	9f dc       	rcall	.-1730   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
print():
    2854:	60 91 01 28 	lds	r22, 0x2801	; 0x802801 <VOLUME>
    2858:	70 91 02 28 	lds	r23, 0x2802	; 0x802802 <VOLUME+0x1>
    285c:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <VOLUME+0x2>
    2860:	90 91 04 28 	lds	r25, 0x2804	; 0x802804 <VOLUME+0x3>
    2864:	4a e0       	ldi	r20, 0x0A	; 10
    2866:	2f dd       	rcall	.-1442   	; 0x22c6 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.66]>
LCD():
    2868:	61 e0       	ldi	r22, 0x01	; 1
    286a:	80 e0       	ldi	r24, 0x00	; 0
    286c:	92 dc       	rcall	.-1756   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    286e:	8c ed       	ldi	r24, 0xDC	; 220
    2870:	9e e8       	ldi	r25, 0x8E	; 142
    2872:	92 dd       	rcall	.-1244   	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    2874:	61 e0       	ldi	r22, 0x01	; 1
    2876:	8f e0       	ldi	r24, 0x0F	; 15
    2878:	8c dc       	rcall	.-1768   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    287a:	80 91 2a 28 	lds	r24, 0x282A	; 0x80282a <count>
    287e:	86 dd       	rcall	.-1268   	; 0x238c <Print::print(unsigned char, int) [clone .constprop.58]>
    2880:	75 cf       	rjmp	.-278    	; 0x276c <Display1()+0x5c>
    2882:	82 30       	cpi	r24, 0x02	; 2
    2884:	91 f4       	brne	.+36     	; 0x28aa <Display1()+0x19a>
    2886:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <level_detect>
    288a:	83 30       	cpi	r24, 0x03	; 3
    288c:	09 f4       	brne	.+2      	; 0x2890 <Display1()+0x180>
    288e:	6e cf       	rjmp	.-292    	; 0x276c <Display1()+0x5c>
    2890:	60 e0       	ldi	r22, 0x00	; 0
    2892:	80 e0       	ldi	r24, 0x00	; 0
    2894:	7e dc       	rcall	.-1796   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2896:	85 e3       	ldi	r24, 0x35	; 53
    2898:	9e e8       	ldi	r25, 0x8E	; 142
    289a:	7e dd       	rcall	.-1284   	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    289c:	61 e0       	ldi	r22, 0x01	; 1
    289e:	80 e0       	ldi	r24, 0x00	; 0
    28a0:	78 dc       	rcall	.-1808   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    28a2:	8b ec       	ldi	r24, 0xCB	; 203
    28a4:	9e e8       	ldi	r25, 0x8E	; 142
    28a6:	78 dd       	rcall	.-1296   	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    28a8:	61 cf       	rjmp	.-318    	; 0x276c <Display1()+0x5c>
    28aa:	84 30       	cpi	r24, 0x04	; 4
    28ac:	09 f0       	breq	.+2      	; 0x28b0 <Display1()+0x1a0>
    28ae:	38 c0       	rjmp	.+112    	; 0x2920 <Display1()+0x210>
    28b0:	80 91 29 28 	lds	r24, 0x2829	; 0x802829 <i>
    28b4:	84 31       	cpi	r24, 0x14	; 20
    28b6:	88 f5       	brcc	.+98     	; 0x291a <Display1()+0x20a>
    28b8:	60 e0       	ldi	r22, 0x00	; 0
    28ba:	80 e0       	ldi	r24, 0x00	; 0
    28bc:	6a dc       	rcall	.-1836   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    28be:	8e e3       	ldi	r24, 0x3E	; 62
    28c0:	9e e8       	ldi	r25, 0x8E	; 142
    28c2:	6a dd       	rcall	.-1324   	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    28c4:	60 e0       	ldi	r22, 0x00	; 0
    28c6:	80 e0       	ldi	r24, 0x00	; 0
    28c8:	64 dc       	rcall	.-1848   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
print():
    28ca:	60 91 25 28 	lds	r22, 0x2825	; 0x802825 <VOLUME1>
    28ce:	70 91 26 28 	lds	r23, 0x2826	; 0x802826 <VOLUME1+0x1>
    28d2:	80 91 27 28 	lds	r24, 0x2827	; 0x802827 <VOLUME1+0x2>
    28d6:	90 91 28 28 	lds	r25, 0x2828	; 0x802828 <VOLUME1+0x3>
    28da:	4a e0       	ldi	r20, 0x0A	; 10
    28dc:	f4 dc       	rcall	.-1560   	; 0x22c6 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.66]>
LCD():
    28de:	60 e0       	ldi	r22, 0x00	; 0
    28e0:	86 e0       	ldi	r24, 0x06	; 6
    28e2:	57 dc       	rcall	.-1874   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    28e4:	8b e4       	ldi	r24, 0x4B	; 75
    28e6:	9f e8       	ldi	r25, 0x8F	; 143
    28e8:	57 dd       	rcall	.-1362   	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    28ea:	60 e0       	ldi	r22, 0x00	; 0
    28ec:	89 e0       	ldi	r24, 0x09	; 9
    28ee:	51 dc       	rcall	.-1886   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    28f0:	85 e5       	ldi	r24, 0x55	; 85
    28f2:	9f e8       	ldi	r25, 0x8F	; 143
    28f4:	51 dd       	rcall	.-1374   	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    28f6:	60 e0       	ldi	r22, 0x00	; 0
    28f8:	8e e0       	ldi	r24, 0x0E	; 14
    28fa:	4b dc       	rcall	.-1898   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    28fc:	80 91 2a 28 	lds	r24, 0x282A	; 0x80282a <count>
    2900:	45 dd       	rcall	.-1398   	; 0x238c <Print::print(unsigned char, int) [clone .constprop.58]>
    2902:	61 e0       	ldi	r22, 0x01	; 1
    2904:	80 e0       	ldi	r24, 0x00	; 0
    2906:	45 dc       	rcall	.-1910   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2908:	8d ee       	ldi	r24, 0xED	; 237
    290a:	9e e8       	ldi	r25, 0x8E	; 142
    290c:	45 dd       	rcall	.-1398   	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    290e:	80 91 29 28 	lds	r24, 0x2829	; 0x802829 <i>
    2912:	8f 5f       	subi	r24, 0xFF	; 255
    2914:	80 93 29 28 	sts	0x2829, r24	; 0x802829 <i>
    2918:	29 cf       	rjmp	.-430    	; 0x276c <Display1()+0x5c>
    291a:	10 92 e5 28 	sts	0x28E5, r1	; 0x8028e5 <screen>
    291e:	26 cf       	rjmp	.-436    	; 0x276c <Display1()+0x5c>
    2920:	83 30       	cpi	r24, 0x03	; 3
    2922:	09 f0       	breq	.+2      	; 0x2926 <Display1()+0x216>
    2924:	23 cf       	rjmp	.-442    	; 0x276c <Display1()+0x5c>
    2926:	80 91 29 28 	lds	r24, 0x2829	; 0x802829 <i>
    292a:	84 31       	cpi	r24, 0x14	; 20
    292c:	b0 f7       	brcc	.-20     	; 0x291a <Display1()+0x20a>
    292e:	60 e0       	ldi	r22, 0x00	; 0
    2930:	80 e0       	ldi	r24, 0x00	; 0
    2932:	2f dc       	rcall	.-1954   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2934:	8f ef       	ldi	r24, 0xFF	; 255
    2936:	9e e8       	ldi	r25, 0x8E	; 142
    2938:	2f dd       	rcall	.-1442   	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    293a:	61 e0       	ldi	r22, 0x01	; 1
    293c:	80 e0       	ldi	r24, 0x00	; 0
    293e:	29 dc       	rcall	.-1966   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2940:	80 e1       	ldi	r24, 0x10	; 16
    2942:	9f e8       	ldi	r25, 0x8F	; 143
    2944:	e3 cf       	rjmp	.-58     	; 0x290c <Display1()+0x1fc>
    2946:	88 23       	and	r24, r24
    2948:	09 f4       	brne	.+2      	; 0x294c <Display1()+0x23c>
    294a:	46 cf       	rjmp	.-372    	; 0x27d8 <Display1()+0xc8>
    294c:	c0 91 d7 28 	lds	r28, 0x28D7	; 0x8028d7 <Probe_blink>
    2950:	81 e0       	ldi	r24, 0x01	; 1
    2952:	8c 0f       	add	r24, r28
    2954:	80 93 d7 28 	sts	0x28D7, r24	; 0x8028d7 <Probe_blink>
digitalWrite():
    2958:	61 e0       	ldi	r22, 0x01	; 1
    295a:	88 e1       	ldi	r24, 0x18	; 24
    295c:	0e 94 c6 04 	call	0x98c	; 0x98c <digitalWrite.part.2>
LCD():
    2960:	8c ef       	ldi	r24, 0xFC	; 252
    2962:	8c 0f       	add	r24, r28
    2964:	82 30       	cpi	r24, 0x02	; 2
    2966:	68 f4       	brcc	.+26     	; 0x2982 <Display1()+0x272>
    2968:	61 e0       	ldi	r22, 0x01	; 1
    296a:	80 e0       	ldi	r24, 0x00	; 0
    296c:	12 dc       	rcall	.-2012   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    296e:	85 e3       	ldi	r24, 0x35	; 53
    2970:	9e e8       	ldi	r25, 0x8E	; 142
    2972:	12 dd       	rcall	.-1500   	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    2974:	10 92 d7 28 	sts	0x28D7, r1	; 0x8028d7 <Probe_blink>
digitalWrite():
    2978:	60 e0       	ldi	r22, 0x00	; 0
    297a:	88 e1       	ldi	r24, 0x18	; 24
    297c:	0e 94 c6 04 	call	0x98c	; 0x98c <digitalWrite.part.2>
    2980:	27 cf       	rjmp	.-434    	; 0x27d0 <Display1()+0xc0>
LCD():
    2982:	c4 30       	cpi	r28, 0x04	; 4
    2984:	08 f0       	brcs	.+2      	; 0x2988 <Display1()+0x278>
    2986:	28 cf       	rjmp	.-432    	; 0x27d8 <Display1()+0xc8>
    2988:	61 e0       	ldi	r22, 0x01	; 1
    298a:	80 e0       	ldi	r24, 0x00	; 0
    298c:	02 dc       	rcall	.-2044   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    298e:	80 91 92 28 	lds	r24, 0x2892	; 0x802892 <boil2_var>
    2992:	26 e0       	ldi	r18, 0x06	; 6
    2994:	82 9f       	mul	r24, r18
    2996:	c0 01       	movw	r24, r0
    2998:	11 24       	eor	r1, r1
    299a:	87 5e       	subi	r24, 0xE7	; 231
    299c:	94 4d       	sbci	r25, 0xD4	; 212
    299e:	0e 94 28 04 	call	0x850	; 0x850 <Print::print(String const&) [clone .constprop.51]>
    29a2:	1a cf       	rjmp	.-460    	; 0x27d8 <Display1()+0xc8>
    29a4:	81 30       	cpi	r24, 0x01	; 1
    29a6:	09 f0       	breq	.+2      	; 0x29aa <Display1()+0x29a>
    29a8:	3b c0       	rjmp	.+118    	; 0x2a20 <Display1()+0x310>
    29aa:	60 e0       	ldi	r22, 0x00	; 0
    29ac:	80 e0       	ldi	r24, 0x00	; 0
    29ae:	f1 db       	rcall	.-2078   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    29b0:	88 e7       	ldi	r24, 0x78	; 120
    29b2:	9e e8       	ldi	r25, 0x8E	; 142
    29b4:	f1 dc       	rcall	.-1566   	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    29b6:	60 e0       	ldi	r22, 0x00	; 0
    29b8:	8c e0       	ldi	r24, 0x0C	; 12
    29ba:	eb db       	rcall	.-2090   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    29bc:	8b e4       	ldi	r24, 0x4B	; 75
    29be:	9f e8       	ldi	r25, 0x8F	; 143
    29c0:	eb dc       	rcall	.-1578   	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    29c2:	80 91 d7 28 	lds	r24, 0x28D7	; 0x8028d7 <Probe_blink>
    29c6:	91 e0       	ldi	r25, 0x01	; 1
    29c8:	98 0f       	add	r25, r24
    29ca:	90 93 d7 28 	sts	0x28D7, r25	; 0x8028d7 <Probe_blink>
    29ce:	9c ef       	ldi	r25, 0xFC	; 252
    29d0:	98 0f       	add	r25, r24
    29d2:	92 30       	cpi	r25, 0x02	; 2
    29d4:	a8 f4       	brcc	.+42     	; 0x2a00 <Display1()+0x2f0>
    29d6:	60 e0       	ldi	r22, 0x00	; 0
    29d8:	87 e0       	ldi	r24, 0x07	; 7
    29da:	db db       	rcall	.-2122   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    29dc:	8e e3       	ldi	r24, 0x3E	; 62
    29de:	9e e8       	ldi	r25, 0x8E	; 142
    29e0:	db dc       	rcall	.-1610   	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    29e2:	10 92 d7 28 	sts	0x28D7, r1	; 0x8028d7 <Probe_blink>
    29e6:	61 e0       	ldi	r22, 0x01	; 1
    29e8:	80 e0       	ldi	r24, 0x00	; 0
    29ea:	d3 db       	rcall	.-2138   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    29ec:	8e e2       	ldi	r24, 0x2E	; 46
    29ee:	9f e8       	ldi	r25, 0x8F	; 143
    29f0:	d3 dc       	rcall	.-1626   	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    29f2:	61 e0       	ldi	r22, 0x01	; 1
    29f4:	8a e0       	ldi	r24, 0x0A	; 10
    29f6:	cd db       	rcall	.-2150   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    29f8:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
    29fc:	c7 dc       	rcall	.-1650   	; 0x238c <Print::print(unsigned char, int) [clone .constprop.58]>
    29fe:	ec ce       	rjmp	.-552    	; 0x27d8 <Display1()+0xc8>
    2a00:	84 30       	cpi	r24, 0x04	; 4
    2a02:	88 f7       	brcc	.-30     	; 0x29e6 <Display1()+0x2d6>
    2a04:	60 e0       	ldi	r22, 0x00	; 0
    2a06:	87 e0       	ldi	r24, 0x07	; 7
    2a08:	c4 db       	rcall	.-2168   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
print():
    2a0a:	60 91 01 28 	lds	r22, 0x2801	; 0x802801 <VOLUME>
    2a0e:	70 91 02 28 	lds	r23, 0x2802	; 0x802802 <VOLUME+0x1>
    2a12:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <VOLUME+0x2>
    2a16:	90 91 04 28 	lds	r25, 0x2804	; 0x802804 <VOLUME+0x3>
    2a1a:	4a e0       	ldi	r20, 0x0A	; 10
    2a1c:	54 dc       	rcall	.-1880   	; 0x22c6 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.66]>
    2a1e:	e3 cf       	rjmp	.-58     	; 0x29e6 <Display1()+0x2d6>
LCD():
    2a20:	82 30       	cpi	r24, 0x02	; 2
    2a22:	09 f0       	breq	.+2      	; 0x2a26 <Display1()+0x316>
    2a24:	7e c0       	rjmp	.+252    	; 0x2b22 <Display1()+0x412>
    2a26:	60 e0       	ldi	r22, 0x00	; 0
    2a28:	80 e0       	ldi	r24, 0x00	; 0
    2a2a:	b3 db       	rcall	.-2202   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2a2c:	8f e3       	ldi	r24, 0x3F	; 63
    2a2e:	9f e8       	ldi	r25, 0x8F	; 143
    2a30:	b3 dc       	rcall	.-1690   	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    2a32:	60 e0       	ldi	r22, 0x00	; 0
    2a34:	87 e0       	ldi	r24, 0x07	; 7
    2a36:	ad db       	rcall	.-2214   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
print():
    2a38:	60 91 01 28 	lds	r22, 0x2801	; 0x802801 <VOLUME>
    2a3c:	70 91 02 28 	lds	r23, 0x2802	; 0x802802 <VOLUME+0x1>
    2a40:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <VOLUME+0x2>
    2a44:	90 91 04 28 	lds	r25, 0x2804	; 0x802804 <VOLUME+0x3>
    2a48:	4a e0       	ldi	r20, 0x0A	; 10
    2a4a:	3d dc       	rcall	.-1926   	; 0x22c6 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.66]>
LCD():
    2a4c:	61 e0       	ldi	r22, 0x01	; 1
    2a4e:	80 e0       	ldi	r24, 0x00	; 0
    2a50:	a0 db       	rcall	.-2240   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2a52:	80 e5       	ldi	r24, 0x50	; 80
    2a54:	9f e8       	ldi	r25, 0x8F	; 143
    2a56:	a0 dc       	rcall	.-1728   	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    2a58:	61 e0       	ldi	r22, 0x01	; 1
    2a5a:	8a e0       	ldi	r24, 0x0A	; 10
    2a5c:	9a db       	rcall	.-2252   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2a5e:	8a e3       	ldi	r24, 0x3A	; 58
    2a60:	9e e8       	ldi	r25, 0x8E	; 142
    2a62:	9a dc       	rcall	.-1740   	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    2a64:	80 91 d7 28 	lds	r24, 0x28D7	; 0x8028d7 <Probe_blink>
    2a68:	91 e0       	ldi	r25, 0x01	; 1
    2a6a:	98 0f       	add	r25, r24
    2a6c:	90 93 d7 28 	sts	0x28D7, r25	; 0x8028d7 <Probe_blink>
    2a70:	9c ef       	ldi	r25, 0xFC	; 252
    2a72:	98 0f       	add	r25, r24
    2a74:	92 30       	cpi	r25, 0x02	; 2
    2a76:	48 f4       	brcc	.+18     	; 0x2a8a <Display1()+0x37a>
    2a78:	61 e0       	ldi	r22, 0x01	; 1
    2a7a:	8a e0       	ldi	r24, 0x0A	; 10
    2a7c:	8a db       	rcall	.-2284   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2a7e:	8b e3       	ldi	r24, 0x3B	; 59
    2a80:	9e e8       	ldi	r25, 0x8E	; 142
    2a82:	8a dc       	rcall	.-1772   	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    2a84:	10 92 d7 28 	sts	0x28D7, r1	; 0x8028d7 <Probe_blink>
    2a88:	a7 ce       	rjmp	.-690    	; 0x27d8 <Display1()+0xc8>
    2a8a:	84 30       	cpi	r24, 0x04	; 4
    2a8c:	08 f0       	brcs	.+2      	; 0x2a90 <Display1()+0x380>
    2a8e:	a4 ce       	rjmp	.-696    	; 0x27d8 <Display1()+0xc8>
    2a90:	b0 cf       	rjmp	.-160    	; 0x29f2 <Display1()+0x2e2>
    2a92:	81 30       	cpi	r24, 0x01	; 1
    2a94:	09 f0       	breq	.+2      	; 0x2a98 <Display1()+0x388>
    2a96:	70 c1       	rjmp	.+736    	; 0x2d78 <Display1()+0x668>
    2a98:	e0 91 e3 28 	lds	r30, 0x28E3	; 0x8028e3 <menu_select>
    2a9c:	f0 91 e4 28 	lds	r31, 0x28E4	; 0x8028e4 <menu_select+0x1>
    2aa0:	e8 30       	cpi	r30, 0x08	; 8
    2aa2:	f1 05       	cpc	r31, r1
    2aa4:	08 f0       	brcs	.+2      	; 0x2aa8 <Display1()+0x398>
    2aa6:	3d c0       	rjmp	.+122    	; 0x2b22 <Display1()+0x412>
    2aa8:	e8 5a       	subi	r30, 0xA8	; 168
    2aaa:	fa 4e       	sbci	r31, 0xEA	; 234
    2aac:	0c 94 9c 24 	jmp	0x4938	; 0x4938 <__tablejump2__>
    2ab0:	60 15       	cp	r22, r0
    2ab2:	72 15       	cp	r23, r2
    2ab4:	d1 15       	cp	r29, r1
    2ab6:	22 16       	cp	r2, r18
    2ab8:	c7 16       	cp	r12, r23
    2aba:	68 16       	cp	r6, r24
    2abc:	84 16       	cp	r8, r20
    2abe:	aa 16       	cp	r10, r26
    2ac0:	60 e0       	ldi	r22, 0x00	; 0
    2ac2:	80 e0       	ldi	r24, 0x00	; 0
    2ac4:	66 db       	rcall	.-2356   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2ac6:	8b e5       	ldi	r24, 0x5B	; 91
    2ac8:	9f e8       	ldi	r25, 0x8F	; 143
    2aca:	66 dc       	rcall	.-1844   	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    2acc:	61 e0       	ldi	r22, 0x01	; 1
    2ace:	80 e0       	ldi	r24, 0x00	; 0
    2ad0:	60 db       	rcall	.-2368   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2ad2:	8c e6       	ldi	r24, 0x6C	; 108
    2ad4:	9f e8       	ldi	r25, 0x8F	; 143
    2ad6:	60 dc       	rcall	.-1856   	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    2ad8:	61 e0       	ldi	r22, 0x01	; 1
    2ada:	82 e0       	ldi	r24, 0x02	; 2
    2adc:	5a db       	rcall	.-2380   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2ade:	8f e6       	ldi	r24, 0x6F	; 111
    2ae0:	9f e8       	ldi	r25, 0x8F	; 143
    2ae2:	a6 ce       	rjmp	.-692    	; 0x2830 <Display1()+0x120>
    2ae4:	60 e0       	ldi	r22, 0x00	; 0
    2ae6:	80 e0       	ldi	r24, 0x00	; 0
    2ae8:	54 db       	rcall	.-2392   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2aea:	80 e8       	ldi	r24, 0x80	; 128
    2aec:	9f e8       	ldi	r25, 0x8F	; 143
    2aee:	54 dc       	rcall	.-1880   	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    2af0:	61 e0       	ldi	r22, 0x01	; 1
    2af2:	80 e0       	ldi	r24, 0x00	; 0
    2af4:	4e db       	rcall	.-2404   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2af6:	81 e9       	ldi	r24, 0x91	; 145
    2af8:	9f e8       	ldi	r25, 0x8F	; 143
    2afa:	4e dc       	rcall	.-1892   	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    2afc:	80 91 d7 28 	lds	r24, 0x28D7	; 0x8028d7 <Probe_blink>
    2b00:	91 e0       	ldi	r25, 0x01	; 1
    2b02:	98 0f       	add	r25, r24
    2b04:	90 93 d7 28 	sts	0x28D7, r25	; 0x8028d7 <Probe_blink>
    2b08:	9c ef       	ldi	r25, 0xFC	; 252
    2b0a:	98 0f       	add	r25, r24
    2b0c:	92 30       	cpi	r25, 0x02	; 2
    2b0e:	08 f0       	brcs	.+2      	; 0x2b12 <Display1()+0x402>
    2b10:	3a c0       	rjmp	.+116    	; 0x2b86 <Display1()+0x476>
    2b12:	61 e0       	ldi	r22, 0x01	; 1
    2b14:	89 e0       	ldi	r24, 0x09	; 9
    2b16:	3d db       	rcall	.-2438   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2b18:	8f e3       	ldi	r24, 0x3F	; 63
    2b1a:	9e e8       	ldi	r25, 0x8E	; 142
    2b1c:	3d dc       	rcall	.-1926   	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    2b1e:	10 92 d7 28 	sts	0x28D7, r1	; 0x8028d7 <Probe_blink>
    2b22:	80 91 e5 28 	lds	r24, 0x28E5	; 0x8028e5 <screen>
    2b26:	83 30       	cpi	r24, 0x03	; 3
    2b28:	09 f0       	breq	.+2      	; 0x2b2c <Display1()+0x41c>
    2b2a:	b6 c1       	rjmp	.+876    	; 0x2e98 <Display1()+0x788>
    2b2c:	80 91 c5 28 	lds	r24, 0x28C5	; 0x8028c5 <Temp_Err>
    2b30:	88 23       	and	r24, r24
    2b32:	09 f4       	brne	.+2      	; 0x2b36 <Display1()+0x426>
    2b34:	45 c1       	rjmp	.+650    	; 0x2dc0 <Display1()+0x6b0>
    2b36:	c0 91 d7 28 	lds	r28, 0x28D7	; 0x8028d7 <Probe_blink>
    2b3a:	81 e0       	ldi	r24, 0x01	; 1
    2b3c:	8c 0f       	add	r24, r28
    2b3e:	80 93 d7 28 	sts	0x28D7, r24	; 0x8028d7 <Probe_blink>
digitalWrite():
    2b42:	60 e0       	ldi	r22, 0x00	; 0
    2b44:	87 e1       	ldi	r24, 0x17	; 23
    2b46:	0e 94 c6 04 	call	0x98c	; 0x98c <digitalWrite.part.2>
    2b4a:	61 e0       	ldi	r22, 0x01	; 1
    2b4c:	88 e1       	ldi	r24, 0x18	; 24
    2b4e:	0e 94 c6 04 	call	0x98c	; 0x98c <digitalWrite.part.2>
LCD():
    2b52:	8b ef       	ldi	r24, 0xFB	; 251
    2b54:	8c 0f       	add	r24, r28
    2b56:	82 30       	cpi	r24, 0x02	; 2
    2b58:	08 f0       	brcs	.+2      	; 0x2b5c <Display1()+0x44c>
    2b5a:	1b c1       	rjmp	.+566    	; 0x2d92 <Display1()+0x682>
    2b5c:	60 e0       	ldi	r22, 0x00	; 0
    2b5e:	80 e0       	ldi	r24, 0x00	; 0
    2b60:	18 db       	rcall	.-2512   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2b62:	85 e3       	ldi	r24, 0x35	; 53
    2b64:	9e e8       	ldi	r25, 0x8E	; 142
    2b66:	18 dc       	rcall	.-2000   	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    2b68:	61 e0       	ldi	r22, 0x01	; 1
    2b6a:	80 e0       	ldi	r24, 0x00	; 0
    2b6c:	12 db       	rcall	.-2524   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2b6e:	85 e3       	ldi	r24, 0x35	; 53
    2b70:	9e e8       	ldi	r25, 0x8E	; 142
    2b72:	12 dc       	rcall	.-2012   	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    2b74:	10 92 d7 28 	sts	0x28D7, r1	; 0x8028d7 <Probe_blink>
digitalWrite():
    2b78:	61 e0       	ldi	r22, 0x01	; 1
    2b7a:	87 e1       	ldi	r24, 0x17	; 23
    2b7c:	0e 94 c6 04 	call	0x98c	; 0x98c <digitalWrite.part.2>
    2b80:	60 e0       	ldi	r22, 0x00	; 0
    2b82:	88 e1       	ldi	r24, 0x18	; 24
    2b84:	17 c1       	rjmp	.+558    	; 0x2db4 <Display1()+0x6a4>
LCD():
    2b86:	84 30       	cpi	r24, 0x04	; 4
    2b88:	60 f6       	brcc	.-104    	; 0x2b22 <Display1()+0x412>
    2b8a:	61 e0       	ldi	r22, 0x01	; 1
    2b8c:	89 e0       	ldi	r24, 0x09	; 9
    2b8e:	01 db       	rcall	.-2558   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2b90:	80 91 0e 28 	lds	r24, 0x280E	; 0x80280e <safe_temp1>
    2b94:	fb db       	rcall	.-2058   	; 0x238c <Print::print(unsigned char, int) [clone .constprop.58]>
    2b96:	61 e0       	ldi	r22, 0x01	; 1
    2b98:	8b e0       	ldi	r24, 0x0B	; 11
    2b9a:	fb da       	rcall	.-2570   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2b9c:	82 e4       	ldi	r24, 0x42	; 66
    2b9e:	9e e8       	ldi	r25, 0x8E	; 142
    2ba0:	47 ce       	rjmp	.-882    	; 0x2830 <Display1()+0x120>
    2ba2:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <eepromclass::Read_memory() [clone .constprop.71]>
    2ba6:	0e 94 bc 06 	call	0xd78	; 0xd78 <Processclass::process_stop() [clone .constprop.53]>
    2baa:	10 92 ca 28 	sts	0x28CA, r1	; 0x8028ca <sec_Heater>
    2bae:	60 e0       	ldi	r22, 0x00	; 0
    2bb0:	80 e0       	ldi	r24, 0x00	; 0
    2bb2:	ef da       	rcall	.-2594   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2bb4:	82 ea       	ldi	r24, 0xA2	; 162
    2bb6:	9f e8       	ldi	r25, 0x8F	; 143
    2bb8:	ef db       	rcall	.-2082   	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    2bba:	60 e0       	ldi	r22, 0x00	; 0
    2bbc:	87 e0       	ldi	r24, 0x07	; 7
    2bbe:	e9 da       	rcall	.-2606   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2bc0:	60 91 9b 28 	lds	r22, 0x289B	; 0x80289b <Heater_temp>
    2bc4:	70 91 9c 28 	lds	r23, 0x289C	; 0x80289c <Heater_temp+0x1>
    2bc8:	80 91 9d 28 	lds	r24, 0x289D	; 0x80289d <Heater_temp+0x2>
    2bcc:	90 91 9e 28 	lds	r25, 0x289E	; 0x80289e <Heater_temp+0x3>
    2bd0:	d0 dc       	rcall	.-1632   	; 0x2572 <Print::print(double, int) [clone .constprop.54]>
    2bd2:	60 e0       	ldi	r22, 0x00	; 0
    2bd4:	8b e0       	ldi	r24, 0x0B	; 11
    2bd6:	dd da       	rcall	.-2630   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2bd8:	84 e4       	ldi	r24, 0x44	; 68
    2bda:	9e e8       	ldi	r25, 0x8E	; 142
    2bdc:	dd db       	rcall	.-2118   	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    2bde:	60 e0       	ldi	r22, 0x00	; 0
    2be0:	8c e0       	ldi	r24, 0x0C	; 12
    2be2:	d7 da       	rcall	.-2642   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2be4:	60 91 bc 28 	lds	r22, 0x28BC	; 0x8028bc <calib_Heater1>
    2be8:	70 91 bd 28 	lds	r23, 0x28BD	; 0x8028bd <calib_Heater1+0x1>
    2bec:	80 91 be 28 	lds	r24, 0x28BE	; 0x8028be <calib_Heater1+0x2>
    2bf0:	90 91 bf 28 	lds	r25, 0x28BF	; 0x8028bf <calib_Heater1+0x3>
    2bf4:	be dc       	rcall	.-1668   	; 0x2572 <Print::print(double, int) [clone .constprop.54]>
    2bf6:	61 e0       	ldi	r22, 0x01	; 1
    2bf8:	80 e0       	ldi	r24, 0x00	; 0
    2bfa:	cb da       	rcall	.-2666   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2bfc:	8a ea       	ldi	r24, 0xAA	; 170
    2bfe:	9f e8       	ldi	r25, 0x8F	; 143
    2c00:	cb db       	rcall	.-2154   	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    2c02:	80 91 d7 28 	lds	r24, 0x28D7	; 0x8028d7 <Probe_blink>
    2c06:	91 e0       	ldi	r25, 0x01	; 1
    2c08:	98 0f       	add	r25, r24
    2c0a:	90 93 d7 28 	sts	0x28D7, r25	; 0x8028d7 <Probe_blink>
    2c0e:	9c ef       	ldi	r25, 0xFC	; 252
    2c10:	98 0f       	add	r25, r24
    2c12:	92 30       	cpi	r25, 0x02	; 2
    2c14:	30 f4       	brcc	.+12     	; 0x2c22 <Display1()+0x512>
    2c16:	61 e0       	ldi	r22, 0x01	; 1
    2c18:	88 e0       	ldi	r24, 0x08	; 8
    2c1a:	bb da       	rcall	.-2698   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2c1c:	85 e3       	ldi	r24, 0x35	; 53
    2c1e:	9e e8       	ldi	r25, 0x8E	; 142
    2c20:	7d cf       	rjmp	.-262    	; 0x2b1c <Display1()+0x40c>
    2c22:	84 30       	cpi	r24, 0x04	; 4
    2c24:	08 f0       	brcs	.+2      	; 0x2c28 <Display1()+0x518>
    2c26:	7d cf       	rjmp	.-262    	; 0x2b22 <Display1()+0x412>
    2c28:	61 e0       	ldi	r22, 0x01	; 1
    2c2a:	88 e0       	ldi	r24, 0x08	; 8
    2c2c:	b2 da       	rcall	.-2716   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2c2e:	80 91 36 28 	lds	r24, 0x2836	; 0x802836 <Probe1>
    2c32:	90 91 37 28 	lds	r25, 0x2837	; 0x802837 <Probe1+0x1>
    2c36:	84 db       	rcall	.-2296   	; 0x2340 <Print::print(int, int) [clone .constprop.62]>
    2c38:	61 e0       	ldi	r22, 0x01	; 1
    2c3a:	8b e0       	ldi	r24, 0x0B	; 11
    2c3c:	aa da       	rcall	.-2732   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2c3e:	85 e3       	ldi	r24, 0x35	; 53
    2c40:	9e e8       	ldi	r25, 0x8E	; 142
    2c42:	f6 cd       	rjmp	.-1044   	; 0x2830 <Display1()+0x120>
    2c44:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <eepromclass::Read_memory() [clone .constprop.71]>
    2c48:	0e 94 bc 06 	call	0xd78	; 0xd78 <Processclass::process_stop() [clone .constprop.53]>
    2c4c:	10 92 ca 28 	sts	0x28CA, r1	; 0x8028ca <sec_Heater>
    2c50:	60 e0       	ldi	r22, 0x00	; 0
    2c52:	80 e0       	ldi	r24, 0x00	; 0
    2c54:	9e da       	rcall	.-2756   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2c56:	8a eb       	ldi	r24, 0xBA	; 186
    2c58:	9f e8       	ldi	r25, 0x8F	; 143
    2c5a:	9e db       	rcall	.-2244   	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    2c5c:	60 e0       	ldi	r22, 0x00	; 0
    2c5e:	87 e0       	ldi	r24, 0x07	; 7
    2c60:	98 da       	rcall	.-2768   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2c62:	60 91 a6 28 	lds	r22, 0x28A6	; 0x8028a6 <Heater_temp2>
    2c66:	70 91 a7 28 	lds	r23, 0x28A7	; 0x8028a7 <Heater_temp2+0x1>
    2c6a:	80 91 a8 28 	lds	r24, 0x28A8	; 0x8028a8 <Heater_temp2+0x2>
    2c6e:	90 91 a9 28 	lds	r25, 0x28A9	; 0x8028a9 <Heater_temp2+0x3>
    2c72:	7f dc       	rcall	.-1794   	; 0x2572 <Print::print(double, int) [clone .constprop.54]>
    2c74:	60 e0       	ldi	r22, 0x00	; 0
    2c76:	8b e0       	ldi	r24, 0x0B	; 11
    2c78:	8c da       	rcall	.-2792   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2c7a:	84 e4       	ldi	r24, 0x44	; 68
    2c7c:	9e e8       	ldi	r25, 0x8E	; 142
    2c7e:	8c db       	rcall	.-2280   	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    2c80:	60 e0       	ldi	r22, 0x00	; 0
    2c82:	8c e0       	ldi	r24, 0x0C	; 12
    2c84:	86 da       	rcall	.-2804   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2c86:	60 91 b8 28 	lds	r22, 0x28B8	; 0x8028b8 <calib_Heater2>
    2c8a:	70 91 b9 28 	lds	r23, 0x28B9	; 0x8028b9 <calib_Heater2+0x1>
    2c8e:	80 91 ba 28 	lds	r24, 0x28BA	; 0x8028ba <calib_Heater2+0x2>
    2c92:	90 91 bb 28 	lds	r25, 0x28BB	; 0x8028bb <calib_Heater2+0x3>
    2c96:	6d dc       	rcall	.-1830   	; 0x2572 <Print::print(double, int) [clone .constprop.54]>
    2c98:	61 e0       	ldi	r22, 0x01	; 1
    2c9a:	80 e0       	ldi	r24, 0x00	; 0
    2c9c:	7a da       	rcall	.-2828   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2c9e:	82 ec       	ldi	r24, 0xC2	; 194
    2ca0:	9f e8       	ldi	r25, 0x8F	; 143
    2ca2:	7a db       	rcall	.-2316   	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    2ca4:	80 91 d7 28 	lds	r24, 0x28D7	; 0x8028d7 <Probe_blink>
    2ca8:	91 e0       	ldi	r25, 0x01	; 1
    2caa:	98 0f       	add	r25, r24
    2cac:	90 93 d7 28 	sts	0x28D7, r25	; 0x8028d7 <Probe_blink>
    2cb0:	9c ef       	ldi	r25, 0xFC	; 252
    2cb2:	98 0f       	add	r25, r24
    2cb4:	92 30       	cpi	r25, 0x02	; 2
    2cb6:	08 f4       	brcc	.+2      	; 0x2cba <Display1()+0x5aa>
    2cb8:	ae cf       	rjmp	.-164    	; 0x2c16 <Display1()+0x506>
    2cba:	84 30       	cpi	r24, 0x04	; 4
    2cbc:	08 f0       	brcs	.+2      	; 0x2cc0 <Display1()+0x5b0>
    2cbe:	31 cf       	rjmp	.-414    	; 0x2b22 <Display1()+0x412>
    2cc0:	61 e0       	ldi	r22, 0x01	; 1
    2cc2:	88 e0       	ldi	r24, 0x08	; 8
    2cc4:	66 da       	rcall	.-2868   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2cc6:	80 91 34 28 	lds	r24, 0x2834	; 0x802834 <Probe2>
    2cca:	90 91 35 28 	lds	r25, 0x2835	; 0x802835 <Probe2+0x1>
    2cce:	b3 cf       	rjmp	.-154    	; 0x2c36 <Display1()+0x526>
    2cd0:	60 e0       	ldi	r22, 0x00	; 0
    2cd2:	80 e0       	ldi	r24, 0x00	; 0
    2cd4:	5e da       	rcall	.-2884   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2cd6:	83 ed       	ldi	r24, 0xD3	; 211
    2cd8:	9f e8       	ldi	r25, 0x8F	; 143
    2cda:	5e db       	rcall	.-2372   	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    2cdc:	61 e0       	ldi	r22, 0x01	; 1
    2cde:	80 e0       	ldi	r24, 0x00	; 0
    2ce0:	58 da       	rcall	.-2896   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2ce2:	84 ee       	ldi	r24, 0xE4	; 228
    2ce4:	9f e8       	ldi	r25, 0x8F	; 143
    2ce6:	58 db       	rcall	.-2384   	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    2ce8:	61 e0       	ldi	r22, 0x01	; 1
    2cea:	82 e0       	ldi	r24, 0x02	; 2
    2cec:	52 da       	rcall	.-2908   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2cee:	e0 91 33 28 	lds	r30, 0x2833	; 0x802833 <Flow_override>
    2cf2:	f0 e0       	ldi	r31, 0x00	; 0
    2cf4:	ee 0f       	add	r30, r30
    2cf6:	ff 1f       	adc	r31, r31
    2cf8:	ee 5a       	subi	r30, 0xAE	; 174
    2cfa:	f2 47       	sbci	r31, 0x72	; 114
    2cfc:	80 81       	ld	r24, Z
    2cfe:	91 81       	ldd	r25, Z+1	; 0x01
    2d00:	4b db       	rcall	.-2410   	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    2d02:	61 e0       	ldi	r22, 0x01	; 1
    2d04:	85 e0       	ldi	r24, 0x05	; 5
    2d06:	9a cf       	rjmp	.-204    	; 0x2c3c <Display1()+0x52c>
    2d08:	60 e0       	ldi	r22, 0x00	; 0
    2d0a:	80 e0       	ldi	r24, 0x00	; 0
    2d0c:	42 da       	rcall	.-2940   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2d0e:	8e ee       	ldi	r24, 0xEE	; 238
    2d10:	9f e8       	ldi	r25, 0x8F	; 143
    2d12:	42 db       	rcall	.-2428   	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    2d14:	61 e0       	ldi	r22, 0x01	; 1
    2d16:	80 e0       	ldi	r24, 0x00	; 0
    2d18:	3c da       	rcall	.-2952   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2d1a:	8f ef       	ldi	r24, 0xFF	; 255
    2d1c:	9f e8       	ldi	r25, 0x8F	; 143
    2d1e:	3c db       	rcall	.-2440   	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    2d20:	80 91 d7 28 	lds	r24, 0x28D7	; 0x8028d7 <Probe_blink>
    2d24:	91 e0       	ldi	r25, 0x01	; 1
    2d26:	98 0f       	add	r25, r24
    2d28:	90 93 d7 28 	sts	0x28D7, r25	; 0x8028d7 <Probe_blink>
    2d2c:	9c ef       	ldi	r25, 0xFC	; 252
    2d2e:	98 0f       	add	r25, r24
    2d30:	92 30       	cpi	r25, 0x02	; 2
    2d32:	30 f4       	brcc	.+12     	; 0x2d40 <Display1()+0x630>
    2d34:	61 e0       	ldi	r22, 0x01	; 1
    2d36:	86 e0       	ldi	r24, 0x06	; 6
    2d38:	2c da       	rcall	.-2984   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2d3a:	81 e4       	ldi	r24, 0x41	; 65
    2d3c:	9e e8       	ldi	r25, 0x8E	; 142
    2d3e:	ee ce       	rjmp	.-548    	; 0x2b1c <Display1()+0x40c>
    2d40:	84 30       	cpi	r24, 0x04	; 4
    2d42:	08 f0       	brcs	.+2      	; 0x2d46 <Display1()+0x636>
    2d44:	ee ce       	rjmp	.-548    	; 0x2b22 <Display1()+0x412>
    2d46:	61 e0       	ldi	r22, 0x01	; 1
    2d48:	86 e0       	ldi	r24, 0x06	; 6
    2d4a:	23 da       	rcall	.-3002   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2d4c:	80 91 0f 28 	lds	r24, 0x280F	; 0x80280f <Disp_t>
    2d50:	1d db       	rcall	.-2502   	; 0x238c <Print::print(unsigned char, int) [clone .constprop.58]>
    2d52:	e7 ce       	rjmp	.-562    	; 0x2b22 <Display1()+0x412>
    2d54:	60 e0       	ldi	r22, 0x00	; 0
    2d56:	80 e0       	ldi	r24, 0x00	; 0
    2d58:	1c da       	rcall	.-3016   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2d5a:	80 e1       	ldi	r24, 0x10	; 16
    2d5c:	90 e9       	ldi	r25, 0x90	; 144
    2d5e:	1c db       	rcall	.-2504   	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    2d60:	61 e0       	ldi	r22, 0x01	; 1
    2d62:	80 e0       	ldi	r24, 0x00	; 0
    2d64:	16 da       	rcall	.-3028   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2d66:	81 e2       	ldi	r24, 0x21	; 33
    2d68:	90 e9       	ldi	r25, 0x90	; 144
    2d6a:	16 db       	rcall	.-2516   	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    2d6c:	61 e0       	ldi	r22, 0x01	; 1
    2d6e:	82 e0       	ldi	r24, 0x02	; 2
    2d70:	10 da       	rcall	.-3040   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2d72:	e0 91 94 28 	lds	r30, 0x2894	; 0x802894 <L_override>
    2d76:	bd cf       	rjmp	.-134    	; 0x2cf2 <Display1()+0x5e2>
    2d78:	82 50       	subi	r24, 0x02	; 2
    2d7a:	8f 30       	cpi	r24, 0x0F	; 15
    2d7c:	08 f0       	brcs	.+2      	; 0x2d80 <Display1()+0x670>
    2d7e:	8c c0       	rjmp	.+280    	; 0x2e98 <Display1()+0x788>
    2d80:	80 91 e3 28 	lds	r24, 0x28E3	; 0x8028e3 <menu_select>
    2d84:	90 91 e4 28 	lds	r25, 0x28E4	; 0x8028e4 <menu_select+0x1>
    2d88:	04 97       	sbiw	r24, 0x04	; 4
    2d8a:	09 f0       	breq	.+2      	; 0x2d8e <Display1()+0x67e>
    2d8c:	85 c0       	rjmp	.+266    	; 0x2e98 <Display1()+0x788>
    2d8e:	0a db       	rcall	.-2540   	; 0x23a4 <Displayclass::pump_disp() [clone .constprop.59]>
    2d90:	c8 ce       	rjmp	.-624    	; 0x2b22 <Display1()+0x412>
    2d92:	c5 30       	cpi	r28, 0x05	; 5
    2d94:	08 f0       	brcs	.+2      	; 0x2d98 <Display1()+0x688>
    2d96:	80 c0       	rjmp	.+256    	; 0x2e98 <Display1()+0x788>
    2d98:	60 e0       	ldi	r22, 0x00	; 0
    2d9a:	80 e0       	ldi	r24, 0x00	; 0
    2d9c:	fa d9       	rcall	.-3084   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2d9e:	8a e2       	ldi	r24, 0x2A	; 42
    2da0:	90 e9       	ldi	r25, 0x90	; 144
    2da2:	fa da       	rcall	.-2572   	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    2da4:	61 e0       	ldi	r22, 0x01	; 1
    2da6:	80 e0       	ldi	r24, 0x00	; 0
    2da8:	f4 d9       	rcall	.-3096   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2daa:	8b e3       	ldi	r24, 0x3B	; 59
    2dac:	90 e9       	ldi	r25, 0x90	; 144
    2dae:	f4 da       	rcall	.-2584   	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
digitalWrite():
    2db0:	60 e0       	ldi	r22, 0x00	; 0
    2db2:	89 e1       	ldi	r24, 0x19	; 25
Display1():
    2db4:	df 91       	pop	r29
    2db6:	cf 91       	pop	r28
    2db8:	1f 91       	pop	r17
    2dba:	0f 91       	pop	r16
digitalWrite():
    2dbc:	0c 94 c6 04 	jmp	0x98c	; 0x98c <digitalWrite.part.2>
LCD():
    2dc0:	80 91 c6 28 	lds	r24, 0x28C6	; 0x8028c6 <Flow_Err>
    2dc4:	88 23       	and	r24, r24
    2dc6:	51 f1       	breq	.+84     	; 0x2e1c <Display1()+0x70c>
    2dc8:	c0 91 d7 28 	lds	r28, 0x28D7	; 0x8028d7 <Probe_blink>
    2dcc:	81 e0       	ldi	r24, 0x01	; 1
    2dce:	8c 0f       	add	r24, r28
    2dd0:	80 93 d7 28 	sts	0x28D7, r24	; 0x8028d7 <Probe_blink>
digitalWrite():
    2dd4:	60 e0       	ldi	r22, 0x00	; 0
    2dd6:	87 e1       	ldi	r24, 0x17	; 23
    2dd8:	0e 94 c6 04 	call	0x98c	; 0x98c <digitalWrite.part.2>
    2ddc:	61 e0       	ldi	r22, 0x01	; 1
    2dde:	88 e1       	ldi	r24, 0x18	; 24
    2de0:	0e 94 c6 04 	call	0x98c	; 0x98c <digitalWrite.part.2>
LCD():
    2de4:	8b ef       	ldi	r24, 0xFB	; 251
    2de6:	8c 0f       	add	r24, r28
    2de8:	82 30       	cpi	r24, 0x02	; 2
    2dea:	48 f4       	brcc	.+18     	; 0x2dfe <Display1()+0x6ee>
    2dec:	60 e0       	ldi	r22, 0x00	; 0
    2dee:	85 e0       	ldi	r24, 0x05	; 5
    2df0:	d0 d9       	rcall	.-3168   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2df2:	85 e3       	ldi	r24, 0x35	; 53
    2df4:	9e e8       	ldi	r25, 0x8E	; 142
    2df6:	d0 da       	rcall	.-2656   	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    2df8:	61 e0       	ldi	r22, 0x01	; 1
    2dfa:	85 e0       	ldi	r24, 0x05	; 5
    2dfc:	b7 ce       	rjmp	.-658    	; 0x2b6c <Display1()+0x45c>
    2dfe:	c5 30       	cpi	r28, 0x05	; 5
    2e00:	08 f0       	brcs	.+2      	; 0x2e04 <Display1()+0x6f4>
    2e02:	4a c0       	rjmp	.+148    	; 0x2e98 <Display1()+0x788>
    2e04:	60 e0       	ldi	r22, 0x00	; 0
    2e06:	80 e0       	ldi	r24, 0x00	; 0
    2e08:	c4 d9       	rcall	.-3192   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2e0a:	8c e4       	ldi	r24, 0x4C	; 76
    2e0c:	90 e9       	ldi	r25, 0x90	; 144
    2e0e:	c4 da       	rcall	.-2680   	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    2e10:	61 e0       	ldi	r22, 0x01	; 1
    2e12:	80 e0       	ldi	r24, 0x00	; 0
    2e14:	be d9       	rcall	.-3204   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2e16:	8d e5       	ldi	r24, 0x5D	; 93
    2e18:	90 e9       	ldi	r25, 0x90	; 144
    2e1a:	c9 cf       	rjmp	.-110    	; 0x2dae <Display1()+0x69e>
    2e1c:	80 91 b7 28 	lds	r24, 0x28B7	; 0x8028b7 <warning_generate>
    2e20:	88 23       	and	r24, r24
    2e22:	09 f4       	brne	.+2      	; 0x2e26 <Display1()+0x716>
    2e24:	39 c0       	rjmp	.+114    	; 0x2e98 <Display1()+0x788>
    2e26:	c0 91 d7 28 	lds	r28, 0x28D7	; 0x8028d7 <Probe_blink>
    2e2a:	81 e0       	ldi	r24, 0x01	; 1
    2e2c:	8c 0f       	add	r24, r28
    2e2e:	80 93 d7 28 	sts	0x28D7, r24	; 0x8028d7 <Probe_blink>
digitalWrite():
    2e32:	61 e0       	ldi	r22, 0x01	; 1
    2e34:	88 e1       	ldi	r24, 0x18	; 24
    2e36:	0e 94 c6 04 	call	0x98c	; 0x98c <digitalWrite.part.2>
    2e3a:	60 e0       	ldi	r22, 0x00	; 0
    2e3c:	87 e1       	ldi	r24, 0x17	; 23
    2e3e:	0e 94 c6 04 	call	0x98c	; 0x98c <digitalWrite.part.2>
LCD():
    2e42:	8b ef       	ldi	r24, 0xFB	; 251
    2e44:	8c 0f       	add	r24, r28
    2e46:	82 30       	cpi	r24, 0x02	; 2
    2e48:	a8 f4       	brcc	.+42     	; 0x2e74 <Display1()+0x764>
    2e4a:	60 e0       	ldi	r22, 0x00	; 0
    2e4c:	80 e0       	ldi	r24, 0x00	; 0
    2e4e:	a1 d9       	rcall	.-3262   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2e50:	85 e3       	ldi	r24, 0x35	; 53
    2e52:	9e e8       	ldi	r25, 0x8E	; 142
    2e54:	a1 da       	rcall	.-2750   	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    2e56:	61 e0       	ldi	r22, 0x01	; 1
    2e58:	80 e0       	ldi	r24, 0x00	; 0
    2e5a:	9b d9       	rcall	.-3274   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2e5c:	85 e3       	ldi	r24, 0x35	; 53
    2e5e:	9e e8       	ldi	r25, 0x8E	; 142
    2e60:	9b da       	rcall	.-2762   	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    2e62:	10 92 d7 28 	sts	0x28D7, r1	; 0x8028d7 <Probe_blink>
digitalWrite():
    2e66:	60 e0       	ldi	r22, 0x00	; 0
    2e68:	88 e1       	ldi	r24, 0x18	; 24
    2e6a:	0e 94 c6 04 	call	0x98c	; 0x98c <digitalWrite.part.2>
    2e6e:	61 e0       	ldi	r22, 0x01	; 1
    2e70:	87 e1       	ldi	r24, 0x17	; 23
    2e72:	a0 cf       	rjmp	.-192    	; 0x2db4 <Display1()+0x6a4>
LCD():
    2e74:	c5 30       	cpi	r28, 0x05	; 5
    2e76:	80 f4       	brcc	.+32     	; 0x2e98 <Display1()+0x788>
    2e78:	60 e0       	ldi	r22, 0x00	; 0
    2e7a:	80 e0       	ldi	r24, 0x00	; 0
    2e7c:	8a d9       	rcall	.-3308   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2e7e:	8e e6       	ldi	r24, 0x6E	; 110
    2e80:	90 e9       	ldi	r25, 0x90	; 144
    2e82:	8a da       	rcall	.-2796   	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    2e84:	61 e0       	ldi	r22, 0x01	; 1
    2e86:	80 e0       	ldi	r24, 0x00	; 0
    2e88:	84 d9       	rcall	.-3320   	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    2e8a:	8f e7       	ldi	r24, 0x7F	; 127
    2e8c:	90 e9       	ldi	r25, 0x90	; 144
Display1():
    2e8e:	df 91       	pop	r29
    2e90:	cf 91       	pop	r28
    2e92:	1f 91       	pop	r17
    2e94:	0f 91       	pop	r16
LCD():
    2e96:	80 ca       	rjmp	.-2816   	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
Display1():
    2e98:	df 91       	pop	r29
    2e9a:	cf 91       	pop	r28
    2e9c:	1f 91       	pop	r17
    2e9e:	0f 91       	pop	r16
    2ea0:	08 95       	ret

00002ea2 <__vector_18>:
__vector_18():
    2ea2:	1f 92       	push	r1
    2ea4:	0f 92       	push	r0
    2ea6:	0f b6       	in	r0, 0x3f	; 63
    2ea8:	0f 92       	push	r0
    2eaa:	11 24       	eor	r1, r1
    2eac:	2f 93       	push	r18
    2eae:	3f 93       	push	r19
    2eb0:	4f 93       	push	r20
    2eb2:	5f 93       	push	r21
    2eb4:	6f 93       	push	r22
    2eb6:	7f 93       	push	r23
    2eb8:	8f 93       	push	r24
    2eba:	9f 93       	push	r25
    2ebc:	af 93       	push	r26
    2ebe:	bf 93       	push	r27
    2ec0:	ef 93       	push	r30
    2ec2:	ff 93       	push	r31
    2ec4:	88 ee       	ldi	r24, 0xE8	; 232
    2ec6:	98 e2       	ldi	r25, 0x28	; 40
    2ec8:	0e 94 14 02 	call	0x428	; 0x428 <UartClass::_tx_data_empty_irq()>
    2ecc:	ff 91       	pop	r31
    2ece:	ef 91       	pop	r30
    2ed0:	bf 91       	pop	r27
    2ed2:	af 91       	pop	r26
    2ed4:	9f 91       	pop	r25
    2ed6:	8f 91       	pop	r24
    2ed8:	7f 91       	pop	r23
    2eda:	6f 91       	pop	r22
    2edc:	5f 91       	pop	r21
    2ede:	4f 91       	pop	r20
    2ee0:	3f 91       	pop	r19
    2ee2:	2f 91       	pop	r18
    2ee4:	0f 90       	pop	r0
    2ee6:	0f be       	out	0x3f, r0	; 63
    2ee8:	0f 90       	pop	r0
    2eea:	1f 90       	pop	r1
    2eec:	18 95       	reti

00002eee <__vector_17>:
__vector_17():
    2eee:	1f 92       	push	r1
    2ef0:	0f 92       	push	r0
    2ef2:	0f b6       	in	r0, 0x3f	; 63
    2ef4:	0f 92       	push	r0
    2ef6:	11 24       	eor	r1, r1
    2ef8:	2f 93       	push	r18
    2efa:	8f 93       	push	r24
    2efc:	9f 93       	push	r25
    2efe:	ef 93       	push	r30
    2f00:	ff 93       	push	r31
_rx_complete_irq():
    2f02:	e0 91 f4 28 	lds	r30, 0x28F4	; 0x8028f4 <Serial+0xc>
    2f06:	f0 91 f5 28 	lds	r31, 0x28F5	; 0x8028f5 <Serial+0xd>
    2f0a:	81 81       	ldd	r24, Z+1	; 0x01
    2f0c:	81 fd       	sbrc	r24, 1
    2f0e:	1b c0       	rjmp	.+54     	; 0x2f46 <__vector_17+0x58>
    2f10:	90 81       	ld	r25, Z
    2f12:	80 91 fe 28 	lds	r24, 0x28FE	; 0x8028fe <Serial+0x16>
    2f16:	8f 5f       	subi	r24, 0xFF	; 255
    2f18:	8f 73       	andi	r24, 0x3F	; 63
    2f1a:	20 91 ff 28 	lds	r18, 0x28FF	; 0x8028ff <Serial+0x17>
    2f1e:	82 17       	cp	r24, r18
    2f20:	41 f0       	breq	.+16     	; 0x2f32 <__vector_17+0x44>
    2f22:	e0 91 fe 28 	lds	r30, 0x28FE	; 0x8028fe <Serial+0x16>
    2f26:	f0 e0       	ldi	r31, 0x00	; 0
    2f28:	e8 51       	subi	r30, 0x18	; 24
    2f2a:	f7 4d       	sbci	r31, 0xD7	; 215
    2f2c:	95 8f       	std	Z+29, r25	; 0x1d
    2f2e:	80 93 fe 28 	sts	0x28FE, r24	; 0x8028fe <Serial+0x16>
__vector_17():
    2f32:	ff 91       	pop	r31
    2f34:	ef 91       	pop	r30
    2f36:	9f 91       	pop	r25
    2f38:	8f 91       	pop	r24
    2f3a:	2f 91       	pop	r18
    2f3c:	0f 90       	pop	r0
    2f3e:	0f be       	out	0x3f, r0	; 63
    2f40:	0f 90       	pop	r0
    2f42:	1f 90       	pop	r1
    2f44:	18 95       	reti
_rx_complete_irq():
    2f46:	80 81       	ld	r24, Z
    2f48:	f4 cf       	rjmp	.-24     	; 0x2f32 <__vector_17+0x44>

00002f4a <__vector_13>:
__vector_13():
    2f4a:	1f 92       	push	r1
    2f4c:	0f 92       	push	r0
    2f4e:	0f b6       	in	r0, 0x3f	; 63
    2f50:	0f 92       	push	r0
    2f52:	11 24       	eor	r1, r1
    2f54:	8f 93       	push	r24
    2f56:	9f 93       	push	r25
    2f58:	af 93       	push	r26
    2f5a:	bf 93       	push	r27
    2f5c:	80 91 8d 28 	lds	r24, 0x288D	; 0x80288d <timer_toggle_count>
    2f60:	90 91 8e 28 	lds	r25, 0x288E	; 0x80288e <timer_toggle_count+0x1>
    2f64:	a0 91 8f 28 	lds	r26, 0x288F	; 0x80288f <timer_toggle_count+0x2>
    2f68:	b0 91 90 28 	lds	r27, 0x2890	; 0x802890 <timer_toggle_count+0x3>
    2f6c:	89 2b       	or	r24, r25
    2f6e:	8a 2b       	or	r24, r26
    2f70:	8b 2b       	or	r24, r27
    2f72:	79 f1       	breq	.+94     	; 0x2fd2 <__vector_13+0x88>
    2f74:	80 91 8c 28 	lds	r24, 0x288C	; 0x80288c <timer_bit_mask>
    2f78:	80 b9       	out	0x00, r24	; 0
    2f7a:	80 91 8d 28 	lds	r24, 0x288D	; 0x80288d <timer_toggle_count>
    2f7e:	90 91 8e 28 	lds	r25, 0x288E	; 0x80288e <timer_toggle_count+0x1>
    2f82:	a0 91 8f 28 	lds	r26, 0x288F	; 0x80288f <timer_toggle_count+0x2>
    2f86:	b0 91 90 28 	lds	r27, 0x2890	; 0x802890 <timer_toggle_count+0x3>
    2f8a:	18 16       	cp	r1, r24
    2f8c:	19 06       	cpc	r1, r25
    2f8e:	1a 06       	cpc	r1, r26
    2f90:	1b 06       	cpc	r1, r27
    2f92:	9c f4       	brge	.+38     	; 0x2fba <__vector_13+0x70>
    2f94:	80 91 8d 28 	lds	r24, 0x288D	; 0x80288d <timer_toggle_count>
    2f98:	90 91 8e 28 	lds	r25, 0x288E	; 0x80288e <timer_toggle_count+0x1>
    2f9c:	a0 91 8f 28 	lds	r26, 0x288F	; 0x80288f <timer_toggle_count+0x2>
    2fa0:	b0 91 90 28 	lds	r27, 0x2890	; 0x802890 <timer_toggle_count+0x3>
    2fa4:	01 97       	sbiw	r24, 0x01	; 1
    2fa6:	a1 09       	sbc	r26, r1
    2fa8:	b1 09       	sbc	r27, r1
    2faa:	80 93 8d 28 	sts	0x288D, r24	; 0x80288d <timer_toggle_count>
    2fae:	90 93 8e 28 	sts	0x288E, r25	; 0x80288e <timer_toggle_count+0x1>
    2fb2:	a0 93 8f 28 	sts	0x288F, r26	; 0x80288f <timer_toggle_count+0x2>
    2fb6:	b0 93 90 28 	sts	0x2890, r27	; 0x802890 <timer_toggle_count+0x3>
    2fba:	81 e0       	ldi	r24, 0x01	; 1
    2fbc:	80 93 96 0a 	sts	0x0A96, r24	; 0x800a96 <__TEXT_REGION_LENGTH__+0x7f4a96>
    2fc0:	bf 91       	pop	r27
    2fc2:	af 91       	pop	r26
    2fc4:	9f 91       	pop	r25
    2fc6:	8f 91       	pop	r24
    2fc8:	0f 90       	pop	r0
    2fca:	0f be       	out	0x3f, r0	; 63
    2fcc:	0f 90       	pop	r0
    2fce:	1f 90       	pop	r1
    2fd0:	18 95       	reti
    2fd2:	80 91 8d 28 	lds	r24, 0x288D	; 0x80288d <timer_toggle_count>
    2fd6:	90 91 8e 28 	lds	r25, 0x288E	; 0x80288e <timer_toggle_count+0x1>
    2fda:	a0 91 8f 28 	lds	r26, 0x288F	; 0x80288f <timer_toggle_count+0x2>
    2fde:	b0 91 90 28 	lds	r27, 0x2890	; 0x802890 <timer_toggle_count+0x3>
    2fe2:	89 2b       	or	r24, r25
    2fe4:	8a 2b       	or	r24, r26
    2fe6:	8b 2b       	or	r24, r27
    2fe8:	41 f7       	brne	.-48     	; 0x2fba <__vector_13+0x70>
disableTimer():
    2fea:	10 92 95 0a 	sts	0x0A95, r1	; 0x800a95 <__TEXT_REGION_LENGTH__+0x7f4a95>
    2fee:	10 92 90 0a 	sts	0x0A90, r1	; 0x800a90 <__TEXT_REGION_LENGTH__+0x7f4a90>
    2ff2:	e3 cf       	rjmp	.-58     	; 0x2fba <__vector_13+0x70>

00002ff4 <__vector_25>:
__vector_25():
    2ff4:	1f 92       	push	r1
    2ff6:	0f 92       	push	r0
    2ff8:	0f b6       	in	r0, 0x3f	; 63
    2ffa:	0f 92       	push	r0
    2ffc:	11 24       	eor	r1, r1
    2ffe:	8f 93       	push	r24
    3000:	9f 93       	push	r25
    3002:	af 93       	push	r26
    3004:	bf 93       	push	r27
    3006:	80 91 88 28 	lds	r24, 0x2888	; 0x802888 <timer_millis>
    300a:	90 91 89 28 	lds	r25, 0x2889	; 0x802889 <timer_millis+0x1>
    300e:	a0 91 8a 28 	lds	r26, 0x288A	; 0x80288a <timer_millis+0x2>
    3012:	b0 91 8b 28 	lds	r27, 0x288B	; 0x80288b <timer_millis+0x3>
    3016:	01 96       	adiw	r24, 0x01	; 1
    3018:	a1 1d       	adc	r26, r1
    301a:	b1 1d       	adc	r27, r1
    301c:	80 93 88 28 	sts	0x2888, r24	; 0x802888 <timer_millis>
    3020:	90 93 89 28 	sts	0x2889, r25	; 0x802889 <timer_millis+0x1>
    3024:	a0 93 8a 28 	sts	0x288A, r26	; 0x80288a <timer_millis+0x2>
    3028:	b0 93 8b 28 	sts	0x288B, r27	; 0x80288b <timer_millis+0x3>
    302c:	81 e0       	ldi	r24, 0x01	; 1
    302e:	80 93 a6 0a 	sts	0x0AA6, r24	; 0x800aa6 <__TEXT_REGION_LENGTH__+0x7f4aa6>
    3032:	bf 91       	pop	r27
    3034:	af 91       	pop	r26
    3036:	9f 91       	pop	r25
    3038:	8f 91       	pop	r24
    303a:	0f 90       	pop	r0
    303c:	0f be       	out	0x3f, r0	; 63
    303e:	0f 90       	pop	r0
    3040:	1f 90       	pop	r1
    3042:	18 95       	reti

00003044 <__vector_14>:
__vector_14():
    3044:	1f 92       	push	r1
    3046:	0f 92       	push	r0
    3048:	0f b6       	in	r0, 0x3f	; 63
    304a:	0f 92       	push	r0
    304c:	11 24       	eor	r1, r1
    304e:	2f 93       	push	r18
    3050:	3f 93       	push	r19
    3052:	4f 93       	push	r20
    3054:	5f 93       	push	r21
    3056:	6f 93       	push	r22
    3058:	7f 93       	push	r23
    305a:	8f 93       	push	r24
    305c:	9f 93       	push	r25
    305e:	af 93       	push	r26
    3060:	bf 93       	push	r27
    3062:	cf 93       	push	r28
    3064:	ef 93       	push	r30
    3066:	ff 93       	push	r31
TWI_SlaveInterruptHandler():
    3068:	c0 91 ab 08 	lds	r28, 0x08AB	; 0x8008ab <__TEXT_REGION_LENGTH__+0x7f48ab>
    306c:	c2 ff       	sbrs	r28, 2
    306e:	0a c0       	rjmp	.+20     	; 0x3084 <__vector_14+0x40>
    3070:	10 92 87 28 	sts	0x2887, r1	; 0x802887 <slave_bytesRead>
    3074:	10 92 86 28 	sts	0x2886, r1	; 0x802886 <slave_bytesWritten>
    3078:	10 92 85 28 	sts	0x2885, r1	; 0x802885 <slave_bytesToWrite>
    307c:	84 e0       	ldi	r24, 0x04	; 4
    307e:	0e 94 02 07 	call	0xe04	; 0xe04 <TWI_SlaveTransactionFinished>
    3082:	12 c0       	rjmp	.+36     	; 0x30a8 <__vector_14+0x64>
    3084:	c6 ff       	sbrs	r28, 6
    3086:	2d c0       	rjmp	.+90     	; 0x30e2 <__vector_14+0x9e>
    3088:	80 91 84 28 	lds	r24, 0x2884	; 0x802884 <slave_callUserReceive>
    308c:	81 30       	cpi	r24, 0x01	; 1
    308e:	41 f4       	brne	.+16     	; 0x30a0 <__vector_14+0x5c>
    3090:	80 91 87 28 	lds	r24, 0x2887	; 0x802887 <slave_bytesRead>
    3094:	90 e0       	ldi	r25, 0x00	; 0
    3096:	f0 e0       	ldi	r31, 0x00	; 0
    3098:	e0 e0       	ldi	r30, 0x00	; 0
    309a:	09 95       	icall
    309c:	10 92 84 28 	sts	0x2884, r1	; 0x802884 <slave_callUserReceive>
    30a0:	c0 ff       	sbrs	r28, 0
    30a2:	14 c0       	rjmp	.+40     	; 0x30cc <__vector_14+0x88>
    30a4:	0e 94 0f 07 	call	0xe1e	; 0xe1e <TWI_SlaveAddressMatchHandler>
__vector_14():
    30a8:	ff 91       	pop	r31
    30aa:	ef 91       	pop	r30
    30ac:	cf 91       	pop	r28
    30ae:	bf 91       	pop	r27
    30b0:	af 91       	pop	r26
    30b2:	9f 91       	pop	r25
    30b4:	8f 91       	pop	r24
    30b6:	7f 91       	pop	r23
    30b8:	6f 91       	pop	r22
    30ba:	5f 91       	pop	r21
    30bc:	4f 91       	pop	r20
    30be:	3f 91       	pop	r19
    30c0:	2f 91       	pop	r18
    30c2:	0f 90       	pop	r0
    30c4:	0f be       	out	0x3f, r0	; 63
    30c6:	0f 90       	pop	r0
    30c8:	1f 90       	pop	r1
    30ca:	18 95       	reti
TWI_SlaveStopHandler():
    30cc:	80 e4       	ldi	r24, 0x40	; 64
    30ce:	80 93 ab 08 	sts	0x08AB, r24	; 0x8008ab <__TEXT_REGION_LENGTH__+0x7f48ab>
    30d2:	81 e0       	ldi	r24, 0x01	; 1
    30d4:	0e 94 02 07 	call	0xe04	; 0xe04 <TWI_SlaveTransactionFinished>
TWI_SlaveInterruptHandler():
    30d8:	80 91 ab 08 	lds	r24, 0x08AB	; 0x8008ab <__TEXT_REGION_LENGTH__+0x7f48ab>
    30dc:	85 ff       	sbrs	r24, 5
    30de:	e4 cf       	rjmp	.-56     	; 0x30a8 <__vector_14+0x64>
    30e0:	e1 cf       	rjmp	.-62     	; 0x30a4 <__vector_14+0x60>
    30e2:	c7 ff       	sbrs	r28, 7
    30e4:	50 c0       	rjmp	.+160    	; 0x3186 <__vector_14+0x142>
    30e6:	c3 ff       	sbrs	r28, 3
    30e8:	08 c0       	rjmp	.+16     	; 0x30fa <__vector_14+0xb6>
    30ea:	10 92 87 28 	sts	0x2887, r1	; 0x802887 <slave_bytesRead>
    30ee:	10 92 86 28 	sts	0x2886, r1	; 0x802886 <slave_bytesWritten>
    30f2:	10 92 85 28 	sts	0x2885, r1	; 0x802885 <slave_bytesToWrite>
    30f6:	83 e0       	ldi	r24, 0x03	; 3
    30f8:	c2 cf       	rjmp	.-124    	; 0x307e <__vector_14+0x3a>
TWI_SlaveDataHandler():
    30fa:	80 91 a9 08 	lds	r24, 0x08A9	; 0x8008a9 <__TEXT_REGION_LENGTH__+0x7f48a9>
    30fe:	80 66       	ori	r24, 0x60	; 96
    3100:	80 93 a9 08 	sts	0x08A9, r24	; 0x8008a9 <__TEXT_REGION_LENGTH__+0x7f48a9>
    3104:	80 91 ab 08 	lds	r24, 0x08AB	; 0x8008ab <__TEXT_REGION_LENGTH__+0x7f48ab>
    3108:	81 ff       	sbrs	r24, 1
    310a:	26 c0       	rjmp	.+76     	; 0x3158 <__vector_14+0x114>
TWI_SlaveWriteHandler():
    310c:	80 91 86 28 	lds	r24, 0x2886	; 0x802886 <slave_bytesWritten>
    3110:	88 23       	and	r24, r24
    3112:	49 f0       	breq	.+18     	; 0x3126 <__vector_14+0xe2>
    3114:	80 91 ab 08 	lds	r24, 0x08AB	; 0x8008ab <__TEXT_REGION_LENGTH__+0x7f48ab>
    3118:	84 ff       	sbrs	r24, 4
    311a:	05 c0       	rjmp	.+10     	; 0x3126 <__vector_14+0xe2>
    311c:	82 e0       	ldi	r24, 0x02	; 2
    311e:	80 93 aa 08 	sts	0x08AA, r24	; 0x8008aa <__TEXT_REGION_LENGTH__+0x7f48aa>
    3122:	81 e0       	ldi	r24, 0x01	; 1
    3124:	ac cf       	rjmp	.-168    	; 0x307e <__vector_14+0x3a>
    3126:	90 91 86 28 	lds	r25, 0x2886	; 0x802886 <slave_bytesWritten>
    312a:	80 91 85 28 	lds	r24, 0x2885	; 0x802885 <slave_bytesToWrite>
    312e:	98 17       	cp	r25, r24
    3130:	78 f4       	brcc	.+30     	; 0x3150 <__vector_14+0x10c>
    3132:	e0 91 86 28 	lds	r30, 0x2886	; 0x802886 <slave_bytesWritten>
    3136:	f0 e0       	ldi	r31, 0x00	; 0
    3138:	80 81       	ld	r24, Z
    313a:	80 93 ad 08 	sts	0x08AD, r24	; 0x8008ad <__TEXT_REGION_LENGTH__+0x7f48ad>
    313e:	80 91 86 28 	lds	r24, 0x2886	; 0x802886 <slave_bytesWritten>
    3142:	8f 5f       	subi	r24, 0xFF	; 255
    3144:	80 93 86 28 	sts	0x2886, r24	; 0x802886 <slave_bytesWritten>
TWI_SlaveReadHandler():
    3148:	83 e0       	ldi	r24, 0x03	; 3
    314a:	80 93 aa 08 	sts	0x08AA, r24	; 0x8008aa <__TEXT_REGION_LENGTH__+0x7f48aa>
    314e:	ac cf       	rjmp	.-168    	; 0x30a8 <__vector_14+0x64>
TWI_SlaveWriteHandler():
    3150:	82 e0       	ldi	r24, 0x02	; 2
    3152:	80 93 aa 08 	sts	0x08AA, r24	; 0x8008aa <__TEXT_REGION_LENGTH__+0x7f48aa>
    3156:	93 cf       	rjmp	.-218    	; 0x307e <__vector_14+0x3a>
TWI_SlaveReadHandler():
    3158:	90 91 87 28 	lds	r25, 0x2887	; 0x802887 <slave_bytesRead>
    315c:	80 91 83 28 	lds	r24, 0x2883	; 0x802883 <slave_bytesToRead>
    3160:	98 17       	cp	r25, r24
    3162:	60 f4       	brcc	.+24     	; 0x317c <__vector_14+0x138>
    3164:	80 91 ad 08 	lds	r24, 0x08AD	; 0x8008ad <__TEXT_REGION_LENGTH__+0x7f48ad>
    3168:	e0 91 87 28 	lds	r30, 0x2887	; 0x802887 <slave_bytesRead>
    316c:	f0 e0       	ldi	r31, 0x00	; 0
    316e:	80 83       	st	Z, r24
    3170:	80 91 87 28 	lds	r24, 0x2887	; 0x802887 <slave_bytesRead>
    3174:	8f 5f       	subi	r24, 0xFF	; 255
    3176:	80 93 87 28 	sts	0x2887, r24	; 0x802887 <slave_bytesRead>
    317a:	e6 cf       	rjmp	.-52     	; 0x3148 <__vector_14+0x104>
    317c:	86 e0       	ldi	r24, 0x06	; 6
    317e:	80 93 aa 08 	sts	0x08AA, r24	; 0x8008aa <__TEXT_REGION_LENGTH__+0x7f48aa>
    3182:	82 e0       	ldi	r24, 0x02	; 2
    3184:	7c cf       	rjmp	.-264    	; 0x307e <__vector_14+0x3a>
TWI_SlaveInterruptHandler():
    3186:	85 e0       	ldi	r24, 0x05	; 5
    3188:	7a cf       	rjmp	.-268    	; 0x307e <__vector_14+0x3a>

0000318a <__vector_15>:
__vector_15():
    318a:	1f 92       	push	r1
    318c:	0f 92       	push	r0
    318e:	0f b6       	in	r0, 0x3f	; 63
    3190:	0f 92       	push	r0
    3192:	11 24       	eor	r1, r1
    3194:	2f 93       	push	r18
    3196:	8f 93       	push	r24
    3198:	9f 93       	push	r25
    319a:	ef 93       	push	r30
    319c:	ff 93       	push	r31
TWI_MasterInterruptHandler():
    319e:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    31a2:	98 2f       	mov	r25, r24
    31a4:	9c 70       	andi	r25, 0x0C	; 12
    31a6:	c1 f0       	breq	.+48     	; 0x31d8 <__vector_15+0x4e>
TWI_MasterArbitrationLostBusErrorHandler():
    31a8:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    31ac:	94 e0       	ldi	r25, 0x04	; 4
    31ae:	82 ff       	sbrs	r24, 2
    31b0:	93 e0       	ldi	r25, 0x03	; 3
    31b2:	90 93 cb 28 	sts	0x28CB, r25	; 0x8028cb <master_result>
    31b6:	80 93 a5 08 	sts	0x08A5, r24	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    31ba:	81 e0       	ldi	r24, 0x01	; 1
    31bc:	80 93 cf 28 	sts	0x28CF, r24	; 0x8028cf <twi_mode>
    31c0:	10 92 cc 28 	sts	0x28CC, r1	; 0x8028cc <master_trans_status>
__vector_15():
    31c4:	ff 91       	pop	r31
    31c6:	ef 91       	pop	r30
    31c8:	9f 91       	pop	r25
    31ca:	8f 91       	pop	r24
    31cc:	2f 91       	pop	r18
    31ce:	0f 90       	pop	r0
    31d0:	0f be       	out	0x3f, r0	; 63
    31d2:	0f 90       	pop	r0
    31d4:	1f 90       	pop	r1
    31d6:	18 95       	reti
TWI_MasterInterruptHandler():
    31d8:	86 ff       	sbrs	r24, 6
    31da:	4c c0       	rjmp	.+152    	; 0x3274 <__vector_15+0xea>
TWI_MasterWriteHandler():
    31dc:	20 91 80 28 	lds	r18, 0x2880	; 0x802880 <master_bytesToWrite>
    31e0:	90 91 82 28 	lds	r25, 0x2882	; 0x802882 <master_bytesToRead>
    31e4:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    31e8:	84 ff       	sbrs	r24, 4
    31ea:	10 c0       	rjmp	.+32     	; 0x320c <__vector_15+0x82>
    31ec:	80 91 81 28 	lds	r24, 0x2881	; 0x802881 <master_sendStop>
    31f0:	88 23       	and	r24, r24
    31f2:	51 f0       	breq	.+20     	; 0x3208 <__vector_15+0x7e>
    31f4:	83 e0       	ldi	r24, 0x03	; 3
    31f6:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
TWI_MasterTransactionFinished():
    31fa:	85 e0       	ldi	r24, 0x05	; 5
    31fc:	80 93 cb 28 	sts	0x28CB, r24	; 0x8028cb <master_result>
    3200:	10 92 cc 28 	sts	0x28CC, r1	; 0x8028cc <master_trans_status>
    3204:	81 e0       	ldi	r24, 0x01	; 1
    3206:	31 c0       	rjmp	.+98     	; 0x326a <__vector_15+0xe0>
TWI_MasterWriteHandler():
    3208:	81 e0       	ldi	r24, 0x01	; 1
    320a:	f5 cf       	rjmp	.-22     	; 0x31f6 <__vector_15+0x6c>
    320c:	80 91 cd 28 	lds	r24, 0x28CD	; 0x8028cd <master_bytesWritten>
    3210:	82 17       	cp	r24, r18
    3212:	90 f4       	brcc	.+36     	; 0x3238 <__vector_15+0xae>
    3214:	e0 91 cd 28 	lds	r30, 0x28CD	; 0x8028cd <master_bytesWritten>
    3218:	80 91 7e 28 	lds	r24, 0x287E	; 0x80287e <master_writeData>
    321c:	90 91 7f 28 	lds	r25, 0x287F	; 0x80287f <master_writeData+0x1>
    3220:	e8 0f       	add	r30, r24
    3222:	f9 2f       	mov	r31, r25
    3224:	f1 1d       	adc	r31, r1
    3226:	80 81       	ld	r24, Z
    3228:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f48a8>
    322c:	80 91 cd 28 	lds	r24, 0x28CD	; 0x8028cd <master_bytesWritten>
    3230:	8f 5f       	subi	r24, 0xFF	; 255
    3232:	80 93 cd 28 	sts	0x28CD, r24	; 0x8028cd <master_bytesWritten>
    3236:	c6 cf       	rjmp	.-116    	; 0x31c4 <__vector_15+0x3a>
    3238:	80 91 ce 28 	lds	r24, 0x28CE	; 0x8028ce <master_bytesRead>
    323c:	89 17       	cp	r24, r25
    323e:	48 f4       	brcc	.+18     	; 0x3252 <__vector_15+0xc8>
    3240:	84 e0       	ldi	r24, 0x04	; 4
    3242:	80 93 cf 28 	sts	0x28CF, r24	; 0x8028cf <twi_mode>
    3246:	80 91 7d 28 	lds	r24, 0x287D	; 0x80287d <master_slaveAddress>
    324a:	81 60       	ori	r24, 0x01	; 1
    324c:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
    3250:	b9 cf       	rjmp	.-142    	; 0x31c4 <__vector_15+0x3a>
    3252:	80 91 81 28 	lds	r24, 0x2881	; 0x802881 <master_sendStop>
    3256:	88 23       	and	r24, r24
    3258:	59 f0       	breq	.+22     	; 0x3270 <__vector_15+0xe6>
    325a:	83 e0       	ldi	r24, 0x03	; 3
TWI_MasterReadHandler():
    325c:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
TWI_MasterTransactionFinished():
    3260:	81 e0       	ldi	r24, 0x01	; 1
    3262:	80 93 cb 28 	sts	0x28CB, r24	; 0x8028cb <master_result>
    3266:	10 92 cc 28 	sts	0x28CC, r1	; 0x8028cc <master_trans_status>
    326a:	80 93 cf 28 	sts	0x28CF, r24	; 0x8028cf <twi_mode>
    326e:	aa cf       	rjmp	.-172    	; 0x31c4 <__vector_15+0x3a>
TWI_MasterWriteHandler():
    3270:	81 e0       	ldi	r24, 0x01	; 1
    3272:	f4 cf       	rjmp	.-24     	; 0x325c <__vector_15+0xd2>
TWI_MasterInterruptHandler():
    3274:	87 ff       	sbrs	r24, 7
    3276:	37 c0       	rjmp	.+110    	; 0x32e6 <__vector_15+0x15c>
TWI_MasterReadHandler():
    3278:	90 91 ce 28 	lds	r25, 0x28CE	; 0x8028ce <master_bytesRead>
    327c:	80 91 82 28 	lds	r24, 0x2882	; 0x802882 <master_bytesToRead>
    3280:	98 17       	cp	r25, r24
    3282:	a8 f4       	brcc	.+42     	; 0x32ae <__vector_15+0x124>
    3284:	80 91 a8 08 	lds	r24, 0x08A8	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f48a8>
    3288:	e0 91 ce 28 	lds	r30, 0x28CE	; 0x8028ce <master_bytesRead>
    328c:	f0 e0       	ldi	r31, 0x00	; 0
    328e:	80 83       	st	Z, r24
    3290:	80 91 ce 28 	lds	r24, 0x28CE	; 0x8028ce <master_bytesRead>
    3294:	8f 5f       	subi	r24, 0xFF	; 255
    3296:	80 93 ce 28 	sts	0x28CE, r24	; 0x8028ce <master_bytesRead>
    329a:	90 91 82 28 	lds	r25, 0x2882	; 0x802882 <master_bytesToRead>
    329e:	80 91 ce 28 	lds	r24, 0x28CE	; 0x8028ce <master_bytesRead>
    32a2:	89 17       	cp	r24, r25
    32a4:	c0 f4       	brcc	.+48     	; 0x32d6 <__vector_15+0x14c>
    32a6:	82 e0       	ldi	r24, 0x02	; 2
    32a8:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
    32ac:	8b cf       	rjmp	.-234    	; 0x31c4 <__vector_15+0x3a>
    32ae:	80 91 81 28 	lds	r24, 0x2881	; 0x802881 <master_sendStop>
    32b2:	88 23       	and	r24, r24
    32b4:	71 f0       	breq	.+28     	; 0x32d2 <__vector_15+0x148>
    32b6:	87 e0       	ldi	r24, 0x07	; 7
    32b8:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
TWI_MasterTransactionFinished():
    32bc:	82 e0       	ldi	r24, 0x02	; 2
    32be:	80 93 cb 28 	sts	0x28CB, r24	; 0x8028cb <master_result>
    32c2:	10 92 cc 28 	sts	0x28CC, r1	; 0x8028cc <master_trans_status>
    32c6:	81 e0       	ldi	r24, 0x01	; 1
    32c8:	80 93 cf 28 	sts	0x28CF, r24	; 0x8028cf <twi_mode>
TWI_MasterReadHandler():
    32cc:	10 92 82 28 	sts	0x2882, r1	; 0x802882 <master_bytesToRead>
    32d0:	79 cf       	rjmp	.-270    	; 0x31c4 <__vector_15+0x3a>
    32d2:	85 e0       	ldi	r24, 0x05	; 5
    32d4:	f1 cf       	rjmp	.-30     	; 0x32b8 <__vector_15+0x12e>
    32d6:	80 91 81 28 	lds	r24, 0x2881	; 0x802881 <master_sendStop>
    32da:	88 23       	and	r24, r24
    32dc:	11 f0       	breq	.+4      	; 0x32e2 <__vector_15+0x158>
    32de:	87 e0       	ldi	r24, 0x07	; 7
    32e0:	bd cf       	rjmp	.-134    	; 0x325c <__vector_15+0xd2>
    32e2:	85 e0       	ldi	r24, 0x05	; 5
    32e4:	bb cf       	rjmp	.-138    	; 0x325c <__vector_15+0xd2>
TWI_MasterTransactionFinished():
    32e6:	86 e0       	ldi	r24, 0x06	; 6
    32e8:	89 cf       	rjmp	.-238    	; 0x31fc <__vector_15+0x72>

000032ea <__vector_7>:
__vector_7():
    32ea:	1f 92       	push	r1
    32ec:	0f 92       	push	r0
    32ee:	0f b6       	in	r0, 0x3f	; 63
    32f0:	0f 92       	push	r0
    32f2:	11 24       	eor	r1, r1
    32f4:	8f 93       	push	r24
    32f6:	9f 93       	push	r25
    32f8:	af 93       	push	r26
    32fa:	bf 93       	push	r27
    32fc:	80 91 24 28 	lds	r24, 0x2824	; 0x802824 <incr>
    3300:	8f 5f       	subi	r24, 0xFF	; 255
    3302:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <incr>
    3306:	80 35       	cpi	r24, 0x50	; 80
    3308:	08 f4       	brcc	.+2      	; 0x330c <__vector_7+0x22>
    330a:	43 c0       	rjmp	.+134    	; 0x3392 <__vector_7+0xa8>
    330c:	80 91 c7 28 	lds	r24, 0x28C7	; 0x8028c7 <Process1>
    3310:	88 23       	and	r24, r24
    3312:	41 f0       	breq	.+16     	; 0x3324 <__vector_7+0x3a>
    3314:	80 91 ca 28 	lds	r24, 0x28CA	; 0x8028ca <sec_Heater>
    3318:	8f 5f       	subi	r24, 0xFF	; 255
    331a:	81 3f       	cpi	r24, 0xF1	; 241
    331c:	08 f0       	brcs	.+2      	; 0x3320 <__vector_7+0x36>
    331e:	45 c0       	rjmp	.+138    	; 0x33aa <__vector_7+0xc0>
    3320:	80 93 ca 28 	sts	0x28CA, r24	; 0x8028ca <sec_Heater>
    3324:	80 91 c4 28 	lds	r24, 0x28C4	; 0x8028c4 <sfil>
    3328:	88 23       	and	r24, r24
    332a:	99 f0       	breq	.+38     	; 0x3352 <__vector_7+0x68>
    332c:	80 91 c0 28 	lds	r24, 0x28C0	; 0x8028c0 <sfil_on>
    3330:	90 91 c1 28 	lds	r25, 0x28C1	; 0x8028c1 <sfil_on+0x1>
    3334:	a0 91 c2 28 	lds	r26, 0x28C2	; 0x8028c2 <sfil_on+0x2>
    3338:	b0 91 c3 28 	lds	r27, 0x28C3	; 0x8028c3 <sfil_on+0x3>
    333c:	01 96       	adiw	r24, 0x01	; 1
    333e:	a1 1d       	adc	r26, r1
    3340:	b1 1d       	adc	r27, r1
    3342:	80 93 c0 28 	sts	0x28C0, r24	; 0x8028c0 <sfil_on>
    3346:	90 93 c1 28 	sts	0x28C1, r25	; 0x8028c1 <sfil_on+0x1>
    334a:	a0 93 c2 28 	sts	0x28C2, r26	; 0x8028c2 <sfil_on+0x2>
    334e:	b0 93 c3 28 	sts	0x28C3, r27	; 0x8028c3 <sfil_on+0x3>
    3352:	80 91 d9 28 	lds	r24, 0x28D9	; 0x8028d9 <pcalib>
    3356:	82 30       	cpi	r24, 0x02	; 2
    3358:	49 f4       	brne	.+18     	; 0x336c <__vector_7+0x82>
    335a:	80 91 38 28 	lds	r24, 0x2838	; 0x802838 <Pump_calib>
    335e:	88 23       	and	r24, r24
    3360:	29 f0       	breq	.+10     	; 0x336c <__vector_7+0x82>
    3362:	80 91 0b 28 	lds	r24, 0x280B	; 0x80280b <calib_count>
    3366:	8f 5f       	subi	r24, 0xFF	; 255
    3368:	80 93 0b 28 	sts	0x280B, r24	; 0x80280b <calib_count>
    336c:	80 91 c5 28 	lds	r24, 0x28C5	; 0x8028c5 <Temp_Err>
    3370:	81 11       	cpse	r24, r1
    3372:	04 c0       	rjmp	.+8      	; 0x337c <__vector_7+0x92>
    3374:	80 91 97 28 	lds	r24, 0x2897	; 0x802897 <Heater_safety>
    3378:	81 30       	cpi	r24, 0x01	; 1
    337a:	49 f4       	brne	.+18     	; 0x338e <__vector_7+0xa4>
    337c:	80 91 95 28 	lds	r24, 0x2895	; 0x802895 <Heater_safety_timer>
    3380:	90 91 96 28 	lds	r25, 0x2896	; 0x802896 <Heater_safety_timer+0x1>
    3384:	01 96       	adiw	r24, 0x01	; 1
    3386:	80 93 95 28 	sts	0x2895, r24	; 0x802895 <Heater_safety_timer>
    338a:	90 93 96 28 	sts	0x2896, r25	; 0x802896 <Heater_safety_timer+0x1>
    338e:	10 92 24 28 	sts	0x2824, r1	; 0x802824 <incr>
    3392:	81 e0       	ldi	r24, 0x01	; 1
    3394:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x7f4a0b>
    3398:	bf 91       	pop	r27
    339a:	af 91       	pop	r26
    339c:	9f 91       	pop	r25
    339e:	8f 91       	pop	r24
    33a0:	0f 90       	pop	r0
    33a2:	0f be       	out	0x3f, r0	; 63
    33a4:	0f 90       	pop	r0
    33a6:	1f 90       	pop	r1
    33a8:	18 95       	reti
    33aa:	80 e5       	ldi	r24, 0x50	; 80
    33ac:	b9 cf       	rjmp	.-142    	; 0x3320 <__vector_7+0x36>

000033ae <OneButton::OneButton(int, int) [clone .constprop.92]>:
__base_ctor ():
    33ae:	0f 93       	push	r16
    33b0:	1f 93       	push	r17
    33b2:	cf 93       	push	r28
    33b4:	df 93       	push	r29
    33b6:	ec 01       	movw	r28, r24
    33b8:	16 2f       	mov	r17, r22
    33ba:	07 2f       	mov	r16, r23
    33bc:	82 e3       	ldi	r24, 0x32	; 50
    33be:	90 e0       	ldi	r25, 0x00	; 0
    33c0:	8e 83       	std	Y+6, r24	; 0x06
    33c2:	9f 83       	std	Y+7, r25	; 0x07
pinMode():
    33c4:	60 e0       	ldi	r22, 0x00	; 0
    33c6:	81 2f       	mov	r24, r17
    33c8:	0e 94 32 04 	call	0x864	; 0x864 <pinMode.part.1>
__base_ctor ():
    33cc:	18 83       	st	Y, r17
    33ce:	09 83       	std	Y+1, r16	; 0x01
    33d0:	88 e5       	ldi	r24, 0x58	; 88
    33d2:	92 e0       	ldi	r25, 0x02	; 2
    33d4:	8a 83       	std	Y+2, r24	; 0x02
    33d6:	9b 83       	std	Y+3, r25	; 0x03
    33d8:	88 ee       	ldi	r24, 0xE8	; 232
    33da:	93 e0       	ldi	r25, 0x03	; 3
    33dc:	8c 83       	std	Y+4, r24	; 0x04
    33de:	9d 83       	std	Y+5, r25	; 0x05
    33e0:	19 8e       	std	Y+25, r1	; 0x19
    33e2:	1a 8e       	std	Y+26, r1	; 0x1a
    33e4:	1c 86       	std	Y+12, r1	; 0x0c
    33e6:	81 e0       	ldi	r24, 0x01	; 1
    33e8:	90 e0       	ldi	r25, 0x00	; 0
    33ea:	88 87       	std	Y+8, r24	; 0x08
    33ec:	99 87       	std	Y+9, r25	; 0x09
    33ee:	1a 86       	std	Y+10, r1	; 0x0a
    33f0:	1b 86       	std	Y+11, r1	; 0x0b
digitalWrite():
    33f2:	61 e0       	ldi	r22, 0x01	; 1
    33f4:	81 2f       	mov	r24, r17
    33f6:	0e 94 c6 04 	call	0x98c	; 0x98c <digitalWrite.part.2>
__base_ctor ():
    33fa:	1f 86       	std	Y+15, r1	; 0x0f
    33fc:	18 8a       	std	Y+16, r1	; 0x10
    33fe:	19 8a       	std	Y+17, r1	; 0x11
    3400:	1a 8a       	std	Y+18, r1	; 0x12
    3402:	1b 8a       	std	Y+19, r1	; 0x13
    3404:	1c 8a       	std	Y+20, r1	; 0x14
    3406:	1d 8a       	std	Y+21, r1	; 0x15
    3408:	1e 8a       	std	Y+22, r1	; 0x16
    340a:	1f 8a       	std	Y+23, r1	; 0x17
    340c:	18 8e       	std	Y+24, r1	; 0x18
    340e:	df 91       	pop	r29
    3410:	cf 91       	pop	r28
    3412:	1f 91       	pop	r17
    3414:	0f 91       	pop	r16
    3416:	08 95       	ret

00003418 <String::String(char const*)>:
    3418:	ef 92       	push	r14
    341a:	ff 92       	push	r15
    341c:	0f 93       	push	r16
    341e:	1f 93       	push	r17
    3420:	cf 93       	push	r28
    3422:	df 93       	push	r29
    3424:	ec 01       	movw	r28, r24
    3426:	7b 01       	movw	r14, r22
_ZN6String4initEv():
    3428:	18 82       	st	Y, r1
    342a:	19 82       	std	Y+1, r1	; 0x01
    342c:	1a 82       	std	Y+2, r1	; 0x02
    342e:	1b 82       	std	Y+3, r1	; 0x03
    3430:	1c 82       	std	Y+4, r1	; 0x04
    3432:	1d 82       	std	Y+5, r1	; 0x05
__base_ctor ():
    3434:	fb 01       	movw	r30, r22
    3436:	01 90       	ld	r0, Z+
    3438:	00 20       	and	r0, r0
    343a:	e9 f7       	brne	.-6      	; 0x3436 <String::String(char const*)+0x1e>
    343c:	31 97       	sbiw	r30, 0x01	; 1
    343e:	8f 01       	movw	r16, r30
    3440:	06 1b       	sub	r16, r22
    3442:	17 0b       	sbc	r17, r23
changeBuffer():
    3444:	b8 01       	movw	r22, r16
    3446:	6f 5f       	subi	r22, 0xFF	; 255
    3448:	7f 4f       	sbci	r23, 0xFF	; 255
    344a:	90 e0       	ldi	r25, 0x00	; 0
    344c:	80 e0       	ldi	r24, 0x00	; 0
    344e:	0e 94 d3 25 	call	0x4ba6	; 0x4ba6 <realloc>
    3452:	00 97       	sbiw	r24, 0x00	; 0
    3454:	b9 f0       	breq	.+46     	; 0x3484 <String::String(char const*)+0x6c>
    3456:	88 83       	st	Y, r24
    3458:	99 83       	std	Y+1, r25	; 0x01
    345a:	0a 83       	std	Y+2, r16	; 0x02
    345c:	1b 83       	std	Y+3, r17	; 0x03
reserve():
    345e:	2c 81       	ldd	r18, Y+4	; 0x04
    3460:	3d 81       	ldd	r19, Y+5	; 0x05
    3462:	23 2b       	or	r18, r19
    3464:	11 f4       	brne	.+4      	; 0x346a <String::String(char const*)+0x52>
    3466:	fc 01       	movw	r30, r24
    3468:	10 82       	st	Z, r1
copy():
    346a:	0c 83       	std	Y+4, r16	; 0x04
    346c:	1d 83       	std	Y+5, r17	; 0x05
    346e:	b7 01       	movw	r22, r14
    3470:	88 81       	ld	r24, Y
    3472:	99 81       	ldd	r25, Y+1	; 0x01
__base_ctor ():
    3474:	df 91       	pop	r29
    3476:	cf 91       	pop	r28
    3478:	1f 91       	pop	r17
    347a:	0f 91       	pop	r16
    347c:	ff 90       	pop	r15
    347e:	ef 90       	pop	r14
copy():
    3480:	0c 94 92 26 	jmp	0x4d24	; 0x4d24 <strcpy>
invalidate():
    3484:	88 81       	ld	r24, Y
    3486:	99 81       	ldd	r25, Y+1	; 0x01
    3488:	00 97       	sbiw	r24, 0x00	; 0
    348a:	11 f0       	breq	.+4      	; 0x3490 <String::String(char const*)+0x78>
    348c:	0e 94 4a 25 	call	0x4a94	; 0x4a94 <free>
    3490:	18 82       	st	Y, r1
    3492:	19 82       	std	Y+1, r1	; 0x01
    3494:	1c 82       	std	Y+4, r1	; 0x04
    3496:	1d 82       	std	Y+5, r1	; 0x05
    3498:	1a 82       	std	Y+2, r1	; 0x02
    349a:	1b 82       	std	Y+3, r1	; 0x03
__base_ctor ():
    349c:	df 91       	pop	r29
    349e:	cf 91       	pop	r28
    34a0:	1f 91       	pop	r17
    34a2:	0f 91       	pop	r16
    34a4:	ff 90       	pop	r15
    34a6:	ef 90       	pop	r14
    34a8:	08 95       	ret

000034aa <global constructors keyed to 65535_0_Dispensing.cpp.o.4480>:
_GLOBAL__I_65535_0_Dispensing.cpp.o.4480():
    34aa:	8f 92       	push	r8
    34ac:	9f 92       	push	r9
    34ae:	af 92       	push	r10
    34b0:	bf 92       	push	r11
    34b2:	cf 92       	push	r12
    34b4:	df 92       	push	r13
    34b6:	ef 92       	push	r14
    34b8:	ff 92       	push	r15
    34ba:	0f 93       	push	r16
    34bc:	1f 93       	push	r17
    34be:	cf 93       	push	r28
    34c0:	df 93       	push	r29
    34c2:	10 92 ea 28 	sts	0x28EA, r1	; 0x8028ea <Serial+0x2>
    34c6:	10 92 eb 28 	sts	0x28EB, r1	; 0x8028eb <Serial+0x3>
    34ca:	88 ee       	ldi	r24, 0xE8	; 232
    34cc:	93 e0       	ldi	r25, 0x03	; 3
    34ce:	a0 e0       	ldi	r26, 0x00	; 0
    34d0:	b0 e0       	ldi	r27, 0x00	; 0
    34d2:	80 93 ec 28 	sts	0x28EC, r24	; 0x8028ec <Serial+0x4>
    34d6:	90 93 ed 28 	sts	0x28ED, r25	; 0x8028ed <Serial+0x5>
    34da:	a0 93 ee 28 	sts	0x28EE, r26	; 0x8028ee <Serial+0x6>
    34de:	b0 93 ef 28 	sts	0x28EF, r27	; 0x8028ef <Serial+0x7>
    34e2:	86 ec       	ldi	r24, 0xC6	; 198
    34e4:	9d e8       	ldi	r25, 0x8D	; 141
    34e6:	80 93 e8 28 	sts	0x28E8, r24	; 0x8028e8 <Serial>
    34ea:	90 93 e9 28 	sts	0x28E9, r25	; 0x8028e9 <Serial+0x1>
    34ee:	80 e0       	ldi	r24, 0x00	; 0
    34f0:	98 e0       	ldi	r25, 0x08	; 8
    34f2:	80 93 f4 28 	sts	0x28F4, r24	; 0x8028f4 <Serial+0xc>
    34f6:	90 93 f5 28 	sts	0x28F5, r25	; 0x8028f5 <Serial+0xd>
    34fa:	81 e0       	ldi	r24, 0x01	; 1
    34fc:	80 93 f6 28 	sts	0x28F6, r24	; 0x8028f6 <Serial+0xe>
    3500:	10 92 f7 28 	sts	0x28F7, r1	; 0x8028f7 <Serial+0xf>
    3504:	10 92 f8 28 	sts	0x28F8, r1	; 0x8028f8 <Serial+0x10>
    3508:	95 e0       	ldi	r25, 0x05	; 5
    350a:	90 93 f9 28 	sts	0x28F9, r25	; 0x8028f9 <Serial+0x11>
    350e:	94 e0       	ldi	r25, 0x04	; 4
    3510:	90 93 fa 28 	sts	0x28FA, r25	; 0x8028fa <Serial+0x12>
    3514:	80 93 fb 28 	sts	0x28FB, r24	; 0x8028fb <Serial+0x13>
    3518:	10 92 fc 28 	sts	0x28FC, r1	; 0x8028fc <Serial+0x14>
    351c:	10 92 fd 28 	sts	0x28FD, r1	; 0x8028fd <Serial+0x15>
    3520:	10 92 fe 28 	sts	0x28FE, r1	; 0x8028fe <Serial+0x16>
    3524:	10 92 ff 28 	sts	0x28FF, r1	; 0x8028ff <Serial+0x17>
    3528:	10 92 00 29 	sts	0x2900, r1	; 0x802900 <Serial+0x18>
    352c:	10 92 01 29 	sts	0x2901, r1	; 0x802901 <Serial+0x19>
    3530:	82 e1       	ldi	r24, 0x12	; 18
    3532:	80 93 02 29 	sts	0x2902, r24	; 0x802902 <Serial+0x1a>
    3536:	10 92 03 29 	sts	0x2903, r1	; 0x802903 <Serial+0x1b>
    353a:	10 92 04 29 	sts	0x2904, r1	; 0x802904 <Serial+0x1c>
    353e:	c0 ee       	ldi	r28, 0xE0	; 224
    3540:	dd e8       	ldi	r29, 0x8D	; 141
    3542:	04 ee       	ldi	r16, 0xE4	; 228
    3544:	1d e8       	ldi	r17, 0x8D	; 141
    3546:	89 91       	ld	r24, Y+
    3548:	8b 31       	cpi	r24, 0x1B	; 27
    354a:	18 f4       	brcc	.+6      	; 0x3552 <global constructors keyed to 65535_0_Dispensing.cpp.o.4480+0xa8>
    354c:	61 e0       	ldi	r22, 0x01	; 1
    354e:	0e 94 32 04 	call	0x864	; 0x864 <pinMode.part.1>
    3552:	0c 17       	cp	r16, r28
    3554:	1d 07       	cpc	r17, r29
    3556:	b9 f7       	brne	.-18     	; 0x3546 <global constructors keyed to 65535_0_Dispensing.cpp.o.4480+0x9c>
    3558:	61 e0       	ldi	r22, 0x01	; 1
    355a:	85 e0       	ldi	r24, 0x05	; 5
    355c:	0e 94 32 04 	call	0x864	; 0x864 <pinMode.part.1>
    3560:	61 e0       	ldi	r22, 0x01	; 1
    3562:	8a e0       	ldi	r24, 0x0A	; 10
    3564:	0e 94 32 04 	call	0x864	; 0x864 <pinMode.part.1>
    3568:	61 e0       	ldi	r22, 0x01	; 1
    356a:	89 e0       	ldi	r24, 0x09	; 9
    356c:	0e 94 32 04 	call	0x864	; 0x864 <pinMode.part.1>
    3570:	10 92 87 29 	sts	0x2987, r1	; 0x802987 <Wire+0x2>
    3574:	10 92 88 29 	sts	0x2988, r1	; 0x802988 <Wire+0x3>
    3578:	88 ee       	ldi	r24, 0xE8	; 232
    357a:	c8 2e       	mov	r12, r24
    357c:	83 e0       	ldi	r24, 0x03	; 3
    357e:	d8 2e       	mov	r13, r24
    3580:	e1 2c       	mov	r14, r1
    3582:	f1 2c       	mov	r15, r1
    3584:	c0 92 89 29 	sts	0x2989, r12	; 0x802989 <Wire+0x4>
    3588:	d0 92 8a 29 	sts	0x298A, r13	; 0x80298a <Wire+0x5>
    358c:	e0 92 8b 29 	sts	0x298B, r14	; 0x80298b <Wire+0x6>
    3590:	f0 92 8c 29 	sts	0x298C, r15	; 0x80298c <Wire+0x7>
    3594:	88 ee       	ldi	r24, 0xE8	; 232
    3596:	9d e8       	ldi	r25, 0x8D	; 141
    3598:	80 93 85 29 	sts	0x2985, r24	; 0x802985 <Wire>
    359c:	90 93 86 29 	sts	0x2986, r25	; 0x802986 <Wire+0x1>
    35a0:	10 92 39 2b 	sts	0x2B39, r1	; 0x802b39 <lcd+0x2>
    35a4:	10 92 3a 2b 	sts	0x2B3A, r1	; 0x802b3a <lcd+0x3>
    35a8:	8a ef       	ldi	r24, 0xFA	; 250
    35aa:	9d e8       	ldi	r25, 0x8D	; 141
    35ac:	80 93 37 2b 	sts	0x2B37, r24	; 0x802b37 <lcd>
    35b0:	90 93 38 2b 	sts	0x2B38, r25	; 0x802b38 <lcd+0x1>
    35b4:	87 e2       	ldi	r24, 0x27	; 39
    35b6:	80 93 3b 2b 	sts	0x2B3B, r24	; 0x802b3b <lcd+0x4>
    35ba:	80 e1       	ldi	r24, 0x10	; 16
    35bc:	80 93 40 2b 	sts	0x2B40, r24	; 0x802b40 <lcd+0x9>
    35c0:	82 e0       	ldi	r24, 0x02	; 2
    35c2:	80 93 41 2b 	sts	0x2B41, r24	; 0x802b41 <lcd+0xa>
    35c6:	10 92 42 2b 	sts	0x2B42, r1	; 0x802b42 <lcd+0xb>
    35ca:	60 e9       	ldi	r22, 0x90	; 144
    35cc:	70 e9       	ldi	r23, 0x90	; 144
    35ce:	85 e2       	ldi	r24, 0x25	; 37
    35d0:	9b e2       	ldi	r25, 0x2B	; 43
    35d2:	22 df       	rcall	.-444    	; 0x3418 <String::String(char const*)>
    35d4:	61 ea       	ldi	r22, 0xA1	; 161
    35d6:	70 e9       	ldi	r23, 0x90	; 144
    35d8:	8b e2       	ldi	r24, 0x2B	; 43
    35da:	9b e2       	ldi	r25, 0x2B	; 43
    35dc:	1d df       	rcall	.-454    	; 0x3418 <String::String(char const*)>
    35de:	62 eb       	ldi	r22, 0xB2	; 178
    35e0:	70 e9       	ldi	r23, 0x90	; 144
    35e2:	81 e3       	ldi	r24, 0x31	; 49
    35e4:	9b e2       	ldi	r25, 0x2B	; 43
    35e6:	18 df       	rcall	.-464    	; 0x3418 <String::String(char const*)>
    35e8:	63 ec       	ldi	r22, 0xC3	; 195
    35ea:	70 e9       	ldi	r23, 0x90	; 144
    35ec:	89 e1       	ldi	r24, 0x19	; 25
    35ee:	9b e2       	ldi	r25, 0x2B	; 43
    35f0:	13 df       	rcall	.-474    	; 0x3418 <String::String(char const*)>
    35f2:	63 ec       	ldi	r22, 0xC3	; 195
    35f4:	70 e9       	ldi	r23, 0x90	; 144
    35f6:	8f e1       	ldi	r24, 0x1F	; 31
    35f8:	9b e2       	ldi	r25, 0x2B	; 43
    35fa:	0e df       	rcall	.-484    	; 0x3418 <String::String(char const*)>
    35fc:	64 ed       	ldi	r22, 0xD4	; 212
    35fe:	70 e9       	ldi	r23, 0x90	; 144
    3600:	89 ee       	ldi	r24, 0xE9	; 233
    3602:	9a e2       	ldi	r25, 0x2A	; 42
    3604:	09 df       	rcall	.-494    	; 0x3418 <String::String(char const*)>
    3606:	65 ee       	ldi	r22, 0xE5	; 229
    3608:	70 e9       	ldi	r23, 0x90	; 144
    360a:	8f ee       	ldi	r24, 0xEF	; 239
    360c:	9a e2       	ldi	r25, 0x2A	; 42
    360e:	04 df       	rcall	.-504    	; 0x3418 <String::String(char const*)>
    3610:	66 ef       	ldi	r22, 0xF6	; 246
    3612:	70 e9       	ldi	r23, 0x90	; 144
    3614:	85 ef       	ldi	r24, 0xF5	; 245
    3616:	9a e2       	ldi	r25, 0x2A	; 42
    3618:	ff de       	rcall	.-514    	; 0x3418 <String::String(char const*)>
    361a:	67 e0       	ldi	r22, 0x07	; 7
    361c:	71 e9       	ldi	r23, 0x91	; 145
    361e:	8b ef       	ldi	r24, 0xFB	; 251
    3620:	9a e2       	ldi	r25, 0x2A	; 42
    3622:	fa de       	rcall	.-524    	; 0x3418 <String::String(char const*)>
    3624:	68 e1       	ldi	r22, 0x18	; 24
    3626:	71 e9       	ldi	r23, 0x91	; 145
    3628:	81 e0       	ldi	r24, 0x01	; 1
    362a:	9b e2       	ldi	r25, 0x2B	; 43
    362c:	f5 de       	rcall	.-534    	; 0x3418 <String::String(char const*)>
    362e:	69 e2       	ldi	r22, 0x29	; 41
    3630:	71 e9       	ldi	r23, 0x91	; 145
    3632:	87 e0       	ldi	r24, 0x07	; 7
    3634:	9b e2       	ldi	r25, 0x2B	; 43
    3636:	f0 de       	rcall	.-544    	; 0x3418 <String::String(char const*)>
    3638:	6a e3       	ldi	r22, 0x3A	; 58
    363a:	71 e9       	ldi	r23, 0x91	; 145
    363c:	8d e0       	ldi	r24, 0x0D	; 13
    363e:	9b e2       	ldi	r25, 0x2B	; 43
    3640:	eb de       	rcall	.-554    	; 0x3418 <String::String(char const*)>
    3642:	6b e4       	ldi	r22, 0x4B	; 75
    3644:	71 e9       	ldi	r23, 0x91	; 145
    3646:	83 e1       	ldi	r24, 0x13	; 19
    3648:	9b e2       	ldi	r25, 0x2B	; 43
    364a:	e6 de       	rcall	.-564    	; 0x3418 <String::String(char const*)>
    364c:	c1 e0       	ldi	r28, 0x01	; 1
    364e:	d0 e0       	ldi	r29, 0x00	; 0
    3650:	c0 93 d7 2a 	sts	0x2AD7, r28	; 0x802ad7 <buz+0x9>
    3654:	d0 93 d8 2a 	sts	0x2AD8, r29	; 0x802ad8 <buz+0xa>
    3658:	84 e6       	ldi	r24, 0x64	; 100
    365a:	90 e0       	ldi	r25, 0x00	; 0
    365c:	a0 e0       	ldi	r26, 0x00	; 0
    365e:	b0 e0       	ldi	r27, 0x00	; 0
    3660:	80 93 cf 2a 	sts	0x2ACF, r24	; 0x802acf <buz+0x1>
    3664:	90 93 d0 2a 	sts	0x2AD0, r25	; 0x802ad0 <buz+0x2>
    3668:	a0 93 d1 2a 	sts	0x2AD1, r26	; 0x802ad1 <buz+0x3>
    366c:	b0 93 d2 2a 	sts	0x2AD2, r27	; 0x802ad2 <buz+0x4>
    3670:	81 2c       	mov	r8, r1
    3672:	91 2c       	mov	r9, r1
    3674:	54 01       	movw	r10, r8
    3676:	83 94       	inc	r8
    3678:	80 92 d3 2a 	sts	0x2AD3, r8	; 0x802ad3 <buz+0x5>
    367c:	90 92 d4 2a 	sts	0x2AD4, r9	; 0x802ad4 <buz+0x6>
    3680:	a0 92 d5 2a 	sts	0x2AD5, r10	; 0x802ad5 <buz+0x7>
    3684:	b0 92 d6 2a 	sts	0x2AD6, r11	; 0x802ad6 <buz+0x8>
    3688:	8d ec       	ldi	r24, 0xCD	; 205
    368a:	98 e0       	ldi	r25, 0x08	; 8
    368c:	80 93 df 2a 	sts	0x2ADF, r24	; 0x802adf <buz+0x11>
    3690:	90 93 e0 2a 	sts	0x2AE0, r25	; 0x802ae0 <buz+0x12>
    3694:	10 92 ce 2a 	sts	0x2ACE, r1	; 0x802ace <buz>
    3698:	10 92 e1 2a 	sts	0x2AE1, r1	; 0x802ae1 <buz+0x13>
    369c:	10 92 e2 2a 	sts	0x2AE2, r1	; 0x802ae2 <buz+0x14>
    36a0:	10 92 e3 2a 	sts	0x2AE3, r1	; 0x802ae3 <buz+0x15>
    36a4:	10 92 e4 2a 	sts	0x2AE4, r1	; 0x802ae4 <buz+0x16>
    36a8:	10 92 d9 2a 	sts	0x2AD9, r1	; 0x802ad9 <buz+0xb>
    36ac:	10 92 da 2a 	sts	0x2ADA, r1	; 0x802ada <buz+0xc>
    36b0:	10 92 db 2a 	sts	0x2ADB, r1	; 0x802adb <buz+0xd>
    36b4:	10 92 dc 2a 	sts	0x2ADC, r1	; 0x802adc <buz+0xe>
    36b8:	6b e0       	ldi	r22, 0x0B	; 11
    36ba:	70 e0       	ldi	r23, 0x00	; 0
    36bc:	8e ee       	ldi	r24, 0xEE	; 238
    36be:	99 e2       	ldi	r25, 0x29	; 41
    36c0:	76 de       	rcall	.-788    	; 0x33ae <OneButton::OneButton(int, int) [clone .constprop.92]>
    36c2:	68 e0       	ldi	r22, 0x08	; 8
    36c4:	70 e0       	ldi	r23, 0x00	; 0
    36c6:	8f ec       	ldi	r24, 0xCF	; 207
    36c8:	99 e2       	ldi	r25, 0x29	; 41
    36ca:	71 de       	rcall	.-798    	; 0x33ae <OneButton::OneButton(int, int) [clone .constprop.92]>
    36cc:	67 e0       	ldi	r22, 0x07	; 7
    36ce:	70 e0       	ldi	r23, 0x00	; 0
    36d0:	80 eb       	ldi	r24, 0xB0	; 176
    36d2:	99 e2       	ldi	r25, 0x29	; 41
    36d4:	6c de       	rcall	.-808    	; 0x33ae <OneButton::OneButton(int, int) [clone .constprop.92]>
    36d6:	65 e0       	ldi	r22, 0x05	; 5
    36d8:	70 e0       	ldi	r23, 0x00	; 0
    36da:	81 e9       	ldi	r24, 0x91	; 145
    36dc:	99 e2       	ldi	r25, 0x29	; 41
    36de:	67 de       	rcall	.-818    	; 0x33ae <OneButton::OneButton(int, int) [clone .constprop.92]>
    36e0:	10 92 bc 2a 	sts	0x2ABC, r1	; 0x802abc <LongPress5sec+0x9>
    36e4:	10 92 bd 2a 	sts	0x2ABD, r1	; 0x802abd <LongPress5sec+0xa>
    36e8:	80 e4       	ldi	r24, 0x40	; 64
    36ea:	92 e4       	ldi	r25, 0x42	; 66
    36ec:	af e0       	ldi	r26, 0x0F	; 15
    36ee:	b0 e0       	ldi	r27, 0x00	; 0
    36f0:	80 93 b4 2a 	sts	0x2AB4, r24	; 0x802ab4 <LongPress5sec+0x1>
    36f4:	90 93 b5 2a 	sts	0x2AB5, r25	; 0x802ab5 <LongPress5sec+0x2>
    36f8:	a0 93 b6 2a 	sts	0x2AB6, r26	; 0x802ab6 <LongPress5sec+0x3>
    36fc:	b0 93 b7 2a 	sts	0x2AB7, r27	; 0x802ab7 <LongPress5sec+0x4>
    3700:	10 92 b8 2a 	sts	0x2AB8, r1	; 0x802ab8 <LongPress5sec+0x5>
    3704:	10 92 b9 2a 	sts	0x2AB9, r1	; 0x802ab9 <LongPress5sec+0x6>
    3708:	10 92 ba 2a 	sts	0x2ABA, r1	; 0x802aba <LongPress5sec+0x7>
    370c:	10 92 bb 2a 	sts	0x2ABB, r1	; 0x802abb <LongPress5sec+0x8>
    3710:	83 e7       	ldi	r24, 0x73	; 115
    3712:	9b e0       	ldi	r25, 0x0B	; 11
    3714:	80 93 c4 2a 	sts	0x2AC4, r24	; 0x802ac4 <LongPress5sec+0x11>
    3718:	90 93 c5 2a 	sts	0x2AC5, r25	; 0x802ac5 <LongPress5sec+0x12>
    371c:	10 92 b3 2a 	sts	0x2AB3, r1	; 0x802ab3 <LongPress5sec>
    3720:	10 92 c6 2a 	sts	0x2AC6, r1	; 0x802ac6 <LongPress5sec+0x13>
    3724:	10 92 c7 2a 	sts	0x2AC7, r1	; 0x802ac7 <LongPress5sec+0x14>
    3728:	10 92 c8 2a 	sts	0x2AC8, r1	; 0x802ac8 <LongPress5sec+0x15>
    372c:	10 92 c9 2a 	sts	0x2AC9, r1	; 0x802ac9 <LongPress5sec+0x16>
    3730:	10 92 be 2a 	sts	0x2ABE, r1	; 0x802abe <LongPress5sec+0xb>
    3734:	10 92 bf 2a 	sts	0x2ABF, r1	; 0x802abf <LongPress5sec+0xc>
    3738:	10 92 c0 2a 	sts	0x2AC0, r1	; 0x802ac0 <LongPress5sec+0xd>
    373c:	10 92 c1 2a 	sts	0x2AC1, r1	; 0x802ac1 <LongPress5sec+0xe>
    3740:	10 92 a1 2a 	sts	0x2AA1, r1	; 0x802aa1 <Heaters_stop1+0x9>
    3744:	10 92 a2 2a 	sts	0x2AA2, r1	; 0x802aa2 <Heaters_stop1+0xa>
    3748:	80 e4       	ldi	r24, 0x40	; 64
    374a:	9b e4       	ldi	r25, 0x4B	; 75
    374c:	ac e4       	ldi	r26, 0x4C	; 76
    374e:	b0 e0       	ldi	r27, 0x00	; 0
    3750:	80 93 99 2a 	sts	0x2A99, r24	; 0x802a99 <Heaters_stop1+0x1>
    3754:	90 93 9a 2a 	sts	0x2A9A, r25	; 0x802a9a <Heaters_stop1+0x2>
    3758:	a0 93 9b 2a 	sts	0x2A9B, r26	; 0x802a9b <Heaters_stop1+0x3>
    375c:	b0 93 9c 2a 	sts	0x2A9C, r27	; 0x802a9c <Heaters_stop1+0x4>
    3760:	80 92 9d 2a 	sts	0x2A9D, r8	; 0x802a9d <Heaters_stop1+0x5>
    3764:	90 92 9e 2a 	sts	0x2A9E, r9	; 0x802a9e <Heaters_stop1+0x6>
    3768:	a0 92 9f 2a 	sts	0x2A9F, r10	; 0x802a9f <Heaters_stop1+0x7>
    376c:	b0 92 a0 2a 	sts	0x2AA0, r11	; 0x802aa0 <Heaters_stop1+0x8>
    3770:	83 e8       	ldi	r24, 0x83	; 131
    3772:	9b e0       	ldi	r25, 0x0B	; 11
    3774:	80 93 a9 2a 	sts	0x2AA9, r24	; 0x802aa9 <Heaters_stop1+0x11>
    3778:	90 93 aa 2a 	sts	0x2AAA, r25	; 0x802aaa <Heaters_stop1+0x12>
    377c:	10 92 98 2a 	sts	0x2A98, r1	; 0x802a98 <Heaters_stop1>
    3780:	10 92 ab 2a 	sts	0x2AAB, r1	; 0x802aab <Heaters_stop1+0x13>
    3784:	10 92 ac 2a 	sts	0x2AAC, r1	; 0x802aac <Heaters_stop1+0x14>
    3788:	10 92 ad 2a 	sts	0x2AAD, r1	; 0x802aad <Heaters_stop1+0x15>
    378c:	10 92 ae 2a 	sts	0x2AAE, r1	; 0x802aae <Heaters_stop1+0x16>
    3790:	10 92 a3 2a 	sts	0x2AA3, r1	; 0x802aa3 <Heaters_stop1+0xb>
    3794:	10 92 a4 2a 	sts	0x2AA4, r1	; 0x802aa4 <Heaters_stop1+0xc>
    3798:	10 92 a5 2a 	sts	0x2AA5, r1	; 0x802aa5 <Heaters_stop1+0xd>
    379c:	10 92 a6 2a 	sts	0x2AA6, r1	; 0x802aa6 <Heaters_stop1+0xe>
    37a0:	c0 93 86 2a 	sts	0x2A86, r28	; 0x802a86 <Flow_delay+0x9>
    37a4:	d0 93 87 2a 	sts	0x2A87, r29	; 0x802a87 <Flow_delay+0xa>
    37a8:	c0 92 7e 2a 	sts	0x2A7E, r12	; 0x802a7e <Flow_delay+0x1>
    37ac:	d0 92 7f 2a 	sts	0x2A7F, r13	; 0x802a7f <Flow_delay+0x2>
    37b0:	e0 92 80 2a 	sts	0x2A80, r14	; 0x802a80 <Flow_delay+0x3>
    37b4:	f0 92 81 2a 	sts	0x2A81, r15	; 0x802a81 <Flow_delay+0x4>
    37b8:	10 92 82 2a 	sts	0x2A82, r1	; 0x802a82 <Flow_delay+0x5>
    37bc:	10 92 83 2a 	sts	0x2A83, r1	; 0x802a83 <Flow_delay+0x6>
    37c0:	10 92 84 2a 	sts	0x2A84, r1	; 0x802a84 <Flow_delay+0x7>
    37c4:	10 92 85 2a 	sts	0x2A85, r1	; 0x802a85 <Flow_delay+0x8>
    37c8:	83 e7       	ldi	r24, 0x73	; 115
    37ca:	91 e0       	ldi	r25, 0x01	; 1
    37cc:	80 93 8e 2a 	sts	0x2A8E, r24	; 0x802a8e <Flow_delay+0x11>
    37d0:	90 93 8f 2a 	sts	0x2A8F, r25	; 0x802a8f <Flow_delay+0x12>
    37d4:	10 92 7d 2a 	sts	0x2A7D, r1	; 0x802a7d <Flow_delay>
    37d8:	10 92 90 2a 	sts	0x2A90, r1	; 0x802a90 <Flow_delay+0x13>
    37dc:	10 92 91 2a 	sts	0x2A91, r1	; 0x802a91 <Flow_delay+0x14>
    37e0:	10 92 92 2a 	sts	0x2A92, r1	; 0x802a92 <Flow_delay+0x15>
    37e4:	10 92 93 2a 	sts	0x2A93, r1	; 0x802a93 <Flow_delay+0x16>
    37e8:	10 92 88 2a 	sts	0x2A88, r1	; 0x802a88 <Flow_delay+0xb>
    37ec:	10 92 89 2a 	sts	0x2A89, r1	; 0x802a89 <Flow_delay+0xc>
    37f0:	10 92 8a 2a 	sts	0x2A8A, r1	; 0x802a8a <Flow_delay+0xd>
    37f4:	10 92 8b 2a 	sts	0x2A8B, r1	; 0x802a8b <Flow_delay+0xe>
    37f8:	c0 93 6b 2a 	sts	0x2A6B, r28	; 0x802a6b <T1+0x9>
    37fc:	d0 93 6c 2a 	sts	0x2A6C, r29	; 0x802a6c <T1+0xa>
    3800:	8a ef       	ldi	r24, 0xFA	; 250
    3802:	90 e0       	ldi	r25, 0x00	; 0
    3804:	a0 e0       	ldi	r26, 0x00	; 0
    3806:	b0 e0       	ldi	r27, 0x00	; 0
    3808:	80 93 63 2a 	sts	0x2A63, r24	; 0x802a63 <T1+0x1>
    380c:	90 93 64 2a 	sts	0x2A64, r25	; 0x802a64 <T1+0x2>
    3810:	a0 93 65 2a 	sts	0x2A65, r26	; 0x802a65 <T1+0x3>
    3814:	b0 93 66 2a 	sts	0x2A66, r27	; 0x802a66 <T1+0x4>
    3818:	10 92 67 2a 	sts	0x2A67, r1	; 0x802a67 <T1+0x5>
    381c:	10 92 68 2a 	sts	0x2A68, r1	; 0x802a68 <T1+0x6>
    3820:	10 92 69 2a 	sts	0x2A69, r1	; 0x802a69 <T1+0x7>
    3824:	10 92 6a 2a 	sts	0x2A6A, r1	; 0x802a6a <T1+0x8>
    3828:	88 e8       	ldi	r24, 0x88	; 136
    382a:	93 e1       	ldi	r25, 0x13	; 19
    382c:	80 93 73 2a 	sts	0x2A73, r24	; 0x802a73 <T1+0x11>
    3830:	90 93 74 2a 	sts	0x2A74, r25	; 0x802a74 <T1+0x12>
    3834:	10 92 62 2a 	sts	0x2A62, r1	; 0x802a62 <T1>
    3838:	10 92 75 2a 	sts	0x2A75, r1	; 0x802a75 <T1+0x13>
    383c:	10 92 76 2a 	sts	0x2A76, r1	; 0x802a76 <T1+0x14>
    3840:	10 92 77 2a 	sts	0x2A77, r1	; 0x802a77 <T1+0x15>
    3844:	10 92 78 2a 	sts	0x2A78, r1	; 0x802a78 <T1+0x16>
    3848:	10 92 6d 2a 	sts	0x2A6D, r1	; 0x802a6d <T1+0xb>
    384c:	10 92 6e 2a 	sts	0x2A6E, r1	; 0x802a6e <T1+0xc>
    3850:	10 92 6f 2a 	sts	0x2A6F, r1	; 0x802a6f <T1+0xd>
    3854:	10 92 70 2a 	sts	0x2A70, r1	; 0x802a70 <T1+0xe>
    3858:	6c e0       	ldi	r22, 0x0C	; 12
    385a:	70 e0       	ldi	r23, 0x00	; 0
    385c:	8d e0       	ldi	r24, 0x0D	; 13
    385e:	9a e2       	ldi	r25, 0x2A	; 42
    3860:	a6 dd       	rcall	.-1204   	; 0x33ae <OneButton::OneButton(int, int) [clone .constprop.92]>
    3862:	80 91 10 28 	lds	r24, 0x2810	; 0x802810 <DC>
    3866:	90 91 11 28 	lds	r25, 0x2811	; 0x802811 <DC+0x1>
    386a:	a0 91 12 28 	lds	r26, 0x2812	; 0x802812 <DC+0x2>
    386e:	b0 91 13 28 	lds	r27, 0x2813	; 0x802813 <DC+0x3>
    3872:	c0 93 35 2a 	sts	0x2A35, r28	; 0x802a35 <pump_on1+0x9>
    3876:	d0 93 36 2a 	sts	0x2A36, r29	; 0x802a36 <pump_on1+0xa>
    387a:	80 93 2d 2a 	sts	0x2A2D, r24	; 0x802a2d <pump_on1+0x1>
    387e:	90 93 2e 2a 	sts	0x2A2E, r25	; 0x802a2e <pump_on1+0x2>
    3882:	a0 93 2f 2a 	sts	0x2A2F, r26	; 0x802a2f <pump_on1+0x3>
    3886:	b0 93 30 2a 	sts	0x2A30, r27	; 0x802a30 <pump_on1+0x4>
    388a:	10 92 31 2a 	sts	0x2A31, r1	; 0x802a31 <pump_on1+0x5>
    388e:	10 92 32 2a 	sts	0x2A32, r1	; 0x802a32 <pump_on1+0x6>
    3892:	10 92 33 2a 	sts	0x2A33, r1	; 0x802a33 <pump_on1+0x7>
    3896:	10 92 34 2a 	sts	0x2A34, r1	; 0x802a34 <pump_on1+0x8>
    389a:	81 ed       	ldi	r24, 0xD1	; 209
    389c:	9e e0       	ldi	r25, 0x0E	; 14
    389e:	80 93 3d 2a 	sts	0x2A3D, r24	; 0x802a3d <pump_on1+0x11>
    38a2:	90 93 3e 2a 	sts	0x2A3E, r25	; 0x802a3e <pump_on1+0x12>
    38a6:	10 92 2c 2a 	sts	0x2A2C, r1	; 0x802a2c <pump_on1>
    38aa:	10 92 3f 2a 	sts	0x2A3F, r1	; 0x802a3f <pump_on1+0x13>
    38ae:	10 92 40 2a 	sts	0x2A40, r1	; 0x802a40 <pump_on1+0x14>
    38b2:	10 92 41 2a 	sts	0x2A41, r1	; 0x802a41 <pump_on1+0x15>
    38b6:	10 92 42 2a 	sts	0x2A42, r1	; 0x802a42 <pump_on1+0x16>
    38ba:	10 92 37 2a 	sts	0x2A37, r1	; 0x802a37 <pump_on1+0xb>
    38be:	10 92 38 2a 	sts	0x2A38, r1	; 0x802a38 <pump_on1+0xc>
    38c2:	10 92 39 2a 	sts	0x2A39, r1	; 0x802a39 <pump_on1+0xd>
    38c6:	10 92 3a 2a 	sts	0x2A3A, r1	; 0x802a3a <pump_on1+0xe>
    38ca:	40 91 0f 28 	lds	r20, 0x280F	; 0x80280f <Disp_t>
    38ce:	28 ee       	ldi	r18, 0xE8	; 232
    38d0:	33 e0       	ldi	r19, 0x03	; 3
    38d2:	42 9f       	mul	r20, r18
    38d4:	c0 01       	movw	r24, r0
    38d6:	43 9f       	mul	r20, r19
    38d8:	90 0d       	add	r25, r0
    38da:	11 24       	eor	r1, r1
    38dc:	09 2e       	mov	r0, r25
    38de:	00 0c       	add	r0, r0
    38e0:	aa 0b       	sbc	r26, r26
    38e2:	bb 0b       	sbc	r27, r27
    38e4:	c0 93 50 2a 	sts	0x2A50, r28	; 0x802a50 <pump_Wait+0x9>
    38e8:	d0 93 51 2a 	sts	0x2A51, r29	; 0x802a51 <pump_Wait+0xa>
    38ec:	80 93 48 2a 	sts	0x2A48, r24	; 0x802a48 <pump_Wait+0x1>
    38f0:	90 93 49 2a 	sts	0x2A49, r25	; 0x802a49 <pump_Wait+0x2>
    38f4:	a0 93 4a 2a 	sts	0x2A4A, r26	; 0x802a4a <pump_Wait+0x3>
    38f8:	b0 93 4b 2a 	sts	0x2A4B, r27	; 0x802a4b <pump_Wait+0x4>
    38fc:	10 92 4c 2a 	sts	0x2A4C, r1	; 0x802a4c <pump_Wait+0x5>
    3900:	10 92 4d 2a 	sts	0x2A4D, r1	; 0x802a4d <pump_Wait+0x6>
    3904:	10 92 4e 2a 	sts	0x2A4E, r1	; 0x802a4e <pump_Wait+0x7>
    3908:	10 92 4f 2a 	sts	0x2A4F, r1	; 0x802a4f <pump_Wait+0x8>
    390c:	83 e9       	ldi	r24, 0x93	; 147
    390e:	9e e0       	ldi	r25, 0x0E	; 14
    3910:	80 93 58 2a 	sts	0x2A58, r24	; 0x802a58 <pump_Wait+0x11>
    3914:	90 93 59 2a 	sts	0x2A59, r25	; 0x802a59 <pump_Wait+0x12>
    3918:	10 92 47 2a 	sts	0x2A47, r1	; 0x802a47 <pump_Wait>
    391c:	10 92 5a 2a 	sts	0x2A5A, r1	; 0x802a5a <pump_Wait+0x13>
    3920:	10 92 5b 2a 	sts	0x2A5B, r1	; 0x802a5b <pump_Wait+0x14>
    3924:	10 92 5c 2a 	sts	0x2A5C, r1	; 0x802a5c <pump_Wait+0x15>
    3928:	10 92 5d 2a 	sts	0x2A5D, r1	; 0x802a5d <pump_Wait+0x16>
    392c:	10 92 52 2a 	sts	0x2A52, r1	; 0x802a52 <pump_Wait+0xb>
    3930:	10 92 53 2a 	sts	0x2A53, r1	; 0x802a53 <pump_Wait+0xc>
    3934:	10 92 54 2a 	sts	0x2A54, r1	; 0x802a54 <pump_Wait+0xd>
    3938:	10 92 55 2a 	sts	0x2A55, r1	; 0x802a55 <pump_Wait+0xe>
    393c:	df 91       	pop	r29
    393e:	cf 91       	pop	r28
    3940:	1f 91       	pop	r17
    3942:	0f 91       	pop	r16
    3944:	ff 90       	pop	r15
    3946:	ef 90       	pop	r14
    3948:	df 90       	pop	r13
    394a:	cf 90       	pop	r12
    394c:	bf 90       	pop	r11
    394e:	af 90       	pop	r10
    3950:	9f 90       	pop	r9
    3952:	8f 90       	pop	r8
    3954:	08 95       	ret

00003956 <main>:
init():
    3956:	88 ed       	ldi	r24, 0xD8	; 216
    3958:	90 e0       	ldi	r25, 0x00	; 0
    395a:	84 bf       	out	0x34, r24	; 52
    395c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f4061>
    3960:	80 91 02 06 	lds	r24, 0x0602	; 0x800602 <__TEXT_REGION_LENGTH__+0x7f4602>
    3964:	86 60       	ori	r24, 0x06	; 6
    3966:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x7f4602>
    396a:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <__TEXT_REGION_LENGTH__+0x7f4600>
    396e:	81 60       	ori	r24, 0x01	; 1
    3970:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x7f4600>
analogReference():
    3974:	80 91 02 06 	lds	r24, 0x0602	; 0x800602 <__TEXT_REGION_LENGTH__+0x7f4602>
    3978:	8f 7c       	andi	r24, 0xCF	; 207
    397a:	80 65       	ori	r24, 0x50	; 80
    397c:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x7f4602>
init():
    3980:	10 92 e2 05 	sts	0x05E2, r1	; 0x8005e2 <__TEXT_REGION_LENGTH__+0x7f45e2>
setup_timers():
    3984:	83 e0       	ldi	r24, 0x03	; 3
    3986:	80 93 e4 05 	sts	0x05E4, r24	; 0x8005e4 <__TEXT_REGION_LENGTH__+0x7f45e4>
    398a:	c1 e0       	ldi	r28, 0x01	; 1
    398c:	c0 93 03 0a 	sts	0x0A03, r28	; 0x800a03 <__TEXT_REGION_LENGTH__+0x7f4a03>
    3990:	9e ef       	ldi	r25, 0xFE	; 254
    3992:	90 93 27 0a 	sts	0x0A27, r25	; 0x800a27 <__TEXT_REGION_LENGTH__+0x7f4a27>
    3996:	90 93 26 0a 	sts	0x0A26, r25	; 0x800a26 <__TEXT_REGION_LENGTH__+0x7f4a26>
    399a:	80 e8       	ldi	r24, 0x80	; 128
    399c:	80 93 2d 0a 	sts	0x0A2D, r24	; 0x800a2d <__TEXT_REGION_LENGTH__+0x7f4a2d>
    39a0:	80 93 2b 0a 	sts	0x0A2B, r24	; 0x800a2b <__TEXT_REGION_LENGTH__+0x7f4a2b>
    39a4:	80 93 29 0a 	sts	0x0A29, r24	; 0x800a29 <__TEXT_REGION_LENGTH__+0x7f4a29>
    39a8:	80 93 2c 0a 	sts	0x0A2C, r24	; 0x800a2c <__TEXT_REGION_LENGTH__+0x7f4a2c>
    39ac:	80 93 2a 0a 	sts	0x0A2A, r24	; 0x800a2a <__TEXT_REGION_LENGTH__+0x7f4a2a>
    39b0:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__TEXT_REGION_LENGTH__+0x7f4a28>
    39b4:	2b e0       	ldi	r18, 0x0B	; 11
    39b6:	20 93 00 0a 	sts	0x0A00, r18	; 0x800a00 <__TEXT_REGION_LENGTH__+0x7f4a00>
    39ba:	10 92 e5 05 	sts	0x05E5, r1	; 0x8005e5 <__TEXT_REGION_LENGTH__+0x7f45e5>
    39be:	37 e0       	ldi	r19, 0x07	; 7
    39c0:	30 93 81 0a 	sts	0x0A81, r19	; 0x800a81 <__TEXT_REGION_LENGTH__+0x7f4a81>
    39c4:	90 93 8c 0a 	sts	0x0A8C, r25	; 0x800a8c <__TEXT_REGION_LENGTH__+0x7f4a8c>
    39c8:	80 93 8d 0a 	sts	0x0A8D, r24	; 0x800a8d <__TEXT_REGION_LENGTH__+0x7f4a8d>
    39cc:	25 e0       	ldi	r18, 0x05	; 5
    39ce:	20 93 80 0a 	sts	0x0A80, r18	; 0x800a80 <__TEXT_REGION_LENGTH__+0x7f4a80>
    39d2:	30 93 91 0a 	sts	0x0A91, r19	; 0x800a91 <__TEXT_REGION_LENGTH__+0x7f4a91>
    39d6:	90 93 9c 0a 	sts	0x0A9C, r25	; 0x800a9c <__TEXT_REGION_LENGTH__+0x7f4a9c>
    39da:	80 93 9d 0a 	sts	0x0A9D, r24	; 0x800a9d <__TEXT_REGION_LENGTH__+0x7f4a9d>
    39de:	20 93 90 0a 	sts	0x0A90, r18	; 0x800a90 <__TEXT_REGION_LENGTH__+0x7f4a90>
    39e2:	30 93 a1 0a 	sts	0x0AA1, r19	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x7f4aa1>
    39e6:	90 93 ac 0a 	sts	0x0AAC, r25	; 0x800aac <__TEXT_REGION_LENGTH__+0x7f4aac>
    39ea:	80 93 ad 0a 	sts	0x0AAD, r24	; 0x800aad <__TEXT_REGION_LENGTH__+0x7f4aad>
    39ee:	20 93 a0 0a 	sts	0x0AA0, r18	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x7f4aa0>
init():
    39f2:	10 92 a1 0a 	sts	0x0AA1, r1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x7f4aa1>
    39f6:	8f e7       	ldi	r24, 0x7F	; 127
    39f8:	9e e3       	ldi	r25, 0x3E	; 62
    39fa:	80 93 ac 0a 	sts	0x0AAC, r24	; 0x800aac <__TEXT_REGION_LENGTH__+0x7f4aac>
    39fe:	90 93 ad 0a 	sts	0x0AAD, r25	; 0x800aad <__TEXT_REGION_LENGTH__+0x7f4aad>
    3a02:	80 91 a5 0a 	lds	r24, 0x0AA5	; 0x800aa5 <__TEXT_REGION_LENGTH__+0x7f4aa5>
    3a06:	81 60       	ori	r24, 0x01	; 1
    3a08:	80 93 a5 0a 	sts	0x0AA5, r24	; 0x800aa5 <__TEXT_REGION_LENGTH__+0x7f4aa5>
    3a0c:	10 92 a0 0a 	sts	0x0AA0, r1	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x7f4aa0>
    3a10:	80 91 a0 0a 	lds	r24, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x7f4aa0>
    3a14:	81 60       	ori	r24, 0x01	; 1
    3a16:	80 93 a0 0a 	sts	0x0AA0, r24	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x7f4aa0>
    3a1a:	78 94       	sei
setup():
    3a1c:	40 e8       	ldi	r20, 0x80	; 128
    3a1e:	55 e2       	ldi	r21, 0x25	; 37
    3a20:	60 e0       	ldi	r22, 0x00	; 0
    3a22:	70 e0       	ldi	r23, 0x00	; 0
    3a24:	88 ee       	ldi	r24, 0xE8	; 232
    3a26:	98 e2       	ldi	r25, 0x28	; 40
    3a28:	0e 94 96 0b 	call	0x172c	; 0x172c <UartClass::begin(unsigned long)>
Disp_Setup():
    3a2c:	0e 94 66 04 	call	0x8cc	; 0x8cc <TwoWire::begin() [clone .constprop.32]>
TWI_MasterSetBaud():
    3a30:	83 e4       	ldi	r24, 0x43	; 67
    3a32:	80 93 a6 08 	sts	0x08A6, r24	; 0x8008a6 <__TEXT_REGION_LENGTH__+0x7f48a6>
init_priv():
    3a36:	0e 94 66 04 	call	0x8cc	; 0x8cc <TwoWire::begin() [clone .constprop.32]>
    3a3a:	10 92 3c 2b 	sts	0x2B3C, r1	; 0x802b3c <lcd+0x5>
    3a3e:	80 91 41 2b 	lds	r24, 0x2B41	; 0x802b41 <lcd+0xa>
    3a42:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <LiquidCrystal_I2C::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.37]>
Disp_Setup():
    3a46:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <LiquidCrystal_I2C::clear() [clone .constprop.80]>
backlight():
    3a4a:	88 e0       	ldi	r24, 0x08	; 8
    3a4c:	80 93 42 2b 	sts	0x2B42, r24	; 0x802b42 <lcd+0xb>
    3a50:	60 e0       	ldi	r22, 0x00	; 0
    3a52:	87 e3       	ldi	r24, 0x37	; 55
    3a54:	9b e2       	ldi	r25, 0x2B	; 43
    3a56:	0e 94 91 07 	call	0xf22	; 0xf22 <LiquidCrystal_I2C::expanderWrite(unsigned char)>
Disp_Setup():
    3a5a:	82 e0       	ldi	r24, 0x02	; 2
    3a5c:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <LiquidCrystal_I2C::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.37]>
noAutoscroll():
    3a60:	60 91 3e 2b 	lds	r22, 0x2B3E	; 0x802b3e <lcd+0x7>
    3a64:	6e 7f       	andi	r22, 0xFE	; 254
    3a66:	60 93 3e 2b 	sts	0x2B3E, r22	; 0x802b3e <lcd+0x7>
    3a6a:	64 60       	ori	r22, 0x04	; 4
command():
    3a6c:	40 e0       	ldi	r20, 0x00	; 0
    3a6e:	87 e3       	ldi	r24, 0x37	; 55
    3a70:	9b e2       	ldi	r25, 0x2B	; 43
    3a72:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <LiquidCrystal_I2C::send(unsigned char, unsigned char)>
Disp_Setup():
    3a76:	68 ee       	ldi	r22, 0xE8	; 232
    3a78:	73 e0       	ldi	r23, 0x03	; 3
    3a7a:	80 e0       	ldi	r24, 0x00	; 0
    3a7c:	90 e0       	ldi	r25, 0x00	; 0
    3a7e:	0e 94 a2 06 	call	0xd44	; 0xd44 <Buzzerclass::buzzer_on(unsigned long) [clone .constprop.93]>
    3a82:	60 e0       	ldi	r22, 0x00	; 0
    3a84:	80 e0       	ldi	r24, 0x00	; 0
    3a86:	0e 94 c9 10 	call	0x2192	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    3a8a:	8c e5       	ldi	r24, 0x5C	; 92
    3a8c:	91 e9       	ldi	r25, 0x91	; 145
    3a8e:	0e 94 cc 11 	call	0x2398	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    3a92:	61 e0       	ldi	r22, 0x01	; 1
    3a94:	80 e0       	ldi	r24, 0x00	; 0
    3a96:	0e 94 c9 10 	call	0x2192	; 0x2192 <LiquidCrystal_I2C::setCursor(unsigned char, unsigned char) [clone .constprop.67]>
    3a9a:	8d e6       	ldi	r24, 0x6D	; 109
    3a9c:	91 e9       	ldi	r25, 0x91	; 145
    3a9e:	0e 94 cc 11 	call	0x2398	; 0x2398 <Print::print(char const*) [clone .constprop.68]>
    3aa2:	6c ed       	ldi	r22, 0xDC	; 220
    3aa4:	75 e0       	ldi	r23, 0x05	; 5
    3aa6:	80 e0       	ldi	r24, 0x00	; 0
    3aa8:	90 e0       	ldi	r25, 0x00	; 0
    3aaa:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <delay>
pinMode():
    3aae:	61 e0       	ldi	r22, 0x01	; 1
    3ab0:	84 e1       	ldi	r24, 0x14	; 20
    3ab2:	0e 94 32 04 	call	0x864	; 0x864 <pinMode.part.1>
    3ab6:	61 e0       	ldi	r22, 0x01	; 1
    3ab8:	86 e1       	ldi	r24, 0x16	; 22
    3aba:	0e 94 32 04 	call	0x864	; 0x864 <pinMode.part.1>
    3abe:	61 e0       	ldi	r22, 0x01	; 1
    3ac0:	85 e1       	ldi	r24, 0x15	; 21
    3ac2:	0e 94 32 04 	call	0x864	; 0x864 <pinMode.part.1>
    3ac6:	61 e0       	ldi	r22, 0x01	; 1
    3ac8:	83 e1       	ldi	r24, 0x13	; 19
    3aca:	0e 94 32 04 	call	0x864	; 0x864 <pinMode.part.1>
    3ace:	61 e0       	ldi	r22, 0x01	; 1
    3ad0:	82 e1       	ldi	r24, 0x12	; 18
    3ad2:	0e 94 32 04 	call	0x864	; 0x864 <pinMode.part.1>
    3ad6:	61 e0       	ldi	r22, 0x01	; 1
    3ad8:	88 e1       	ldi	r24, 0x18	; 24
    3ada:	0e 94 32 04 	call	0x864	; 0x864 <pinMode.part.1>
    3ade:	61 e0       	ldi	r22, 0x01	; 1
    3ae0:	89 e1       	ldi	r24, 0x19	; 25
    3ae2:	0e 94 32 04 	call	0x864	; 0x864 <pinMode.part.1>
digitalWrite():
    3ae6:	60 e0       	ldi	r22, 0x00	; 0
    3ae8:	86 e1       	ldi	r24, 0x16	; 22
    3aea:	0e 94 c6 04 	call	0x98c	; 0x98c <digitalWrite.part.2>
    3aee:	60 e0       	ldi	r22, 0x00	; 0
    3af0:	85 e1       	ldi	r24, 0x15	; 21
    3af2:	0e 94 c6 04 	call	0x98c	; 0x98c <digitalWrite.part.2>
    3af6:	60 e0       	ldi	r22, 0x00	; 0
    3af8:	88 e1       	ldi	r24, 0x18	; 24
    3afa:	0e 94 c6 04 	call	0x98c	; 0x98c <digitalWrite.part.2>
    3afe:	60 e0       	ldi	r22, 0x00	; 0
    3b00:	89 e1       	ldi	r24, 0x19	; 25
    3b02:	0e 94 c6 04 	call	0x98c	; 0x98c <digitalWrite.part.2>
pinMode():
    3b06:	60 e0       	ldi	r22, 0x00	; 0
    3b08:	86 e0       	ldi	r24, 0x06	; 6
    3b0a:	0e 94 32 04 	call	0x864	; 0x864 <pinMode.part.1>
    3b0e:	62 e0       	ldi	r22, 0x02	; 2
    3b10:	8a e0       	ldi	r24, 0x0A	; 10
    3b12:	0e 94 32 04 	call	0x864	; 0x864 <pinMode.part.1>
    3b16:	61 e0       	ldi	r22, 0x01	; 1
    3b18:	87 e1       	ldi	r24, 0x17	; 23
    3b1a:	0e 94 32 04 	call	0x864	; 0x864 <pinMode.part.1>
    3b1e:	60 e0       	ldi	r22, 0x00	; 0
    3b20:	8e e0       	ldi	r24, 0x0E	; 14
    3b22:	0e 94 32 04 	call	0x864	; 0x864 <pinMode.part.1>
    3b26:	60 e0       	ldi	r22, 0x00	; 0
    3b28:	8d e0       	ldi	r24, 0x0D	; 13
    3b2a:	0e 94 32 04 	call	0x864	; 0x864 <pinMode.part.1>
    3b2e:	62 e0       	ldi	r22, 0x02	; 2
    3b30:	88 e0       	ldi	r24, 0x08	; 8
    3b32:	0e 94 32 04 	call	0x864	; 0x864 <pinMode.part.1>
    3b36:	62 e0       	ldi	r22, 0x02	; 2
    3b38:	87 e0       	ldi	r24, 0x07	; 7
    3b3a:	0e 94 32 04 	call	0x864	; 0x864 <pinMode.part.1>
    3b3e:	62 e0       	ldi	r22, 0x02	; 2
    3b40:	8b e0       	ldi	r24, 0x0B	; 11
    3b42:	0e 94 32 04 	call	0x864	; 0x864 <pinMode.part.1>
    3b46:	62 e0       	ldi	r22, 0x02	; 2
    3b48:	85 e0       	ldi	r24, 0x05	; 5
    3b4a:	0e 94 32 04 	call	0x864	; 0x864 <pinMode.part.1>
attachClick():
    3b4e:	89 e9       	ldi	r24, 0x99	; 153
    3b50:	9d e0       	ldi	r25, 0x0D	; 13
    3b52:	80 93 fb 29 	sts	0x29FB, r24	; 0x8029fb <button2+0xd>
    3b56:	90 93 fc 29 	sts	0x29FC, r25	; 0x8029fc <button2+0xe>
attachLongPressStart():
    3b5a:	8c eb       	ldi	r24, 0xBC	; 188
    3b5c:	9c e0       	ldi	r25, 0x0C	; 12
    3b5e:	80 93 01 2a 	sts	0x2A01, r24	; 0x802a01 <button2+0x13>
    3b62:	90 93 02 2a 	sts	0x2A02, r25	; 0x802a02 <button2+0x14>
attachClick():
    3b66:	85 ef       	ldi	r24, 0xF5	; 245
    3b68:	92 e0       	ldi	r25, 0x02	; 2
    3b6a:	80 93 dc 29 	sts	0x29DC, r24	; 0x8029dc <button3+0xd>
    3b6e:	90 93 dd 29 	sts	0x29DD, r25	; 0x8029dd <button3+0xe>
attachDuringLongPress():
    3b72:	83 ec       	ldi	r24, 0xC3	; 195
    3b74:	99 e0       	ldi	r25, 0x09	; 9
    3b76:	80 93 e6 29 	sts	0x29E6, r24	; 0x8029e6 <button3+0x17>
    3b7a:	90 93 e7 29 	sts	0x29E7, r25	; 0x8029e7 <button3+0x18>
attachClick():
    3b7e:	8c e7       	ldi	r24, 0x7C	; 124
    3b80:	9a e0       	ldi	r25, 0x0A	; 10
    3b82:	80 93 bd 29 	sts	0x29BD, r24	; 0x8029bd <button4+0xd>
    3b86:	90 93 be 29 	sts	0x29BE, r25	; 0x8029be <button4+0xe>
attachDuringLongPress():
    3b8a:	8c e0       	ldi	r24, 0x0C	; 12
    3b8c:	99 e0       	ldi	r25, 0x09	; 9
    3b8e:	80 93 c7 29 	sts	0x29C7, r24	; 0x8029c7 <button4+0x17>
    3b92:	90 93 c8 29 	sts	0x29C8, r25	; 0x8029c8 <button4+0x18>
attachClick():
    3b96:	87 e3       	ldi	r24, 0x37	; 55
    3b98:	9c e0       	ldi	r25, 0x0C	; 12
    3b9a:	80 93 9e 29 	sts	0x299E, r24	; 0x80299e <button5+0xd>
    3b9e:	90 93 9f 29 	sts	0x299F, r25	; 0x80299f <button5+0xe>
attachLongPressStart():
    3ba2:	81 ee       	ldi	r24, 0xE1	; 225
    3ba4:	93 e0       	ldi	r25, 0x03	; 3
    3ba6:	80 93 a4 29 	sts	0x29A4, r24	; 0x8029a4 <button5+0x13>
    3baa:	90 93 a5 29 	sts	0x29A5, r25	; 0x8029a5 <button5+0x14>
attachDuringLongPress():
    3bae:	8a ed       	ldi	r24, 0xDA	; 218
    3bb0:	98 e0       	ldi	r25, 0x08	; 8
    3bb2:	80 93 a8 29 	sts	0x29A8, r24	; 0x8029a8 <button5+0x17>
    3bb6:	90 93 a9 29 	sts	0x29A9, r25	; 0x8029a9 <button5+0x18>
attachLongPressStop():
    3bba:	88 ee       	ldi	r24, 0xE8	; 232
    3bbc:	93 e0       	ldi	r25, 0x03	; 3
    3bbe:	80 93 a6 29 	sts	0x29A6, r24	; 0x8029a6 <button5+0x15>
    3bc2:	90 93 a7 29 	sts	0x29A7, r25	; 0x8029a7 <button5+0x16>
Butt_Setup():
    3bc6:	83 eb       	ldi	r24, 0xB3	; 179
    3bc8:	9a e2       	ldi	r25, 0x2A	; 42
    3bca:	0e 94 82 06 	call	0xd04	; 0xd04 <Ticker::start()>
pinMode():
    3bce:	62 e0       	ldi	r22, 0x02	; 2
    3bd0:	8c e0       	ldi	r24, 0x0C	; 12
    3bd2:	0e 94 32 04 	call	0x864	; 0x864 <pinMode.part.1>
    3bd6:	61 e0       	ldi	r22, 0x01	; 1
    3bd8:	84 e0       	ldi	r24, 0x04	; 4
    3bda:	0e 94 32 04 	call	0x864	; 0x864 <pinMode.part.1>
attachClick():
    3bde:	82 ec       	ldi	r24, 0xC2	; 194
    3be0:	9f e0       	ldi	r25, 0x0F	; 15
    3be2:	80 93 1a 2a 	sts	0x2A1A, r24	; 0x802a1a <button1+0xd>
    3be6:	90 93 1b 2a 	sts	0x2A1B, r25	; 0x802a1b <button1+0xe>
attachLongPressStart():
    3bea:	8d e4       	ldi	r24, 0x4D	; 77
    3bec:	9f e0       	ldi	r25, 0x0F	; 15
    3bee:	80 93 20 2a 	sts	0x2A20, r24	; 0x802a20 <button1+0x13>
    3bf2:	90 93 21 2a 	sts	0x2A21, r25	; 0x802a21 <button1+0x14>
setup():
    3bf6:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <eepromclass::Read_memory() [clone .constprop.71]>
    3bfa:	82 e6       	ldi	r24, 0x62	; 98
    3bfc:	9a e2       	ldi	r25, 0x2A	; 42
    3bfe:	0e 94 82 06 	call	0xd04	; 0xd04 <Ticker::start()>
    3c02:	f8 94       	cli
    3c04:	c0 93 0a 0a 	sts	0x0A0A, r28	; 0x800a0a <__TEXT_REGION_LENGTH__+0x7f4a0a>
    3c08:	10 92 01 0a 	sts	0x0A01, r1	; 0x800a01 <__TEXT_REGION_LENGTH__+0x7f4a01>
    3c0c:	80 91 09 0a 	lds	r24, 0x0A09	; 0x800a09 <__TEXT_REGION_LENGTH__+0x7f4a09>
    3c10:	8e 7f       	andi	r24, 0xFE	; 254
    3c12:	80 93 09 0a 	sts	0x0A09, r24	; 0x800a09 <__TEXT_REGION_LENGTH__+0x7f4a09>
    3c16:	82 ec       	ldi	r24, 0xC2	; 194
    3c18:	90 e0       	ldi	r25, 0x00	; 0
    3c1a:	80 93 26 0a 	sts	0x0A26, r24	; 0x800a26 <__TEXT_REGION_LENGTH__+0x7f4a26>
    3c1e:	90 93 27 0a 	sts	0x0A27, r25	; 0x800a27 <__TEXT_REGION_LENGTH__+0x7f4a27>
    3c22:	8f e0       	ldi	r24, 0x0F	; 15
    3c24:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <__TEXT_REGION_LENGTH__+0x7f4a00>
    3c28:	78 94       	sei
Resume_t():
    3c2a:	82 e0       	ldi	r24, 0x02	; 2
    3c2c:	f8 2e       	mov	r15, r24
TempRead_Boilor():
    3c2e:	01 e0       	ldi	r16, 0x01	; 1
    3c30:	10 e0       	ldi	r17, 0x00	; 0
    3c32:	93 e0       	ldi	r25, 0x03	; 3
    3c34:	e9 2e       	mov	r14, r25
loop():
    3c36:	82 e6       	ldi	r24, 0x62	; 98
    3c38:	9a e2       	ldi	r25, 0x2A	; 42
    3c3a:	0e 94 24 06 	call	0xc48	; 0xc48 <Ticker::update()>
Pump_ticker_Update():
    3c3e:	8d e0       	ldi	r24, 0x0D	; 13
    3c40:	9a e2       	ldi	r25, 0x2A	; 42
    3c42:	0e 94 fc 07 	call	0xff8	; 0xff8 <OneButton::tick()>
    3c46:	8c e2       	ldi	r24, 0x2C	; 44
    3c48:	9a e2       	ldi	r25, 0x2A	; 42
    3c4a:	0e 94 24 06 	call	0xc48	; 0xc48 <Ticker::update()>
    3c4e:	87 e4       	ldi	r24, 0x47	; 71
    3c50:	9a e2       	ldi	r25, 0x2A	; 42
    3c52:	0e 94 24 06 	call	0xc48	; 0xc48 <Ticker::update()>
Buzzer_updates():
    3c56:	8e ec       	ldi	r24, 0xCE	; 206
    3c58:	9a e2       	ldi	r25, 0x2A	; 42
    3c5a:	0e 94 24 06 	call	0xc48	; 0xc48 <Ticker::update()>
button_update():
    3c5e:	8e ee       	ldi	r24, 0xEE	; 238
    3c60:	99 e2       	ldi	r25, 0x29	; 41
    3c62:	0e 94 fc 07 	call	0xff8	; 0xff8 <OneButton::tick()>
    3c66:	8f ec       	ldi	r24, 0xCF	; 207
    3c68:	99 e2       	ldi	r25, 0x29	; 41
    3c6a:	0e 94 fc 07 	call	0xff8	; 0xff8 <OneButton::tick()>
    3c6e:	80 eb       	ldi	r24, 0xB0	; 176
    3c70:	99 e2       	ldi	r25, 0x29	; 41
    3c72:	0e 94 fc 07 	call	0xff8	; 0xff8 <OneButton::tick()>
    3c76:	81 e9       	ldi	r24, 0x91	; 145
    3c78:	99 e2       	ldi	r25, 0x29	; 41
    3c7a:	0e 94 fc 07 	call	0xff8	; 0xff8 <OneButton::tick()>
    3c7e:	83 eb       	ldi	r24, 0xB3	; 179
    3c80:	9a e2       	ldi	r25, 0x2A	; 42
    3c82:	0e 94 24 06 	call	0xc48	; 0xc48 <Ticker::update()>
process_start():
    3c86:	88 e9       	ldi	r24, 0x98	; 152
    3c88:	9a e2       	ldi	r25, 0x2A	; 42
    3c8a:	0e 94 24 06 	call	0xc48	; 0xc48 <Ticker::update()>
    3c8e:	d0 90 da 28 	lds	r13, 0x28DA	; 0x8028da <sfil_comp>
    3c92:	d1 10       	cpse	r13, r1
    3c94:	04 c0       	rjmp	.+8      	; 0x3c9e <main+0x348>
    3c96:	10 92 92 28 	sts	0x2892, r1	; 0x802892 <boil2_var>
    3c9a:	c0 93 c4 28 	sts	0x28C4, r28	; 0x8028c4 <sfil>
    3c9e:	d0 91 05 28 	lds	r29, 0x2805	; 0x802805 <level_detect>
    3ca2:	d1 30       	cpi	r29, 0x01	; 1
    3ca4:	09 f4       	brne	.+2      	; 0x3ca8 <main+0x352>
    3ca6:	6d c2       	rjmp	.+1242   	; 0x4182 <__RODATA_PM_OFFSET__+0x182>
    3ca8:	d0 91 06 28 	lds	r29, 0x2806	; 0x802806 <Stop_cycle>
    3cac:	dd 23       	and	r29, r29
    3cae:	21 f0       	breq	.+8      	; 0x3cb8 <main+0x362>
digitalWrite():
    3cb0:	61 e0       	ldi	r22, 0x01	; 1
    3cb2:	84 e1       	ldi	r24, 0x14	; 20
    3cb4:	0e 94 c6 04 	call	0x98c	; 0x98c <digitalWrite.part.2>
process_start():
    3cb8:	80 91 c6 28 	lds	r24, 0x28C6	; 0x8028c6 <Flow_Err>
    3cbc:	81 11       	cpse	r24, r1
    3cbe:	64 c0       	rjmp	.+200    	; 0x3d88 <main+0x432>
    3cc0:	80 91 c5 28 	lds	r24, 0x28C5	; 0x8028c5 <Temp_Err>
    3cc4:	81 11       	cpse	r24, r1
    3cc6:	60 c0       	rjmp	.+192    	; 0x3d88 <main+0x432>
    3cc8:	dd 23       	and	r29, r29
    3cca:	09 f4       	brne	.+2      	; 0x3cce <main+0x378>
    3ccc:	5d c0       	rjmp	.+186    	; 0x3d88 <main+0x432>
    3cce:	c0 93 c7 28 	sts	0x28C7, r28	; 0x8028c7 <Process1>
    3cd2:	d0 91 ca 28 	lds	r29, 0x28CA	; 0x8028ca <sec_Heater>
    3cd6:	d8 32       	cpi	r29, 0x28	; 40
    3cd8:	08 f4       	brcc	.+2      	; 0x3cdc <main+0x386>
    3cda:	56 c0       	rjmp	.+172    	; 0x3d88 <main+0x432>
    3cdc:	10 92 d4 28 	sts	0x28D4, r1	; 0x8028d4 <process_stop_variable>
digitalWrite():
    3ce0:	61 e0       	ldi	r22, 0x01	; 1
    3ce2:	83 e1       	ldi	r24, 0x13	; 19
    3ce4:	0e 94 c6 04 	call	0x98c	; 0x98c <digitalWrite.part.2>
Resume_t():
    3ce8:	80 91 c4 28 	lds	r24, 0x28C4	; 0x8028c4 <sfil>
    3cec:	88 23       	and	r24, r24
    3cee:	11 f0       	breq	.+4      	; 0x3cf4 <main+0x39e>
    3cf0:	dd 20       	and	r13, r13
    3cf2:	29 f0       	breq	.+10     	; 0x3cfe <main+0x3a8>
    3cf4:	90 91 a5 28 	lds	r25, 0x28A5	; 0x8028a5 <thermopile>
    3cf8:	99 23       	and	r25, r25
    3cfa:	09 f4       	brne	.+2      	; 0x3cfe <main+0x3a8>
    3cfc:	87 c1       	rjmp	.+782    	; 0x400c <__RODATA_PM_OFFSET__+0xc>
    3cfe:	f0 92 05 28 	sts	0x2805, r15	; 0x802805 <level_detect>
    3d02:	c0 93 92 28 	sts	0x2892, r28	; 0x802892 <boil2_var>
    3d06:	0e 94 96 05 	call	0xb2c	; 0xb2c <Dispenseclass::secondboil_stop_pump() [clone .constprop.79]>
    3d0a:	80 91 91 28 	lds	r24, 0x2891	; 0x802891 <once_boil2>
    3d0e:	81 11       	cpse	r24, r1
    3d10:	08 c0       	rjmp	.+16     	; 0x3d22 <main+0x3cc>
    3d12:	0e 94 96 05 	call	0xb2c	; 0xb2c <Dispenseclass::secondboil_stop_pump() [clone .constprop.79]>
    3d16:	10 92 ca 28 	sts	0x28CA, r1	; 0x8028ca <sec_Heater>
    3d1a:	c0 93 91 28 	sts	0x2891, r28	; 0x802891 <once_boil2>
    3d1e:	10 92 e5 28 	sts	0x28E5, r1	; 0x8028e5 <screen>
    3d22:	80 91 ca 28 	lds	r24, 0x28CA	; 0x8028ca <sec_Heater>
    3d26:	8e 32       	cpi	r24, 0x2E	; 46
    3d28:	40 f0       	brcs	.+16     	; 0x3d3a <main+0x3e4>
digitalWrite():
    3d2a:	61 e0       	ldi	r22, 0x01	; 1
    3d2c:	86 e1       	ldi	r24, 0x16	; 22
    3d2e:	0e 94 c6 04 	call	0x98c	; 0x98c <digitalWrite.part.2>
    3d32:	60 e0       	ldi	r22, 0x00	; 0
    3d34:	85 e1       	ldi	r24, 0x15	; 21
    3d36:	0e 94 c6 04 	call	0x98c	; 0x98c <digitalWrite.part.2>
Resume_t():
    3d3a:	80 91 c0 28 	lds	r24, 0x28C0	; 0x8028c0 <sfil_on>
    3d3e:	90 91 c1 28 	lds	r25, 0x28C1	; 0x8028c1 <sfil_on+0x1>
    3d42:	a0 91 c2 28 	lds	r26, 0x28C2	; 0x8028c2 <sfil_on+0x2>
    3d46:	b0 91 c3 28 	lds	r27, 0x28C3	; 0x8028c3 <sfil_on+0x3>
    3d4a:	8c 32       	cpi	r24, 0x2C	; 44
    3d4c:	91 40       	sbci	r25, 0x01	; 1
    3d4e:	a1 05       	cpc	r26, r1
    3d50:	b1 05       	cpc	r27, r1
    3d52:	d0 f0       	brcs	.+52     	; 0x3d88 <main+0x432>
    3d54:	10 92 91 28 	sts	0x2891, r1	; 0x802891 <once_boil2>
    3d58:	10 92 c9 28 	sts	0x28C9, r1	; 0x8028c9 <Level_var>
    3d5c:	c0 93 da 28 	sts	0x28DA, r28	; 0x8028da <sfil_comp>
    3d60:	10 92 c4 28 	sts	0x28C4, r1	; 0x8028c4 <sfil>
    3d64:	10 92 c0 28 	sts	0x28C0, r1	; 0x8028c0 <sfil_on>
    3d68:	10 92 c1 28 	sts	0x28C1, r1	; 0x8028c1 <sfil_on+0x1>
    3d6c:	10 92 c2 28 	sts	0x28C2, r1	; 0x8028c2 <sfil_on+0x2>
    3d70:	10 92 c3 28 	sts	0x28C3, r1	; 0x8028c3 <sfil_on+0x3>
    3d74:	10 92 c7 28 	sts	0x28C7, r1	; 0x8028c7 <Process1>
digitalWrite():
    3d78:	60 e0       	ldi	r22, 0x00	; 0
    3d7a:	88 e1       	ldi	r24, 0x18	; 24
    3d7c:	0e 94 c6 04 	call	0x98c	; 0x98c <digitalWrite.part.2>
    3d80:	60 e0       	ldi	r22, 0x00	; 0
    3d82:	84 e1       	ldi	r24, 0x14	; 20
    3d84:	0e 94 c6 04 	call	0x98c	; 0x98c <digitalWrite.part.2>
digitalRead():
    3d88:	8a e0       	ldi	r24, 0x0A	; 10
    3d8a:	0e 94 a2 05 	call	0xb44	; 0xb44 <digitalRead.part.3>
Level_sense():
    3d8e:	90 91 94 28 	lds	r25, 0x2894	; 0x802894 <L_override>
    3d92:	91 11       	cpse	r25, r1
    3d94:	03 c0       	rjmp	.+6      	; 0x3d9c <main+0x446>
    3d96:	88 23       	and	r24, r24
    3d98:	09 f4       	brne	.+2      	; 0x3d9c <main+0x446>
    3d9a:	56 c1       	rjmp	.+684    	; 0x4048 <__RODATA_PM_OFFSET__+0x48>
    3d9c:	f0 92 05 28 	sts	0x2805, r15	; 0x802805 <level_detect>
TempRead_Boilor():
    3da0:	80 91 a3 28 	lds	r24, 0x28A3	; 0x8028a3 <Tempclass::TempRead_Boilor()::sample>
    3da4:	90 91 a4 28 	lds	r25, 0x28A4	; 0x8028a4 <Tempclass::TempRead_Boilor()::sample+0x1>
    3da8:	01 96       	adiw	r24, 0x01	; 1
    3daa:	80 93 a3 28 	sts	0x28A3, r24	; 0x8028a3 <Tempclass::TempRead_Boilor()::sample>
    3dae:	90 93 a4 28 	sts	0x28A4, r25	; 0x8028a4 <Tempclass::TempRead_Boilor()::sample+0x1>
    3db2:	80 90 9f 28 	lds	r8, 0x289F	; 0x80289f <TotalVout>
    3db6:	90 90 a0 28 	lds	r9, 0x28A0	; 0x8028a0 <TotalVout+0x1>
    3dba:	a0 90 a1 28 	lds	r10, 0x28A1	; 0x8028a1 <TotalVout+0x2>
    3dbe:	b0 90 a2 28 	lds	r11, 0x28A2	; 0x8028a2 <TotalVout+0x3>
    3dc2:	84 3f       	cpi	r24, 0xF4	; 244
    3dc4:	91 40       	sbci	r25, 0x01	; 1
    3dc6:	0c f0       	brlt	.+2      	; 0x3dca <main+0x474>
    3dc8:	f5 c1       	rjmp	.+1002   	; 0x41b4 <__RODATA_PM_OFFSET__+0x1b4>
analogRead():
    3dca:	f0 92 06 06 	sts	0x0606, r15	; 0x800606 <__TEXT_REGION_LENGTH__+0x7f4606>
    3dce:	c0 93 08 06 	sts	0x0608, r28	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f4608>
    3dd2:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <__TEXT_REGION_LENGTH__+0x7f460b>
    3dd6:	80 ff       	sbrs	r24, 0
    3dd8:	fc cf       	rjmp	.-8      	; 0x3dd2 <main+0x47c>
    3dda:	60 91 10 06 	lds	r22, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7f4610>
    3dde:	70 91 11 06 	lds	r23, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7f4611>
TempRead_Boilor():
    3de2:	07 2e       	mov	r0, r23
    3de4:	00 0c       	add	r0, r0
    3de6:	88 0b       	sbc	r24, r24
    3de8:	99 0b       	sbc	r25, r25
    3dea:	05 d3       	rcall	.+1546   	; 0x43f6 <__floatsisf>
    3dec:	20 e0       	ldi	r18, 0x00	; 0
    3dee:	30 e0       	ldi	r19, 0x00	; 0
    3df0:	40 ea       	ldi	r20, 0xA0	; 160
    3df2:	50 e4       	ldi	r21, 0x40	; 64
    3df4:	5f d3       	rcall	.+1726   	; 0x44b4 <__mulsf3>
    3df6:	20 e0       	ldi	r18, 0x00	; 0
    3df8:	30 ec       	ldi	r19, 0xC0	; 192
    3dfa:	4f e7       	ldi	r20, 0x7F	; 127
    3dfc:	54 e4       	ldi	r21, 0x44	; 68
    3dfe:	bd d4       	rcall	.+2426   	; 0x477a <__divsf3>
    3e00:	a5 01       	movw	r20, r10
    3e02:	94 01       	movw	r18, r8
    3e04:	56 d4       	rcall	.+2220   	; 0x46b2 <__addsf3>
    3e06:	60 93 9f 28 	sts	0x289F, r22	; 0x80289f <TotalVout>
    3e0a:	70 93 a0 28 	sts	0x28A0, r23	; 0x8028a0 <TotalVout+0x1>
    3e0e:	80 93 a1 28 	sts	0x28A1, r24	; 0x8028a1 <TotalVout+0x2>
    3e12:	90 93 a2 28 	sts	0x28A2, r25	; 0x8028a2 <TotalVout+0x3>
    3e16:	80 90 bc 28 	lds	r8, 0x28BC	; 0x8028bc <calib_Heater1>
    3e1a:	90 90 bd 28 	lds	r9, 0x28BD	; 0x8028bd <calib_Heater1+0x1>
    3e1e:	a0 90 be 28 	lds	r10, 0x28BE	; 0x8028be <calib_Heater1+0x2>
    3e22:	b0 90 bf 28 	lds	r11, 0x28BF	; 0x8028bf <calib_Heater1+0x3>
    3e26:	60 91 0d 28 	lds	r22, 0x280D	; 0x80280d <safe_temp>
    3e2a:	70 e0       	ldi	r23, 0x00	; 0
    3e2c:	90 e0       	ldi	r25, 0x00	; 0
    3e2e:	80 e0       	ldi	r24, 0x00	; 0
    3e30:	e2 d2       	rcall	.+1476   	; 0x43f6 <__floatsisf>
    3e32:	a5 01       	movw	r20, r10
    3e34:	94 01       	movw	r18, r8
    3e36:	d9 d2       	rcall	.+1458   	; 0x43ea <__cmpsf2>
    3e38:	87 ff       	sbrs	r24, 7
    3e3a:	1e c1       	rjmp	.+572    	; 0x4078 <__RODATA_PM_OFFSET__+0x78>
    3e3c:	20 e0       	ldi	r18, 0x00	; 0
    3e3e:	30 e0       	ldi	r19, 0x00	; 0
    3e40:	40 ef       	ldi	r20, 0xF0	; 240
    3e42:	52 e4       	ldi	r21, 0x42	; 66
    3e44:	c5 01       	movw	r24, r10
    3e46:	b4 01       	movw	r22, r8
    3e48:	d0 d2       	rcall	.+1440   	; 0x43ea <__cmpsf2>
    3e4a:	87 ff       	sbrs	r24, 7
    3e4c:	15 c1       	rjmp	.+554    	; 0x4078 <__RODATA_PM_OFFSET__+0x78>
    3e4e:	80 91 c7 28 	lds	r24, 0x28C7	; 0x8028c7 <Process1>
    3e52:	88 23       	and	r24, r24
    3e54:	61 f1       	breq	.+88     	; 0x3eae <main+0x558>
    3e56:	80 91 ca 28 	lds	r24, 0x28CA	; 0x8028ca <sec_Heater>
    3e5a:	8c 33       	cpi	r24, 0x3C	; 60
    3e5c:	40 f1       	brcs	.+80     	; 0x3eae <main+0x558>
    3e5e:	10 92 b7 28 	sts	0x28B7, r1	; 0x8028b7 <warning_generate>
    3e62:	c0 93 c5 28 	sts	0x28C5, r28	; 0x8028c5 <Temp_Err>
    3e66:	10 92 99 28 	sts	0x2899, r1	; 0x802899 <Tempclass::TempRead_Boilor()::templcd_cler>
    3e6a:	10 92 9a 28 	sts	0x289A, r1	; 0x80289a <Tempclass::TempRead_Boilor()::templcd_cler+0x1>
    3e6e:	80 91 98 28 	lds	r24, 0x2898	; 0x802898 <temp_safety_once>
    3e72:	81 11       	cpse	r24, r1
    3e74:	07 c0       	rjmp	.+14     	; 0x3e84 <main+0x52e>
    3e76:	80 91 97 28 	lds	r24, 0x2897	; 0x802897 <Heater_safety>
    3e7a:	8f 5f       	subi	r24, 0xFF	; 255
    3e7c:	80 93 97 28 	sts	0x2897, r24	; 0x802897 <Heater_safety>
    3e80:	c0 93 98 28 	sts	0x2898, r28	; 0x802898 <temp_safety_once>
    3e84:	e0 92 e5 28 	sts	0x28E5, r14	; 0x8028e5 <screen>
    3e88:	80 91 95 28 	lds	r24, 0x2895	; 0x802895 <Heater_safety_timer>
    3e8c:	90 91 96 28 	lds	r25, 0x2896	; 0x802896 <Heater_safety_timer+0x1>
    3e90:	85 3a       	cpi	r24, 0xA5	; 165
    3e92:	91 40       	sbci	r25, 0x01	; 1
    3e94:	64 f4       	brge	.+24     	; 0x3eae <main+0x558>
    3e96:	80 91 97 28 	lds	r24, 0x2897	; 0x802897 <Heater_safety>
    3e9a:	82 30       	cpi	r24, 0x02	; 2
    3e9c:	41 f4       	brne	.+16     	; 0x3eae <main+0x558>
    3e9e:	10 92 95 28 	sts	0x2895, r1	; 0x802895 <Heater_safety_timer>
    3ea2:	10 92 96 28 	sts	0x2896, r1	; 0x802896 <Heater_safety_timer+0x1>
    3ea6:	0e 94 cd 06 	call	0xd9a	; 0xd9a <Buttonclass::Emergency_Procees_Halt() [clone .constprop.26]>
    3eaa:	10 92 97 28 	sts	0x2897, r1	; 0x802897 <Heater_safety>
TempRead_Boilor2():
    3eae:	80 91 ae 28 	lds	r24, 0x28AE	; 0x8028ae <Tempclass::TempRead_Boilor2()::sample>
    3eb2:	90 91 af 28 	lds	r25, 0x28AF	; 0x8028af <Tempclass::TempRead_Boilor2()::sample+0x1>
    3eb6:	01 96       	adiw	r24, 0x01	; 1
    3eb8:	80 93 ae 28 	sts	0x28AE, r24	; 0x8028ae <Tempclass::TempRead_Boilor2()::sample>
    3ebc:	90 93 af 28 	sts	0x28AF, r25	; 0x8028af <Tempclass::TempRead_Boilor2()::sample+0x1>
    3ec0:	80 90 aa 28 	lds	r8, 0x28AA	; 0x8028aa <TotalVout1>
    3ec4:	90 90 ab 28 	lds	r9, 0x28AB	; 0x8028ab <TotalVout1+0x1>
    3ec8:	a0 90 ac 28 	lds	r10, 0x28AC	; 0x8028ac <TotalVout1+0x2>
    3ecc:	b0 90 ad 28 	lds	r11, 0x28AD	; 0x8028ad <TotalVout1+0x3>
    3ed0:	84 3f       	cpi	r24, 0xF4	; 244
    3ed2:	91 40       	sbci	r25, 0x01	; 1
    3ed4:	0c f0       	brlt	.+2      	; 0x3ed8 <main+0x582>
    3ed6:	df c1       	rjmp	.+958    	; 0x4296 <__RODATA_PM_OFFSET__+0x296>
analogRead():
    3ed8:	c0 93 06 06 	sts	0x0606, r28	; 0x800606 <__TEXT_REGION_LENGTH__+0x7f4606>
    3edc:	c0 93 08 06 	sts	0x0608, r28	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f4608>
    3ee0:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <__TEXT_REGION_LENGTH__+0x7f460b>
    3ee4:	80 ff       	sbrs	r24, 0
    3ee6:	fc cf       	rjmp	.-8      	; 0x3ee0 <main+0x58a>
    3ee8:	60 91 10 06 	lds	r22, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7f4610>
    3eec:	70 91 11 06 	lds	r23, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7f4611>
TempRead_Boilor2():
    3ef0:	07 2e       	mov	r0, r23
    3ef2:	00 0c       	add	r0, r0
    3ef4:	88 0b       	sbc	r24, r24
    3ef6:	99 0b       	sbc	r25, r25
    3ef8:	7e d2       	rcall	.+1276   	; 0x43f6 <__floatsisf>
    3efa:	20 e0       	ldi	r18, 0x00	; 0
    3efc:	30 e0       	ldi	r19, 0x00	; 0
    3efe:	40 ea       	ldi	r20, 0xA0	; 160
    3f00:	50 e4       	ldi	r21, 0x40	; 64
    3f02:	d8 d2       	rcall	.+1456   	; 0x44b4 <__mulsf3>
    3f04:	20 e0       	ldi	r18, 0x00	; 0
    3f06:	30 ec       	ldi	r19, 0xC0	; 192
    3f08:	4f e7       	ldi	r20, 0x7F	; 127
    3f0a:	54 e4       	ldi	r21, 0x44	; 68
    3f0c:	36 d4       	rcall	.+2156   	; 0x477a <__divsf3>
    3f0e:	a5 01       	movw	r20, r10
    3f10:	94 01       	movw	r18, r8
    3f12:	cf d3       	rcall	.+1950   	; 0x46b2 <__addsf3>
    3f14:	60 93 aa 28 	sts	0x28AA, r22	; 0x8028aa <TotalVout1>
    3f18:	70 93 ab 28 	sts	0x28AB, r23	; 0x8028ab <TotalVout1+0x1>
    3f1c:	80 93 ac 28 	sts	0x28AC, r24	; 0x8028ac <TotalVout1+0x2>
    3f20:	90 93 ad 28 	sts	0x28AD, r25	; 0x8028ad <TotalVout1+0x3>
Input_errorcheck():
    3f24:	8d e7       	ldi	r24, 0x7D	; 125
    3f26:	9a e2       	ldi	r25, 0x2A	; 42
    3f28:	0e 94 24 06 	call	0xc48	; 0xc48 <Ticker::update()>
digitalRead():
    3f2c:	86 e0       	ldi	r24, 0x06	; 6
    3f2e:	0e 94 a2 05 	call	0xb44	; 0xb44 <digitalRead.part.3>
    3f32:	d8 2f       	mov	r29, r24
Input_errorcheck():
    3f34:	81 30       	cpi	r24, 0x01	; 1
    3f36:	09 f0       	breq	.+2      	; 0x3f3a <main+0x5e4>
    3f38:	d9 c0       	rjmp	.+434    	; 0x40ec <__RODATA_PM_OFFSET__+0xec>
    3f3a:	80 91 b6 28 	lds	r24, 0x28B6	; 0x8028b6 <F_override>
    3f3e:	81 11       	cpse	r24, r1
    3f40:	d5 c0       	rjmp	.+426    	; 0x40ec <__RODATA_PM_OFFSET__+0xec>
    3f42:	80 91 c7 28 	lds	r24, 0x28C7	; 0x8028c7 <Process1>
    3f46:	88 23       	and	r24, r24
    3f48:	09 f4       	brne	.+2      	; 0x3f4c <main+0x5f6>
    3f4a:	d0 c0       	rjmp	.+416    	; 0x40ec <__RODATA_PM_OFFSET__+0xec>
    3f4c:	80 91 b5 28 	lds	r24, 0x28B5	; 0x8028b5 <flow_sens_timerstart>
    3f50:	81 11       	cpse	r24, r1
    3f52:	06 c0       	rjmp	.+12     	; 0x3f60 <main+0x60a>
    3f54:	8d e7       	ldi	r24, 0x7D	; 125
    3f56:	9a e2       	ldi	r25, 0x2A	; 42
    3f58:	0e 94 82 06 	call	0xd04	; 0xd04 <Ticker::start()>
    3f5c:	d0 93 b5 28 	sts	0x28B5, r29	; 0x8028b5 <flow_sens_timerstart>
    3f60:	80 91 b3 28 	lds	r24, 0x28B3	; 0x8028b3 <Flow_Err_INC>
    3f64:	90 91 b4 28 	lds	r25, 0x28B4	; 0x8028b4 <Flow_Err_INC+0x1>
    3f68:	9c 01       	movw	r18, r24
    3f6a:	2e 51       	subi	r18, 0x1E	; 30
    3f6c:	31 09       	sbc	r19, r1
    3f6e:	22 3d       	cpi	r18, 0xD2	; 210
    3f70:	31 05       	cpc	r19, r1
    3f72:	08 f0       	brcs	.+2      	; 0x3f76 <main+0x620>
    3f74:	f5 c0       	rjmp	.+490    	; 0x4160 <__RODATA_PM_OFFSET__+0x160>
    3f76:	c0 93 c6 28 	sts	0x28C6, r28	; 0x8028c6 <Flow_Err>
    3f7a:	e0 92 e5 28 	sts	0x28E5, r14	; 0x8028e5 <screen>
    3f7e:	10 92 ca 28 	sts	0x28CA, r1	; 0x8028ca <sec_Heater>
    3f82:	10 92 b1 28 	sts	0x28B1, r1	; 0x8028b1 <flowlcd_cler>
    3f86:	10 92 b2 28 	sts	0x28B2, r1	; 0x8028b2 <flowlcd_cler+0x1>
primary_check():
    3f8a:	80 91 c6 28 	lds	r24, 0x28C6	; 0x8028c6 <Flow_Err>
    3f8e:	81 11       	cpse	r24, r1
    3f90:	08 c0       	rjmp	.+16     	; 0x3fa2 <main+0x64c>
    3f92:	80 91 c5 28 	lds	r24, 0x28C5	; 0x8028c5 <Temp_Err>
    3f96:	88 23       	and	r24, r24
    3f98:	41 f0       	breq	.+16     	; 0x3faa <main+0x654>
    3f9a:	80 91 c7 28 	lds	r24, 0x28C7	; 0x8028c7 <Process1>
    3f9e:	88 23       	and	r24, r24
    3fa0:	21 f0       	breq	.+8      	; 0x3faa <main+0x654>
    3fa2:	10 92 ca 28 	sts	0x28CA, r1	; 0x8028ca <sec_Heater>
    3fa6:	0e 94 bc 06 	call	0xd78	; 0xd78 <Processclass::process_stop() [clone .constprop.53]>
    3faa:	20 e0       	ldi	r18, 0x00	; 0
    3fac:	30 e0       	ldi	r19, 0x00	; 0
    3fae:	40 ea       	ldi	r20, 0xA0	; 160
    3fb0:	52 e4       	ldi	r21, 0x42	; 66
    3fb2:	60 91 bc 28 	lds	r22, 0x28BC	; 0x8028bc <calib_Heater1>
    3fb6:	70 91 bd 28 	lds	r23, 0x28BD	; 0x8028bd <calib_Heater1+0x1>
    3fba:	80 91 be 28 	lds	r24, 0x28BE	; 0x8028be <calib_Heater1+0x2>
    3fbe:	90 91 bf 28 	lds	r25, 0x28BF	; 0x8028bf <calib_Heater1+0x3>
    3fc2:	74 d4       	rcall	.+2280   	; 0x48ac <__gesf2>
    3fc4:	18 16       	cp	r1, r24
    3fc6:	7c f0       	brlt	.+30     	; 0x3fe6 <main+0x690>
    3fc8:	20 e0       	ldi	r18, 0x00	; 0
    3fca:	30 e0       	ldi	r19, 0x00	; 0
    3fcc:	40 ea       	ldi	r20, 0xA0	; 160
    3fce:	52 e4       	ldi	r21, 0x42	; 66
    3fd0:	60 91 b8 28 	lds	r22, 0x28B8	; 0x8028b8 <calib_Heater2>
    3fd4:	70 91 b9 28 	lds	r23, 0x28B9	; 0x8028b9 <calib_Heater2+0x1>
    3fd8:	80 91 ba 28 	lds	r24, 0x28BA	; 0x8028ba <calib_Heater2+0x2>
    3fdc:	90 91 bb 28 	lds	r25, 0x28BB	; 0x8028bb <calib_Heater2+0x3>
    3fe0:	65 d4       	rcall	.+2250   	; 0x48ac <__gesf2>
    3fe2:	18 16       	cp	r1, r24
    3fe4:	84 f4       	brge	.+32     	; 0x4006 <__RODATA_PM_OFFSET__+0x6>
digitalWrite():
    3fe6:	60 e0       	ldi	r22, 0x00	; 0
    3fe8:	83 e1       	ldi	r24, 0x13	; 19
    3fea:	0e 94 c6 04 	call	0x98c	; 0x98c <digitalWrite.part.2>
primary_check():
    3fee:	10 92 ca 28 	sts	0x28CA, r1	; 0x8028ca <sec_Heater>
    3ff2:	10 92 c5 28 	sts	0x28C5, r1	; 0x8028c5 <Temp_Err>
    3ff6:	10 92 c6 28 	sts	0x28C6, r1	; 0x8028c6 <Flow_Err>
    3ffa:	0e 94 bc 06 	call	0xd78	; 0xd78 <Processclass::process_stop() [clone .constprop.53]>
    3ffe:	e0 92 e5 28 	sts	0x28E5, r14	; 0x8028e5 <screen>
    4002:	c0 93 b7 28 	sts	0x28B7, r28	; 0x8028b7 <warning_generate>
main():
    4006:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <serialEventRun()>
    400a:	15 ce       	rjmp	.-982    	; 0x3c36 <main+0x2e0>
Resume_t():
    400c:	81 11       	cpse	r24, r1
    400e:	bc ce       	rjmp	.-648    	; 0x3d88 <main+0x432>
    4010:	dd 20       	and	r13, r13
    4012:	09 f4       	brne	.+2      	; 0x4016 <__RODATA_PM_OFFSET__+0x16>
    4014:	b9 ce       	rjmp	.-654    	; 0x3d88 <main+0x432>
    4016:	de 32       	cpi	r29, 0x2E	; 46
    4018:	80 f0       	brcs	.+32     	; 0x403a <__RODATA_PM_OFFSET__+0x3a>
digitalWrite():
    401a:	61 e0       	ldi	r22, 0x01	; 1
    401c:	82 e1       	ldi	r24, 0x12	; 18
    401e:	0e 94 c6 04 	call	0x98c	; 0x98c <digitalWrite.part.2>
Resume_t():
    4022:	d3 33       	cpi	r29, 0x33	; 51
    4024:	50 f0       	brcs	.+20     	; 0x403a <__RODATA_PM_OFFSET__+0x3a>
digitalWrite():
    4026:	61 e0       	ldi	r22, 0x01	; 1
    4028:	86 e1       	ldi	r24, 0x16	; 22
    402a:	0e 94 c6 04 	call	0x98c	; 0x98c <digitalWrite.part.2>
Resume_t():
    402e:	d8 33       	cpi	r29, 0x38	; 56
    4030:	20 f0       	brcs	.+8      	; 0x403a <__RODATA_PM_OFFSET__+0x3a>
digitalWrite():
    4032:	61 e0       	ldi	r22, 0x01	; 1
    4034:	85 e1       	ldi	r24, 0x15	; 21
    4036:	0e 94 c6 04 	call	0x98c	; 0x98c <digitalWrite.part.2>
    403a:	61 e0       	ldi	r22, 0x01	; 1
    403c:	88 e1       	ldi	r24, 0x18	; 24
    403e:	0e 94 c6 04 	call	0x98c	; 0x98c <digitalWrite.part.2>
Resume_t():
    4042:	10 92 c9 28 	sts	0x28C9, r1	; 0x8028c9 <Level_var>
    4046:	a0 ce       	rjmp	.-704    	; 0x3d88 <main+0x432>
Level_sense():
    4048:	80 91 c4 28 	lds	r24, 0x28C4	; 0x8028c4 <sfil>
    404c:	81 11       	cpse	r24, r1
    404e:	a8 ce       	rjmp	.-688    	; 0x3da0 <main+0x44a>
    4050:	80 91 93 28 	lds	r24, 0x2893	; 0x802893 <level_Inc>
    4054:	8f 5f       	subi	r24, 0xFF	; 255
    4056:	87 39       	cpi	r24, 0x97	; 151
    4058:	60 f4       	brcc	.+24     	; 0x4072 <__RODATA_PM_OFFSET__+0x72>
    405a:	80 93 93 28 	sts	0x2893, r24	; 0x802893 <level_Inc>
    405e:	80 91 93 28 	lds	r24, 0x2893	; 0x802893 <level_Inc>
    4062:	85 36       	cpi	r24, 0x65	; 101
    4064:	08 f4       	brcc	.+2      	; 0x4068 <__RODATA_PM_OFFSET__+0x68>
    4066:	9c ce       	rjmp	.-712    	; 0x3da0 <main+0x44a>
    4068:	c0 93 05 28 	sts	0x2805, r28	; 0x802805 <level_detect>
    406c:	10 92 93 28 	sts	0x2893, r1	; 0x802893 <level_Inc>
    4070:	97 ce       	rjmp	.-722    	; 0x3da0 <main+0x44a>
    4072:	10 92 93 28 	sts	0x2893, r1	; 0x802893 <level_Inc>
    4076:	f3 cf       	rjmp	.-26     	; 0x405e <__RODATA_PM_OFFSET__+0x5e>
TempRead_Boilor():
    4078:	10 92 c5 28 	sts	0x28C5, r1	; 0x8028c5 <Temp_Err>
    407c:	80 91 97 28 	lds	r24, 0x2897	; 0x802897 <Heater_safety>
    4080:	82 30       	cpi	r24, 0x02	; 2
    4082:	68 f4       	brcc	.+26     	; 0x409e <__RODATA_PM_OFFSET__+0x9e>
    4084:	80 91 95 28 	lds	r24, 0x2895	; 0x802895 <Heater_safety_timer>
    4088:	90 91 96 28 	lds	r25, 0x2896	; 0x802896 <Heater_safety_timer+0x1>
    408c:	8d 31       	cpi	r24, 0x1D	; 29
    408e:	92 40       	sbci	r25, 0x02	; 2
    4090:	34 f0       	brlt	.+12     	; 0x409e <__RODATA_PM_OFFSET__+0x9e>
    4092:	10 92 97 28 	sts	0x2897, r1	; 0x802897 <Heater_safety>
    4096:	10 92 95 28 	sts	0x2895, r1	; 0x802895 <Heater_safety_timer>
    409a:	10 92 96 28 	sts	0x2896, r1	; 0x802896 <Heater_safety_timer+0x1>
    409e:	80 91 99 28 	lds	r24, 0x2899	; 0x802899 <Tempclass::TempRead_Boilor()::templcd_cler>
    40a2:	90 91 9a 28 	lds	r25, 0x289A	; 0x80289a <Tempclass::TempRead_Boilor()::templcd_cler+0x1>
    40a6:	89 2b       	or	r24, r25
    40a8:	09 f0       	breq	.+2      	; 0x40ac <__RODATA_PM_OFFSET__+0xac>
    40aa:	01 cf       	rjmp	.-510    	; 0x3eae <main+0x558>
    40ac:	10 92 e5 28 	sts	0x28E5, r1	; 0x8028e5 <screen>
    40b0:	00 93 99 28 	sts	0x2899, r16	; 0x802899 <Tempclass::TempRead_Boilor()::templcd_cler>
    40b4:	10 93 9a 28 	sts	0x289A, r17	; 0x80289a <Tempclass::TempRead_Boilor()::templcd_cler+0x1>
    40b8:	10 92 98 28 	sts	0x2898, r1	; 0x802898 <temp_safety_once>
digitalWrite():
    40bc:	60 e0       	ldi	r22, 0x00	; 0
    40be:	87 e1       	ldi	r24, 0x17	; 23
    40c0:	0e 94 c6 04 	call	0x98c	; 0x98c <digitalWrite.part.2>
    40c4:	f4 ce       	rjmp	.-536    	; 0x3eae <main+0x558>
TempRead_Boilor2():
    40c6:	10 92 e5 28 	sts	0x28E5, r1	; 0x8028e5 <screen>
    40ca:	10 92 c8 28 	sts	0x28C8, r1	; 0x8028c8 <vol_set>
    40ce:	10 92 b7 28 	sts	0x28B7, r1	; 0x8028b7 <warning_generate>
    40d2:	c0 93 c4 28 	sts	0x28C4, r28	; 0x8028c4 <sfil>
    40d6:	10 92 da 28 	sts	0x28DA, r1	; 0x8028da <sfil_comp>
    40da:	10 92 c0 28 	sts	0x28C0, r1	; 0x8028c0 <sfil_on>
    40de:	10 92 c1 28 	sts	0x28C1, r1	; 0x8028c1 <sfil_on+0x1>
    40e2:	10 92 c2 28 	sts	0x28C2, r1	; 0x8028c2 <sfil_on+0x2>
    40e6:	10 92 c3 28 	sts	0x28C3, r1	; 0x8028c3 <sfil_on+0x3>
    40ea:	1c cf       	rjmp	.-456    	; 0x3f24 <main+0x5ce>
digitalRead():
    40ec:	86 e0       	ldi	r24, 0x06	; 6
    40ee:	0e 94 a2 05 	call	0xb44	; 0xb44 <digitalRead.part.3>
Input_errorcheck():
    40f2:	81 11       	cpse	r24, r1
    40f4:	3c c0       	rjmp	.+120    	; 0x416e <__RODATA_PM_OFFSET__+0x16e>
    40f6:	10 92 b3 28 	sts	0x28B3, r1	; 0x8028b3 <Flow_Err_INC>
    40fa:	10 92 b4 28 	sts	0x28B4, r1	; 0x8028b4 <Flow_Err_INC+0x1>
    40fe:	10 92 b5 28 	sts	0x28B5, r1	; 0x8028b5 <flow_sens_timerstart>
stop():
    4102:	10 92 7d 2a 	sts	0x2A7D, r1	; 0x802a7d <Flow_delay>
    4106:	10 92 88 2a 	sts	0x2A88, r1	; 0x802a88 <Flow_delay+0xb>
    410a:	10 92 89 2a 	sts	0x2A89, r1	; 0x802a89 <Flow_delay+0xc>
    410e:	10 92 8a 2a 	sts	0x2A8A, r1	; 0x802a8a <Flow_delay+0xd>
    4112:	10 92 8b 2a 	sts	0x2A8B, r1	; 0x802a8b <Flow_delay+0xe>
    4116:	10 92 8c 2a 	sts	0x2A8C, r1	; 0x802a8c <Flow_delay+0xf>
    411a:	10 92 8d 2a 	sts	0x2A8D, r1	; 0x802a8d <Flow_delay+0x10>
Input_errorcheck():
    411e:	10 92 c6 28 	sts	0x28C6, r1	; 0x8028c6 <Flow_Err>
    4122:	80 91 b1 28 	lds	r24, 0x28B1	; 0x8028b1 <flowlcd_cler>
    4126:	90 91 b2 28 	lds	r25, 0x28B2	; 0x8028b2 <flowlcd_cler+0x1>
    412a:	89 2b       	or	r24, r25
    412c:	09 f0       	breq	.+2      	; 0x4130 <__RODATA_PM_OFFSET__+0x130>
    412e:	31 cf       	rjmp	.-414    	; 0x3f92 <main+0x63c>
    4130:	10 92 e5 28 	sts	0x28E5, r1	; 0x8028e5 <screen>
    4134:	80 91 b0 28 	lds	r24, 0x28B0	; 0x8028b0 <flowerror_screen_switch>
    4138:	81 11       	cpse	r24, r1
    413a:	c0 93 e5 28 	sts	0x28E5, r28	; 0x8028e5 <screen>
    413e:	00 93 b1 28 	sts	0x28B1, r16	; 0x8028b1 <flowlcd_cler>
    4142:	10 93 b2 28 	sts	0x28B2, r17	; 0x8028b2 <flowlcd_cler+0x1>
digitalWrite():
    4146:	60 e0       	ldi	r22, 0x00	; 0
    4148:	89 e1       	ldi	r24, 0x19	; 25
    414a:	0e 94 c6 04 	call	0x98c	; 0x98c <digitalWrite.part.2>
    414e:	60 e0       	ldi	r22, 0x00	; 0
    4150:	88 e1       	ldi	r24, 0x18	; 24
    4152:	0e 94 c6 04 	call	0x98c	; 0x98c <digitalWrite.part.2>
    4156:	60 e0       	ldi	r22, 0x00	; 0
    4158:	87 e1       	ldi	r24, 0x17	; 23
    415a:	0e 94 c6 04 	call	0x98c	; 0x98c <digitalWrite.part.2>
    415e:	15 cf       	rjmp	.-470    	; 0x3f8a <main+0x634>
Input_errorcheck():
    4160:	81 3f       	cpi	r24, 0xF1	; 241
    4162:	91 05       	cpc	r25, r1
    4164:	0c f4       	brge	.+2      	; 0x4168 <__RODATA_PM_OFFSET__+0x168>
    4166:	11 cf       	rjmp	.-478    	; 0x3f8a <main+0x634>
    4168:	0e 94 cd 06 	call	0xd9a	; 0xd9a <Buttonclass::Emergency_Procees_Halt() [clone .constprop.26]>
    416c:	0e cf       	rjmp	.-484    	; 0x3f8a <main+0x634>
    416e:	80 91 b6 28 	lds	r24, 0x28B6	; 0x8028b6 <F_override>
    4172:	81 11       	cpse	r24, r1
    4174:	c0 cf       	rjmp	.-128    	; 0x40f6 <__RODATA_PM_OFFSET__+0xf6>
    4176:	80 91 c7 28 	lds	r24, 0x28C7	; 0x8028c7 <Process1>
    417a:	88 23       	and	r24, r24
    417c:	09 f4       	brne	.+2      	; 0x4180 <__RODATA_PM_OFFSET__+0x180>
    417e:	bb cf       	rjmp	.-138    	; 0x40f6 <__RODATA_PM_OFFSET__+0xf6>
    4180:	04 cf       	rjmp	.-504    	; 0x3f8a <main+0x634>
process_start():
    4182:	10 92 c6 28 	sts	0x28C6, r1	; 0x8028c6 <Flow_Err>
    4186:	10 92 c5 28 	sts	0x28C5, r1	; 0x8028c5 <Temp_Err>
    418a:	10 92 c7 28 	sts	0x28C7, r1	; 0x8028c7 <Process1>
    418e:	10 92 ca 28 	sts	0x28CA, r1	; 0x8028ca <sec_Heater>
digitalWrite():
    4192:	60 e0       	ldi	r22, 0x00	; 0
    4194:	88 e1       	ldi	r24, 0x18	; 24
    4196:	0e 94 c6 04 	call	0x98c	; 0x98c <digitalWrite.part.2>
    419a:	60 e0       	ldi	r22, 0x00	; 0
    419c:	84 e1       	ldi	r24, 0x14	; 20
    419e:	0e 94 c6 04 	call	0x98c	; 0x98c <digitalWrite.part.2>
    41a2:	60 e0       	ldi	r22, 0x00	; 0
    41a4:	83 e1       	ldi	r24, 0x13	; 19
    41a6:	0e 94 c6 04 	call	0x98c	; 0x98c <digitalWrite.part.2>
process_start():
    41aa:	0e 94 bc 06 	call	0xd78	; 0xd78 <Processclass::process_stop() [clone .constprop.53]>
    41ae:	d0 93 c9 28 	sts	0x28C9, r29	; 0x8028c9 <Level_var>
    41b2:	ea cd       	rjmp	.-1068   	; 0x3d88 <main+0x432>
TempRead_Boilor():
    41b4:	20 e0       	ldi	r18, 0x00	; 0
    41b6:	30 e0       	ldi	r19, 0x00	; 0
    41b8:	4a ef       	ldi	r20, 0xFA	; 250
    41ba:	53 e4       	ldi	r21, 0x43	; 67
    41bc:	c5 01       	movw	r24, r10
    41be:	b4 01       	movw	r22, r8
    41c0:	dc d2       	rcall	.+1464   	; 0x477a <__divsf3>
    41c2:	20 e0       	ldi	r18, 0x00	; 0
    41c4:	30 e0       	ldi	r19, 0x00	; 0
    41c6:	40 e2       	ldi	r20, 0x20	; 32
    41c8:	51 e4       	ldi	r21, 0x41	; 65
    41ca:	d7 d2       	rcall	.+1454   	; 0x477a <__divsf3>
    41cc:	4b 01       	movw	r8, r22
    41ce:	5c 01       	movw	r10, r24
    41d0:	20 e8       	ldi	r18, 0x80	; 128
    41d2:	3e e1       	ldi	r19, 0x1E	; 30
    41d4:	4c ea       	ldi	r20, 0xAC	; 172
    41d6:	5b e4       	ldi	r21, 0x4B	; 75
    41d8:	6d d1       	rcall	.+730    	; 0x44b4 <__mulsf3>
    41da:	20 e0       	ldi	r18, 0x00	; 0
    41dc:	30 e0       	ldi	r19, 0x00	; 0
    41de:	40 ea       	ldi	r20, 0xA0	; 160
    41e0:	50 e4       	ldi	r21, 0x40	; 64
    41e2:	cb d2       	rcall	.+1430   	; 0x477a <__divsf3>
    41e4:	20 e0       	ldi	r18, 0x00	; 0
    41e6:	3e e7       	ldi	r19, 0x7E	; 126
    41e8:	45 ee       	ldi	r20, 0xE5	; 229
    41ea:	58 e4       	ldi	r21, 0x48	; 72
    41ec:	62 d2       	rcall	.+1220   	; 0x46b2 <__addsf3>
    41ee:	2b 01       	movw	r4, r22
    41f0:	3c 01       	movw	r6, r24
    41f2:	20 e0       	ldi	r18, 0x00	; 0
    41f4:	30 e0       	ldi	r19, 0x00	; 0
    41f6:	46 e9       	ldi	r20, 0x96	; 150
    41f8:	55 e4       	ldi	r21, 0x45	; 69
    41fa:	c5 01       	movw	r24, r10
    41fc:	b4 01       	movw	r22, r8
    41fe:	5a d1       	rcall	.+692    	; 0x44b4 <__mulsf3>
    4200:	20 e0       	ldi	r18, 0x00	; 0
    4202:	30 e0       	ldi	r19, 0x00	; 0
    4204:	40 ea       	ldi	r20, 0xA0	; 160
    4206:	50 e4       	ldi	r21, 0x40	; 64
    4208:	b8 d2       	rcall	.+1392   	; 0x477a <__divsf3>
    420a:	9b 01       	movw	r18, r22
    420c:	ac 01       	movw	r20, r24
    420e:	60 e0       	ldi	r22, 0x00	; 0
    4210:	70 ee       	ldi	r23, 0xE0	; 224
    4212:	82 e9       	ldi	r24, 0x92	; 146
    4214:	95 e4       	ldi	r25, 0x45	; 69
    4216:	4c d2       	rcall	.+1176   	; 0x46b0 <__subsf3>
    4218:	9b 01       	movw	r18, r22
    421a:	ac 01       	movw	r20, r24
    421c:	c3 01       	movw	r24, r6
    421e:	b2 01       	movw	r22, r4
    4220:	ac d2       	rcall	.+1368   	; 0x477a <__divsf3>
    4222:	20 e0       	ldi	r18, 0x00	; 0
    4224:	30 e0       	ldi	r19, 0x00	; 0
    4226:	48 ec       	ldi	r20, 0xC8	; 200
    4228:	52 e4       	ldi	r21, 0x42	; 66
    422a:	a7 d2       	rcall	.+1358   	; 0x477a <__divsf3>
    422c:	20 e0       	ldi	r18, 0x00	; 0
    422e:	30 e0       	ldi	r19, 0x00	; 0
    4230:	40 e8       	ldi	r20, 0x80	; 128
    4232:	5f e3       	ldi	r21, 0x3F	; 63
    4234:	3d d2       	rcall	.+1146   	; 0x46b0 <__subsf3>
    4236:	28 e4       	ldi	r18, 0x48	; 72
    4238:	30 e5       	ldi	r19, 0x50	; 80
    423a:	4c e7       	ldi	r20, 0x7C	; 124
    423c:	5b e3       	ldi	r21, 0x3B	; 59
    423e:	9d d2       	rcall	.+1338   	; 0x477a <__divsf3>
    4240:	4b 01       	movw	r8, r22
    4242:	5c 01       	movw	r10, r24
    4244:	80 92 9b 28 	sts	0x289B, r8	; 0x80289b <Heater_temp>
    4248:	90 92 9c 28 	sts	0x289C, r9	; 0x80289c <Heater_temp+0x1>
    424c:	a0 92 9d 28 	sts	0x289D, r10	; 0x80289d <Heater_temp+0x2>
    4250:	b0 92 9e 28 	sts	0x289E, r11	; 0x80289e <Heater_temp+0x3>
    4254:	60 91 e1 28 	lds	r22, 0x28E1	; 0x8028e1 <Probe1_actual>
    4258:	70 91 e2 28 	lds	r23, 0x28E2	; 0x8028e2 <Probe1_actual+0x1>
    425c:	07 2e       	mov	r0, r23
    425e:	00 0c       	add	r0, r0
    4260:	88 0b       	sbc	r24, r24
    4262:	99 0b       	sbc	r25, r25
    4264:	c8 d0       	rcall	.+400    	; 0x43f6 <__floatsisf>
    4266:	a5 01       	movw	r20, r10
    4268:	94 01       	movw	r18, r8
    426a:	23 d2       	rcall	.+1094   	; 0x46b2 <__addsf3>
    426c:	60 93 bc 28 	sts	0x28BC, r22	; 0x8028bc <calib_Heater1>
    4270:	70 93 bd 28 	sts	0x28BD, r23	; 0x8028bd <calib_Heater1+0x1>
    4274:	80 93 be 28 	sts	0x28BE, r24	; 0x8028be <calib_Heater1+0x2>
    4278:	90 93 bf 28 	sts	0x28BF, r25	; 0x8028bf <calib_Heater1+0x3>
    427c:	10 92 a3 28 	sts	0x28A3, r1	; 0x8028a3 <Tempclass::TempRead_Boilor()::sample>
    4280:	10 92 a4 28 	sts	0x28A4, r1	; 0x8028a4 <Tempclass::TempRead_Boilor()::sample+0x1>
    4284:	10 92 9f 28 	sts	0x289F, r1	; 0x80289f <TotalVout>
    4288:	10 92 a0 28 	sts	0x28A0, r1	; 0x8028a0 <TotalVout+0x1>
    428c:	10 92 a1 28 	sts	0x28A1, r1	; 0x8028a1 <TotalVout+0x2>
    4290:	10 92 a2 28 	sts	0x28A2, r1	; 0x8028a2 <TotalVout+0x3>
    4294:	c0 cd       	rjmp	.-1152   	; 0x3e16 <main+0x4c0>
TempRead_Boilor2():
    4296:	20 e0       	ldi	r18, 0x00	; 0
    4298:	30 e0       	ldi	r19, 0x00	; 0
    429a:	4a ef       	ldi	r20, 0xFA	; 250
    429c:	53 e4       	ldi	r21, 0x43	; 67
    429e:	c5 01       	movw	r24, r10
    42a0:	b4 01       	movw	r22, r8
    42a2:	6b d2       	rcall	.+1238   	; 0x477a <__divsf3>
    42a4:	20 e0       	ldi	r18, 0x00	; 0
    42a6:	30 e0       	ldi	r19, 0x00	; 0
    42a8:	40 e2       	ldi	r20, 0x20	; 32
    42aa:	51 e4       	ldi	r21, 0x41	; 65
    42ac:	66 d2       	rcall	.+1228   	; 0x477a <__divsf3>
    42ae:	4b 01       	movw	r8, r22
    42b0:	5c 01       	movw	r10, r24
    42b2:	20 e8       	ldi	r18, 0x80	; 128
    42b4:	3e e1       	ldi	r19, 0x1E	; 30
    42b6:	4c ea       	ldi	r20, 0xAC	; 172
    42b8:	5b e4       	ldi	r21, 0x4B	; 75
    42ba:	fc d0       	rcall	.+504    	; 0x44b4 <__mulsf3>
    42bc:	20 e0       	ldi	r18, 0x00	; 0
    42be:	30 e0       	ldi	r19, 0x00	; 0
    42c0:	40 ea       	ldi	r20, 0xA0	; 160
    42c2:	50 e4       	ldi	r21, 0x40	; 64
    42c4:	5a d2       	rcall	.+1204   	; 0x477a <__divsf3>
    42c6:	20 e0       	ldi	r18, 0x00	; 0
    42c8:	3e e7       	ldi	r19, 0x7E	; 126
    42ca:	45 ee       	ldi	r20, 0xE5	; 229
    42cc:	58 e4       	ldi	r21, 0x48	; 72
    42ce:	f1 d1       	rcall	.+994    	; 0x46b2 <__addsf3>
    42d0:	2b 01       	movw	r4, r22
    42d2:	3c 01       	movw	r6, r24
    42d4:	20 e0       	ldi	r18, 0x00	; 0
    42d6:	30 e0       	ldi	r19, 0x00	; 0
    42d8:	46 e9       	ldi	r20, 0x96	; 150
    42da:	55 e4       	ldi	r21, 0x45	; 69
    42dc:	c5 01       	movw	r24, r10
    42de:	b4 01       	movw	r22, r8
    42e0:	e9 d0       	rcall	.+466    	; 0x44b4 <__mulsf3>
    42e2:	20 e0       	ldi	r18, 0x00	; 0
    42e4:	30 e0       	ldi	r19, 0x00	; 0
    42e6:	40 ea       	ldi	r20, 0xA0	; 160
    42e8:	50 e4       	ldi	r21, 0x40	; 64
    42ea:	47 d2       	rcall	.+1166   	; 0x477a <__divsf3>
    42ec:	9b 01       	movw	r18, r22
    42ee:	ac 01       	movw	r20, r24
    42f0:	60 e0       	ldi	r22, 0x00	; 0
    42f2:	70 ee       	ldi	r23, 0xE0	; 224
    42f4:	82 e9       	ldi	r24, 0x92	; 146
    42f6:	95 e4       	ldi	r25, 0x45	; 69
    42f8:	db d1       	rcall	.+950    	; 0x46b0 <__subsf3>
    42fa:	9b 01       	movw	r18, r22
    42fc:	ac 01       	movw	r20, r24
    42fe:	c3 01       	movw	r24, r6
    4300:	b2 01       	movw	r22, r4
    4302:	3b d2       	rcall	.+1142   	; 0x477a <__divsf3>
    4304:	20 e0       	ldi	r18, 0x00	; 0
    4306:	30 e0       	ldi	r19, 0x00	; 0
    4308:	48 ec       	ldi	r20, 0xC8	; 200
    430a:	52 e4       	ldi	r21, 0x42	; 66
    430c:	36 d2       	rcall	.+1132   	; 0x477a <__divsf3>
    430e:	20 e0       	ldi	r18, 0x00	; 0
    4310:	30 e0       	ldi	r19, 0x00	; 0
    4312:	40 e8       	ldi	r20, 0x80	; 128
    4314:	5f e3       	ldi	r21, 0x3F	; 63
    4316:	cc d1       	rcall	.+920    	; 0x46b0 <__subsf3>
    4318:	28 e4       	ldi	r18, 0x48	; 72
    431a:	30 e5       	ldi	r19, 0x50	; 80
    431c:	4c e7       	ldi	r20, 0x7C	; 124
    431e:	5b e3       	ldi	r21, 0x3B	; 59
    4320:	2c d2       	rcall	.+1112   	; 0x477a <__divsf3>
    4322:	4b 01       	movw	r8, r22
    4324:	5c 01       	movw	r10, r24
    4326:	80 92 a6 28 	sts	0x28A6, r8	; 0x8028a6 <Heater_temp2>
    432a:	90 92 a7 28 	sts	0x28A7, r9	; 0x8028a7 <Heater_temp2+0x1>
    432e:	a0 92 a8 28 	sts	0x28A8, r10	; 0x8028a8 <Heater_temp2+0x2>
    4332:	b0 92 a9 28 	sts	0x28A9, r11	; 0x8028a9 <Heater_temp2+0x3>
    4336:	60 91 dd 28 	lds	r22, 0x28DD	; 0x8028dd <Probe2_actual>
    433a:	70 91 de 28 	lds	r23, 0x28DE	; 0x8028de <Probe2_actual+0x1>
    433e:	07 2e       	mov	r0, r23
    4340:	00 0c       	add	r0, r0
    4342:	88 0b       	sbc	r24, r24
    4344:	99 0b       	sbc	r25, r25
    4346:	57 d0       	rcall	.+174    	; 0x43f6 <__floatsisf>
    4348:	a5 01       	movw	r20, r10
    434a:	94 01       	movw	r18, r8
    434c:	b2 d1       	rcall	.+868    	; 0x46b2 <__addsf3>
    434e:	4b 01       	movw	r8, r22
    4350:	5c 01       	movw	r10, r24
    4352:	80 92 b8 28 	sts	0x28B8, r8	; 0x8028b8 <calib_Heater2>
    4356:	90 92 b9 28 	sts	0x28B9, r9	; 0x8028b9 <calib_Heater2+0x1>
    435a:	a0 92 ba 28 	sts	0x28BA, r10	; 0x8028ba <calib_Heater2+0x2>
    435e:	b0 92 bb 28 	sts	0x28BB, r11	; 0x8028bb <calib_Heater2+0x3>
    4362:	10 92 ae 28 	sts	0x28AE, r1	; 0x8028ae <Tempclass::TempRead_Boilor2()::sample>
    4366:	10 92 af 28 	sts	0x28AF, r1	; 0x8028af <Tempclass::TempRead_Boilor2()::sample+0x1>
    436a:	10 92 aa 28 	sts	0x28AA, r1	; 0x8028aa <TotalVout1>
    436e:	10 92 ab 28 	sts	0x28AB, r1	; 0x8028ab <TotalVout1+0x1>
    4372:	10 92 ac 28 	sts	0x28AC, r1	; 0x8028ac <TotalVout1+0x2>
    4376:	10 92 ad 28 	sts	0x28AD, r1	; 0x8028ad <TotalVout1+0x3>
    437a:	60 91 0d 28 	lds	r22, 0x280D	; 0x80280d <safe_temp>
    437e:	70 e0       	ldi	r23, 0x00	; 0
    4380:	90 e0       	ldi	r25, 0x00	; 0
    4382:	80 e0       	ldi	r24, 0x00	; 0
    4384:	38 d0       	rcall	.+112    	; 0x43f6 <__floatsisf>
    4386:	9b 01       	movw	r18, r22
    4388:	ac 01       	movw	r20, r24
    438a:	c5 01       	movw	r24, r10
    438c:	b4 01       	movw	r22, r8
    438e:	8e d2       	rcall	.+1308   	; 0x48ac <__gesf2>
    4390:	18 16       	cp	r1, r24
    4392:	0c f4       	brge	.+2      	; 0x4396 <__RODATA_PM_OFFSET__+0x396>
    4394:	98 ce       	rjmp	.-720    	; 0x40c6 <__RODATA_PM_OFFSET__+0xc6>
    4396:	10 92 a5 28 	sts	0x28A5, r1	; 0x8028a5 <thermopile>
    439a:	c4 cd       	rjmp	.-1144   	; 0x3f24 <main+0x5ce>

0000439c <global destructors keyed to 65535_1_Dispensing.cpp.o.4482>:
_GLOBAL__D_65535_1_Dispensing.cpp.o.4482():
    439c:	cf 93       	push	r28
    439e:	df 93       	push	r29
    43a0:	c9 e1       	ldi	r28, 0x19	; 25
    43a2:	db e2       	ldi	r29, 0x2B	; 43
    43a4:	26 97       	sbiw	r28, 0x06	; 6
    43a6:	88 81       	ld	r24, Y
    43a8:	99 81       	ldd	r25, Y+1	; 0x01
    43aa:	74 d3       	rcall	.+1768   	; 0x4a94 <free>
    43ac:	8a e2       	ldi	r24, 0x2A	; 42
    43ae:	c9 3e       	cpi	r28, 0xE9	; 233
    43b0:	d8 07       	cpc	r29, r24
    43b2:	c1 f7       	brne	.-16     	; 0x43a4 <global destructors keyed to 65535_1_Dispensing.cpp.o.4482+0x8>
    43b4:	80 91 1f 2b 	lds	r24, 0x2B1F	; 0x802b1f <boilor2_status+0x6>
    43b8:	90 91 20 2b 	lds	r25, 0x2B20	; 0x802b20 <boilor2_status+0x7>
    43bc:	6b d3       	rcall	.+1750   	; 0x4a94 <free>
    43be:	80 91 19 2b 	lds	r24, 0x2B19	; 0x802b19 <boilor2_status>
    43c2:	90 91 1a 2b 	lds	r25, 0x2B1A	; 0x802b1a <boilor2_status+0x1>
    43c6:	66 d3       	rcall	.+1740   	; 0x4a94 <free>
    43c8:	80 91 31 2b 	lds	r24, 0x2B31	; 0x802b31 <Level_status+0xc>
    43cc:	90 91 32 2b 	lds	r25, 0x2B32	; 0x802b32 <Level_status+0xd>
    43d0:	61 d3       	rcall	.+1730   	; 0x4a94 <free>
    43d2:	80 91 2b 2b 	lds	r24, 0x2B2B	; 0x802b2b <Level_status+0x6>
    43d6:	90 91 2c 2b 	lds	r25, 0x2B2C	; 0x802b2c <Level_status+0x7>
    43da:	5c d3       	rcall	.+1720   	; 0x4a94 <free>
    43dc:	80 91 25 2b 	lds	r24, 0x2B25	; 0x802b25 <Level_status>
    43e0:	90 91 26 2b 	lds	r25, 0x2B26	; 0x802b26 <Level_status+0x1>
    43e4:	df 91       	pop	r29
    43e6:	cf 91       	pop	r28
    43e8:	55 c3       	rjmp	.+1706   	; 0x4a94 <free>

000043ea <__cmpsf2>:
__cmpsf2():
    43ea:	40 d0       	rcall	.+128    	; 0x446c <__fp_cmp>
    43ec:	08 f4       	brcc	.+2      	; 0x43f0 <__cmpsf2+0x6>
    43ee:	81 e0       	ldi	r24, 0x01	; 1
    43f0:	08 95       	ret

000043f2 <__floatunsisf>:
__floatunsisf():
    43f2:	e8 94       	clt
    43f4:	09 c0       	rjmp	.+18     	; 0x4408 <__floatsisf+0x12>

000043f6 <__floatsisf>:
    43f6:	97 fb       	bst	r25, 7
    43f8:	3e f4       	brtc	.+14     	; 0x4408 <__floatsisf+0x12>
    43fa:	90 95       	com	r25
    43fc:	80 95       	com	r24
    43fe:	70 95       	com	r23
    4400:	61 95       	neg	r22
    4402:	7f 4f       	sbci	r23, 0xFF	; 255
    4404:	8f 4f       	sbci	r24, 0xFF	; 255
    4406:	9f 4f       	sbci	r25, 0xFF	; 255
    4408:	99 23       	and	r25, r25
    440a:	a9 f0       	breq	.+42     	; 0x4436 <__floatsisf+0x40>
    440c:	f9 2f       	mov	r31, r25
    440e:	96 e9       	ldi	r25, 0x96	; 150
    4410:	bb 27       	eor	r27, r27
    4412:	93 95       	inc	r25
    4414:	f6 95       	lsr	r31
    4416:	87 95       	ror	r24
    4418:	77 95       	ror	r23
    441a:	67 95       	ror	r22
    441c:	b7 95       	ror	r27
    441e:	f1 11       	cpse	r31, r1
    4420:	f8 cf       	rjmp	.-16     	; 0x4412 <__floatsisf+0x1c>
    4422:	fa f4       	brpl	.+62     	; 0x4462 <__floatsisf+0x6c>
    4424:	bb 0f       	add	r27, r27
    4426:	11 f4       	brne	.+4      	; 0x442c <__floatsisf+0x36>
    4428:	60 ff       	sbrs	r22, 0
    442a:	1b c0       	rjmp	.+54     	; 0x4462 <__floatsisf+0x6c>
    442c:	6f 5f       	subi	r22, 0xFF	; 255
    442e:	7f 4f       	sbci	r23, 0xFF	; 255
    4430:	8f 4f       	sbci	r24, 0xFF	; 255
    4432:	9f 4f       	sbci	r25, 0xFF	; 255
    4434:	16 c0       	rjmp	.+44     	; 0x4462 <__floatsisf+0x6c>
    4436:	88 23       	and	r24, r24
    4438:	11 f0       	breq	.+4      	; 0x443e <__floatsisf+0x48>
    443a:	96 e9       	ldi	r25, 0x96	; 150
    443c:	11 c0       	rjmp	.+34     	; 0x4460 <__floatsisf+0x6a>
    443e:	77 23       	and	r23, r23
    4440:	21 f0       	breq	.+8      	; 0x444a <__floatsisf+0x54>
    4442:	9e e8       	ldi	r25, 0x8E	; 142
    4444:	87 2f       	mov	r24, r23
    4446:	76 2f       	mov	r23, r22
    4448:	05 c0       	rjmp	.+10     	; 0x4454 <__floatsisf+0x5e>
    444a:	66 23       	and	r22, r22
    444c:	71 f0       	breq	.+28     	; 0x446a <__floatsisf+0x74>
    444e:	96 e8       	ldi	r25, 0x86	; 134
    4450:	86 2f       	mov	r24, r22
    4452:	70 e0       	ldi	r23, 0x00	; 0
    4454:	60 e0       	ldi	r22, 0x00	; 0
    4456:	2a f0       	brmi	.+10     	; 0x4462 <__floatsisf+0x6c>
    4458:	9a 95       	dec	r25
    445a:	66 0f       	add	r22, r22
    445c:	77 1f       	adc	r23, r23
    445e:	88 1f       	adc	r24, r24
    4460:	da f7       	brpl	.-10     	; 0x4458 <__floatsisf+0x62>
    4462:	88 0f       	add	r24, r24
    4464:	96 95       	lsr	r25
    4466:	87 95       	ror	r24
    4468:	97 f9       	bld	r25, 7
    446a:	08 95       	ret

0000446c <__fp_cmp>:
__fp_cmp():
    446c:	99 0f       	add	r25, r25
    446e:	00 08       	sbc	r0, r0
    4470:	55 0f       	add	r21, r21
    4472:	aa 0b       	sbc	r26, r26
    4474:	e0 e8       	ldi	r30, 0x80	; 128
    4476:	fe ef       	ldi	r31, 0xFE	; 254
    4478:	16 16       	cp	r1, r22
    447a:	17 06       	cpc	r1, r23
    447c:	e8 07       	cpc	r30, r24
    447e:	f9 07       	cpc	r31, r25
    4480:	c0 f0       	brcs	.+48     	; 0x44b2 <__fp_cmp+0x46>
    4482:	12 16       	cp	r1, r18
    4484:	13 06       	cpc	r1, r19
    4486:	e4 07       	cpc	r30, r20
    4488:	f5 07       	cpc	r31, r21
    448a:	98 f0       	brcs	.+38     	; 0x44b2 <__fp_cmp+0x46>
    448c:	62 1b       	sub	r22, r18
    448e:	73 0b       	sbc	r23, r19
    4490:	84 0b       	sbc	r24, r20
    4492:	95 0b       	sbc	r25, r21
    4494:	39 f4       	brne	.+14     	; 0x44a4 <__fp_cmp+0x38>
    4496:	0a 26       	eor	r0, r26
    4498:	61 f0       	breq	.+24     	; 0x44b2 <__fp_cmp+0x46>
    449a:	23 2b       	or	r18, r19
    449c:	24 2b       	or	r18, r20
    449e:	25 2b       	or	r18, r21
    44a0:	21 f4       	brne	.+8      	; 0x44aa <__fp_cmp+0x3e>
    44a2:	08 95       	ret
    44a4:	0a 26       	eor	r0, r26
    44a6:	09 f4       	brne	.+2      	; 0x44aa <__fp_cmp+0x3e>
    44a8:	a1 40       	sbci	r26, 0x01	; 1
    44aa:	a6 95       	lsr	r26
    44ac:	8f ef       	ldi	r24, 0xFF	; 255
    44ae:	81 1d       	adc	r24, r1
    44b0:	81 1d       	adc	r24, r1
    44b2:	08 95       	ret

000044b4 <__mulsf3>:
__mulsf3():
    44b4:	0b d0       	rcall	.+22     	; 0x44cc <__mulsf3x>
    44b6:	78 c0       	rjmp	.+240    	; 0x45a8 <__fp_round>
    44b8:	69 d0       	rcall	.+210    	; 0x458c <__fp_pscA>
    44ba:	28 f0       	brcs	.+10     	; 0x44c6 <__mulsf3+0x12>
    44bc:	6e d0       	rcall	.+220    	; 0x459a <__fp_pscB>
    44be:	18 f0       	brcs	.+6      	; 0x44c6 <__mulsf3+0x12>
    44c0:	95 23       	and	r25, r21
    44c2:	09 f0       	breq	.+2      	; 0x44c6 <__mulsf3+0x12>
    44c4:	5a c0       	rjmp	.+180    	; 0x457a <__fp_inf>
    44c6:	5f c0       	rjmp	.+190    	; 0x4586 <__fp_nan>
    44c8:	11 24       	eor	r1, r1
    44ca:	a2 c0       	rjmp	.+324    	; 0x4610 <__fp_szero>

000044cc <__mulsf3x>:
__mulsf3x():
    44cc:	7e d0       	rcall	.+252    	; 0x45ca <__fp_split3>
    44ce:	a0 f3       	brcs	.-24     	; 0x44b8 <__mulsf3+0x4>

000044d0 <__mulsf3_pse>:
    44d0:	95 9f       	mul	r25, r21
    44d2:	d1 f3       	breq	.-12     	; 0x44c8 <__mulsf3+0x14>
    44d4:	95 0f       	add	r25, r21
    44d6:	50 e0       	ldi	r21, 0x00	; 0
    44d8:	55 1f       	adc	r21, r21
    44da:	62 9f       	mul	r22, r18
    44dc:	f0 01       	movw	r30, r0
    44de:	72 9f       	mul	r23, r18
    44e0:	bb 27       	eor	r27, r27
    44e2:	f0 0d       	add	r31, r0
    44e4:	b1 1d       	adc	r27, r1
    44e6:	63 9f       	mul	r22, r19
    44e8:	aa 27       	eor	r26, r26
    44ea:	f0 0d       	add	r31, r0
    44ec:	b1 1d       	adc	r27, r1
    44ee:	aa 1f       	adc	r26, r26
    44f0:	64 9f       	mul	r22, r20
    44f2:	66 27       	eor	r22, r22
    44f4:	b0 0d       	add	r27, r0
    44f6:	a1 1d       	adc	r26, r1
    44f8:	66 1f       	adc	r22, r22
    44fa:	82 9f       	mul	r24, r18
    44fc:	22 27       	eor	r18, r18
    44fe:	b0 0d       	add	r27, r0
    4500:	a1 1d       	adc	r26, r1
    4502:	62 1f       	adc	r22, r18
    4504:	73 9f       	mul	r23, r19
    4506:	b0 0d       	add	r27, r0
    4508:	a1 1d       	adc	r26, r1
    450a:	62 1f       	adc	r22, r18
    450c:	83 9f       	mul	r24, r19
    450e:	a0 0d       	add	r26, r0
    4510:	61 1d       	adc	r22, r1
    4512:	22 1f       	adc	r18, r18
    4514:	74 9f       	mul	r23, r20
    4516:	33 27       	eor	r19, r19
    4518:	a0 0d       	add	r26, r0
    451a:	61 1d       	adc	r22, r1
    451c:	23 1f       	adc	r18, r19
    451e:	84 9f       	mul	r24, r20
    4520:	60 0d       	add	r22, r0
    4522:	21 1d       	adc	r18, r1
    4524:	82 2f       	mov	r24, r18
    4526:	76 2f       	mov	r23, r22
    4528:	6a 2f       	mov	r22, r26
    452a:	11 24       	eor	r1, r1
    452c:	9f 57       	subi	r25, 0x7F	; 127
    452e:	50 40       	sbci	r21, 0x00	; 0
    4530:	8a f0       	brmi	.+34     	; 0x4554 <__mulsf3_pse+0x84>
    4532:	e1 f0       	breq	.+56     	; 0x456c <__mulsf3_pse+0x9c>
    4534:	88 23       	and	r24, r24
    4536:	4a f0       	brmi	.+18     	; 0x454a <__mulsf3_pse+0x7a>
    4538:	ee 0f       	add	r30, r30
    453a:	ff 1f       	adc	r31, r31
    453c:	bb 1f       	adc	r27, r27
    453e:	66 1f       	adc	r22, r22
    4540:	77 1f       	adc	r23, r23
    4542:	88 1f       	adc	r24, r24
    4544:	91 50       	subi	r25, 0x01	; 1
    4546:	50 40       	sbci	r21, 0x00	; 0
    4548:	a9 f7       	brne	.-22     	; 0x4534 <__mulsf3_pse+0x64>
    454a:	9e 3f       	cpi	r25, 0xFE	; 254
    454c:	51 05       	cpc	r21, r1
    454e:	70 f0       	brcs	.+28     	; 0x456c <__mulsf3_pse+0x9c>
    4550:	14 c0       	rjmp	.+40     	; 0x457a <__fp_inf>
    4552:	5e c0       	rjmp	.+188    	; 0x4610 <__fp_szero>
    4554:	5f 3f       	cpi	r21, 0xFF	; 255
    4556:	ec f3       	brlt	.-6      	; 0x4552 <__mulsf3_pse+0x82>
    4558:	98 3e       	cpi	r25, 0xE8	; 232
    455a:	dc f3       	brlt	.-10     	; 0x4552 <__mulsf3_pse+0x82>
    455c:	86 95       	lsr	r24
    455e:	77 95       	ror	r23
    4560:	67 95       	ror	r22
    4562:	b7 95       	ror	r27
    4564:	f7 95       	ror	r31
    4566:	e7 95       	ror	r30
    4568:	9f 5f       	subi	r25, 0xFF	; 255
    456a:	c1 f7       	brne	.-16     	; 0x455c <__mulsf3_pse+0x8c>
    456c:	fe 2b       	or	r31, r30
    456e:	88 0f       	add	r24, r24
    4570:	91 1d       	adc	r25, r1
    4572:	96 95       	lsr	r25
    4574:	87 95       	ror	r24
    4576:	97 f9       	bld	r25, 7
    4578:	08 95       	ret

0000457a <__fp_inf>:
    457a:	97 f9       	bld	r25, 7
    457c:	9f 67       	ori	r25, 0x7F	; 127
    457e:	80 e8       	ldi	r24, 0x80	; 128
    4580:	70 e0       	ldi	r23, 0x00	; 0
    4582:	60 e0       	ldi	r22, 0x00	; 0
    4584:	08 95       	ret

00004586 <__fp_nan>:
    4586:	9f ef       	ldi	r25, 0xFF	; 255
    4588:	80 ec       	ldi	r24, 0xC0	; 192
    458a:	08 95       	ret

0000458c <__fp_pscA>:
    458c:	00 24       	eor	r0, r0
    458e:	0a 94       	dec	r0
    4590:	16 16       	cp	r1, r22
    4592:	17 06       	cpc	r1, r23
    4594:	18 06       	cpc	r1, r24
    4596:	09 06       	cpc	r0, r25
    4598:	08 95       	ret

0000459a <__fp_pscB>:
    459a:	00 24       	eor	r0, r0
    459c:	0a 94       	dec	r0
__fp_pscB():
    459e:	12 16       	cp	r1, r18
    45a0:	13 06       	cpc	r1, r19
    45a2:	14 06       	cpc	r1, r20
    45a4:	05 06       	cpc	r0, r21
    45a6:	08 95       	ret

000045a8 <__fp_round>:
__fp_round():
    45a8:	09 2e       	mov	r0, r25
    45aa:	03 94       	inc	r0
    45ac:	00 0c       	add	r0, r0
    45ae:	11 f4       	brne	.+4      	; 0x45b4 <__fp_round+0xc>
    45b0:	88 23       	and	r24, r24
    45b2:	52 f0       	brmi	.+20     	; 0x45c8 <__fp_round+0x20>
    45b4:	bb 0f       	add	r27, r27
    45b6:	40 f4       	brcc	.+16     	; 0x45c8 <__fp_round+0x20>
    45b8:	bf 2b       	or	r27, r31
    45ba:	11 f4       	brne	.+4      	; 0x45c0 <__fp_round+0x18>
    45bc:	60 ff       	sbrs	r22, 0
    45be:	04 c0       	rjmp	.+8      	; 0x45c8 <__fp_round+0x20>
    45c0:	6f 5f       	subi	r22, 0xFF	; 255
    45c2:	7f 4f       	sbci	r23, 0xFF	; 255
    45c4:	8f 4f       	sbci	r24, 0xFF	; 255
    45c6:	9f 4f       	sbci	r25, 0xFF	; 255
    45c8:	08 95       	ret

000045ca <__fp_split3>:
__fp_split3():
    45ca:	57 fd       	sbrc	r21, 7
    45cc:	90 58       	subi	r25, 0x80	; 128
    45ce:	44 0f       	add	r20, r20
    45d0:	55 1f       	adc	r21, r21
    45d2:	59 f0       	breq	.+22     	; 0x45ea <__fp_splitA+0x10>
    45d4:	5f 3f       	cpi	r21, 0xFF	; 255
    45d6:	71 f0       	breq	.+28     	; 0x45f4 <__fp_splitA+0x1a>
    45d8:	47 95       	ror	r20

000045da <__fp_splitA>:
    45da:	88 0f       	add	r24, r24
    45dc:	97 fb       	bst	r25, 7
    45de:	99 1f       	adc	r25, r25
    45e0:	61 f0       	breq	.+24     	; 0x45fa <__fp_splitA+0x20>
    45e2:	9f 3f       	cpi	r25, 0xFF	; 255
    45e4:	79 f0       	breq	.+30     	; 0x4604 <__fp_splitA+0x2a>
    45e6:	87 95       	ror	r24
    45e8:	08 95       	ret
    45ea:	12 16       	cp	r1, r18
    45ec:	13 06       	cpc	r1, r19
    45ee:	14 06       	cpc	r1, r20
    45f0:	55 1f       	adc	r21, r21
    45f2:	f2 cf       	rjmp	.-28     	; 0x45d8 <__fp_split3+0xe>
    45f4:	46 95       	lsr	r20
    45f6:	f1 df       	rcall	.-30     	; 0x45da <__fp_splitA>
    45f8:	08 c0       	rjmp	.+16     	; 0x460a <__fp_splitA+0x30>
    45fa:	16 16       	cp	r1, r22
    45fc:	17 06       	cpc	r1, r23
    45fe:	18 06       	cpc	r1, r24
    4600:	99 1f       	adc	r25, r25
    4602:	f1 cf       	rjmp	.-30     	; 0x45e6 <__fp_splitA+0xc>
    4604:	86 95       	lsr	r24
    4606:	71 05       	cpc	r23, r1
    4608:	61 05       	cpc	r22, r1
    460a:	08 94       	sec
    460c:	08 95       	ret

0000460e <__fp_zero>:
__fp_zero():
    460e:	e8 94       	clt

00004610 <__fp_szero>:
    4610:	bb 27       	eor	r27, r27
    4612:	66 27       	eor	r22, r22
    4614:	77 27       	eor	r23, r23
    4616:	cb 01       	movw	r24, r22
    4618:	97 f9       	bld	r25, 7
    461a:	08 95       	ret

0000461c <__muluhisi3>:
__muluhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    461c:	3a d0       	rcall	.+116    	; 0x4692 <__umulhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    461e:	a5 9f       	mul	r26, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    4620:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    4622:	b4 9f       	mul	r27, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    4624:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    4626:	a4 9f       	mul	r26, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    4628:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    462a:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    462c:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    462e:	08 95       	ret

00004630 <__prologue_saves__>:
__prologue_saves__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2169
    4630:	2f 92       	push	r2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2170
    4632:	3f 92       	push	r3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2171
    4634:	4f 92       	push	r4
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2172
    4636:	5f 92       	push	r5
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2173
    4638:	6f 92       	push	r6
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2174
    463a:	7f 92       	push	r7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2175
    463c:	8f 92       	push	r8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2176
    463e:	9f 92       	push	r9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2177
    4640:	af 92       	push	r10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2178
    4642:	bf 92       	push	r11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2179
    4644:	cf 92       	push	r12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2180
    4646:	df 92       	push	r13
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2181
    4648:	ef 92       	push	r14
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2182
    464a:	ff 92       	push	r15
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2183
    464c:	0f 93       	push	r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2184
    464e:	1f 93       	push	r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2185
    4650:	cf 93       	push	r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2186
    4652:	df 93       	push	r29
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2193
    4654:	cd b7       	in	r28, 0x3d	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2194
    4656:	de b7       	in	r29, 0x3e	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2195
    4658:	ca 1b       	sub	r28, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2196
    465a:	db 0b       	sbc	r29, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2197
    465c:	cd bf       	out	0x3d, r28	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2198
    465e:	de bf       	out	0x3e, r29	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2211
    4660:	09 94       	ijmp

00004662 <__epilogue_restores__>:
__epilogue_restores__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2222
    4662:	2a 88       	ldd	r2, Y+18	; 0x12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2223
    4664:	39 88       	ldd	r3, Y+17	; 0x11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2224
    4666:	48 88       	ldd	r4, Y+16	; 0x10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2225
    4668:	5f 84       	ldd	r5, Y+15	; 0x0f
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2226
    466a:	6e 84       	ldd	r6, Y+14	; 0x0e
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2227
    466c:	7d 84       	ldd	r7, Y+13	; 0x0d
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2228
    466e:	8c 84       	ldd	r8, Y+12	; 0x0c
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2229
    4670:	9b 84       	ldd	r9, Y+11	; 0x0b
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2230
    4672:	aa 84       	ldd	r10, Y+10	; 0x0a
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2231
    4674:	b9 84       	ldd	r11, Y+9	; 0x09
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2232
    4676:	c8 84       	ldd	r12, Y+8	; 0x08
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2233
    4678:	df 80       	ldd	r13, Y+7	; 0x07
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2234
    467a:	ee 80       	ldd	r14, Y+6	; 0x06
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2235
    467c:	fd 80       	ldd	r15, Y+5	; 0x05
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2236
    467e:	0c 81       	ldd	r16, Y+4	; 0x04
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2237
    4680:	1b 81       	ldd	r17, Y+3	; 0x03
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2238
    4682:	aa 81       	ldd	r26, Y+2	; 0x02
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2245
    4684:	b9 81       	ldd	r27, Y+1	; 0x01
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2246
    4686:	ce 0f       	add	r28, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2247
    4688:	d1 1d       	adc	r29, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2248
    468a:	cd bf       	out	0x3d, r28	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2249
    468c:	de bf       	out	0x3e, r29	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2250
    468e:	ed 01       	movw	r28, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2263
    4690:	08 95       	ret

00004692 <__umulhisi3>:
__umulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    4692:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    4694:	b0 01       	movw	r22, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    4696:	b3 9f       	mul	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    4698:	c0 01       	movw	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    469a:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    469c:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    469e:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    46a0:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    46a2:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    46a4:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    46a6:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    46a8:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    46aa:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    46ac:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    46ae:	08 95       	ret

000046b0 <__subsf3>:
__subsf3():
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:221
    46b0:	50 58       	subi	r21, 0x80	; 128

000046b2 <__addsf3>:
    46b2:	bb 27       	eor	r27, r27
    46b4:	aa 27       	eor	r26, r26
    46b6:	0e d0       	rcall	.+28     	; 0x46d4 <__addsf3x>
    46b8:	77 cf       	rjmp	.-274    	; 0x45a8 <__fp_round>
__addsf3():
    46ba:	68 df       	rcall	.-304    	; 0x458c <__fp_pscA>
    46bc:	30 f0       	brcs	.+12     	; 0x46ca <__addsf3+0x18>
    46be:	6d df       	rcall	.-294    	; 0x459a <__fp_pscB>
    46c0:	20 f0       	brcs	.+8      	; 0x46ca <__addsf3+0x18>
    46c2:	31 f4       	brne	.+12     	; 0x46d0 <__addsf3+0x1e>
    46c4:	9f 3f       	cpi	r25, 0xFF	; 255
    46c6:	11 f4       	brne	.+4      	; 0x46cc <__addsf3+0x1a>
    46c8:	1e f4       	brtc	.+6      	; 0x46d0 <__addsf3+0x1e>
    46ca:	5d cf       	rjmp	.-326    	; 0x4586 <__fp_nan>
    46cc:	0e f4       	brtc	.+2      	; 0x46d0 <__addsf3+0x1e>
    46ce:	e0 95       	com	r30
    46d0:	e7 fb       	bst	r30, 7
    46d2:	53 cf       	rjmp	.-346    	; 0x457a <__fp_inf>

000046d4 <__addsf3x>:
__addsf3x():
    46d4:	e9 2f       	mov	r30, r25
    46d6:	79 df       	rcall	.-270    	; 0x45ca <__fp_split3>
    46d8:	80 f3       	brcs	.-32     	; 0x46ba <__addsf3+0x8>
    46da:	ba 17       	cp	r27, r26
    46dc:	62 07       	cpc	r22, r18
    46de:	73 07       	cpc	r23, r19
    46e0:	84 07       	cpc	r24, r20
    46e2:	95 07       	cpc	r25, r21
    46e4:	18 f0       	brcs	.+6      	; 0x46ec <__addsf3x+0x18>
    46e6:	71 f4       	brne	.+28     	; 0x4704 <__addsf3x+0x30>
    46e8:	9e f5       	brtc	.+102    	; 0x4750 <__addsf3x+0x7c>
    46ea:	91 cf       	rjmp	.-222    	; 0x460e <__fp_zero>
    46ec:	0e f4       	brtc	.+2      	; 0x46f0 <__addsf3x+0x1c>
    46ee:	e0 95       	com	r30
    46f0:	0b 2e       	mov	r0, r27
    46f2:	ba 2f       	mov	r27, r26
    46f4:	a0 2d       	mov	r26, r0
    46f6:	0b 01       	movw	r0, r22
    46f8:	b9 01       	movw	r22, r18
    46fa:	90 01       	movw	r18, r0
    46fc:	0c 01       	movw	r0, r24
    46fe:	ca 01       	movw	r24, r20
    4700:	a0 01       	movw	r20, r0
    4702:	11 24       	eor	r1, r1
    4704:	ff 27       	eor	r31, r31
    4706:	59 1b       	sub	r21, r25
    4708:	99 f0       	breq	.+38     	; 0x4730 <__addsf3x+0x5c>
    470a:	59 3f       	cpi	r21, 0xF9	; 249
    470c:	50 f4       	brcc	.+20     	; 0x4722 <__addsf3x+0x4e>
    470e:	50 3e       	cpi	r21, 0xE0	; 224
    4710:	68 f1       	brcs	.+90     	; 0x476c <__addsf3x+0x98>
    4712:	1a 16       	cp	r1, r26
    4714:	f0 40       	sbci	r31, 0x00	; 0
    4716:	a2 2f       	mov	r26, r18
    4718:	23 2f       	mov	r18, r19
    471a:	34 2f       	mov	r19, r20
    471c:	44 27       	eor	r20, r20
    471e:	58 5f       	subi	r21, 0xF8	; 248
    4720:	f3 cf       	rjmp	.-26     	; 0x4708 <__addsf3x+0x34>
    4722:	46 95       	lsr	r20
    4724:	37 95       	ror	r19
    4726:	27 95       	ror	r18
    4728:	a7 95       	ror	r26
    472a:	f0 40       	sbci	r31, 0x00	; 0
    472c:	53 95       	inc	r21
    472e:	c9 f7       	brne	.-14     	; 0x4722 <__addsf3x+0x4e>
    4730:	7e f4       	brtc	.+30     	; 0x4750 <__addsf3x+0x7c>
    4732:	1f 16       	cp	r1, r31
    4734:	ba 0b       	sbc	r27, r26
    4736:	62 0b       	sbc	r22, r18
    4738:	73 0b       	sbc	r23, r19
    473a:	84 0b       	sbc	r24, r20
    473c:	ba f0       	brmi	.+46     	; 0x476c <__addsf3x+0x98>
    473e:	91 50       	subi	r25, 0x01	; 1
    4740:	a1 f0       	breq	.+40     	; 0x476a <__addsf3x+0x96>
    4742:	ff 0f       	add	r31, r31
    4744:	bb 1f       	adc	r27, r27
    4746:	66 1f       	adc	r22, r22
    4748:	77 1f       	adc	r23, r23
    474a:	88 1f       	adc	r24, r24
    474c:	c2 f7       	brpl	.-16     	; 0x473e <__addsf3x+0x6a>
    474e:	0e c0       	rjmp	.+28     	; 0x476c <__addsf3x+0x98>
    4750:	ba 0f       	add	r27, r26
    4752:	62 1f       	adc	r22, r18
    4754:	73 1f       	adc	r23, r19
    4756:	84 1f       	adc	r24, r20
    4758:	48 f4       	brcc	.+18     	; 0x476c <__addsf3x+0x98>
    475a:	87 95       	ror	r24
    475c:	77 95       	ror	r23
    475e:	67 95       	ror	r22
    4760:	b7 95       	ror	r27
    4762:	f7 95       	ror	r31
    4764:	9e 3f       	cpi	r25, 0xFE	; 254
    4766:	08 f0       	brcs	.+2      	; 0x476a <__addsf3x+0x96>
    4768:	b3 cf       	rjmp	.-154    	; 0x46d0 <__addsf3+0x1e>
    476a:	93 95       	inc	r25
    476c:	88 0f       	add	r24, r24
    476e:	08 f0       	brcs	.+2      	; 0x4772 <__addsf3x+0x9e>
    4770:	99 27       	eor	r25, r25
    4772:	ee 0f       	add	r30, r30
    4774:	97 95       	ror	r25
    4776:	87 95       	ror	r24
    4778:	08 95       	ret

0000477a <__divsf3>:
    477a:	0c d0       	rcall	.+24     	; 0x4794 <__divsf3x>
    477c:	15 cf       	rjmp	.-470    	; 0x45a8 <__fp_round>
    477e:	0d df       	rcall	.-486    	; 0x459a <__fp_pscB>
    4780:	40 f0       	brcs	.+16     	; 0x4792 <__divsf3+0x18>
    4782:	04 df       	rcall	.-504    	; 0x458c <__fp_pscA>
    4784:	30 f0       	brcs	.+12     	; 0x4792 <__divsf3+0x18>
    4786:	21 f4       	brne	.+8      	; 0x4790 <__divsf3+0x16>
    4788:	5f 3f       	cpi	r21, 0xFF	; 255
    478a:	19 f0       	breq	.+6      	; 0x4792 <__divsf3+0x18>
    478c:	f6 ce       	rjmp	.-532    	; 0x457a <__fp_inf>
    478e:	51 11       	cpse	r21, r1
    4790:	3f cf       	rjmp	.-386    	; 0x4610 <__fp_szero>
    4792:	f9 ce       	rjmp	.-526    	; 0x4586 <__fp_nan>

00004794 <__divsf3x>:
    4794:	1a df       	rcall	.-460    	; 0x45ca <__fp_split3>
    4796:	98 f3       	brcs	.-26     	; 0x477e <__divsf3+0x4>

00004798 <__divsf3_pse>:
    4798:	99 23       	and	r25, r25
    479a:	c9 f3       	breq	.-14     	; 0x478e <__divsf3+0x14>
    479c:	55 23       	and	r21, r21
    479e:	b1 f3       	breq	.-20     	; 0x478c <__divsf3+0x12>
__divsf3_pse():
    47a0:	95 1b       	sub	r25, r21
    47a2:	55 0b       	sbc	r21, r21
    47a4:	bb 27       	eor	r27, r27
    47a6:	aa 27       	eor	r26, r26
    47a8:	62 17       	cp	r22, r18
    47aa:	73 07       	cpc	r23, r19
    47ac:	84 07       	cpc	r24, r20
    47ae:	38 f0       	brcs	.+14     	; 0x47be <__divsf3_pse+0x26>
    47b0:	9f 5f       	subi	r25, 0xFF	; 255
    47b2:	5f 4f       	sbci	r21, 0xFF	; 255
    47b4:	22 0f       	add	r18, r18
    47b6:	33 1f       	adc	r19, r19
    47b8:	44 1f       	adc	r20, r20
    47ba:	aa 1f       	adc	r26, r26
    47bc:	a9 f3       	breq	.-22     	; 0x47a8 <__divsf3_pse+0x10>
    47be:	33 d0       	rcall	.+102    	; 0x4826 <__divsf3_pse+0x8e>
    47c0:	0e 2e       	mov	r0, r30
    47c2:	3a f0       	brmi	.+14     	; 0x47d2 <__divsf3_pse+0x3a>
    47c4:	e0 e8       	ldi	r30, 0x80	; 128
    47c6:	30 d0       	rcall	.+96     	; 0x4828 <__divsf3_pse+0x90>
    47c8:	91 50       	subi	r25, 0x01	; 1
    47ca:	50 40       	sbci	r21, 0x00	; 0
    47cc:	e6 95       	lsr	r30
    47ce:	00 1c       	adc	r0, r0
    47d0:	ca f7       	brpl	.-14     	; 0x47c4 <__divsf3_pse+0x2c>
    47d2:	29 d0       	rcall	.+82     	; 0x4826 <__divsf3_pse+0x8e>
    47d4:	fe 2f       	mov	r31, r30
    47d6:	27 d0       	rcall	.+78     	; 0x4826 <__divsf3_pse+0x8e>
    47d8:	66 0f       	add	r22, r22
    47da:	77 1f       	adc	r23, r23
    47dc:	88 1f       	adc	r24, r24
    47de:	bb 1f       	adc	r27, r27
    47e0:	26 17       	cp	r18, r22
    47e2:	37 07       	cpc	r19, r23
    47e4:	48 07       	cpc	r20, r24
    47e6:	ab 07       	cpc	r26, r27
    47e8:	b0 e8       	ldi	r27, 0x80	; 128
    47ea:	09 f0       	breq	.+2      	; 0x47ee <__divsf3_pse+0x56>
    47ec:	bb 0b       	sbc	r27, r27
    47ee:	80 2d       	mov	r24, r0
    47f0:	bf 01       	movw	r22, r30
    47f2:	ff 27       	eor	r31, r31
    47f4:	93 58       	subi	r25, 0x83	; 131
    47f6:	5f 4f       	sbci	r21, 0xFF	; 255
    47f8:	2a f0       	brmi	.+10     	; 0x4804 <__divsf3_pse+0x6c>
    47fa:	9e 3f       	cpi	r25, 0xFE	; 254
    47fc:	51 05       	cpc	r21, r1
    47fe:	68 f0       	brcs	.+26     	; 0x481a <__divsf3_pse+0x82>
    4800:	bc ce       	rjmp	.-648    	; 0x457a <__fp_inf>
    4802:	06 cf       	rjmp	.-500    	; 0x4610 <__fp_szero>
    4804:	5f 3f       	cpi	r21, 0xFF	; 255
    4806:	ec f3       	brlt	.-6      	; 0x4802 <__divsf3_pse+0x6a>
    4808:	98 3e       	cpi	r25, 0xE8	; 232
    480a:	dc f3       	brlt	.-10     	; 0x4802 <__divsf3_pse+0x6a>
    480c:	86 95       	lsr	r24
    480e:	77 95       	ror	r23
    4810:	67 95       	ror	r22
    4812:	b7 95       	ror	r27
    4814:	f7 95       	ror	r31
    4816:	9f 5f       	subi	r25, 0xFF	; 255
    4818:	c9 f7       	brne	.-14     	; 0x480c <__divsf3_pse+0x74>
    481a:	88 0f       	add	r24, r24
    481c:	91 1d       	adc	r25, r1
    481e:	96 95       	lsr	r25
    4820:	87 95       	ror	r24
    4822:	97 f9       	bld	r25, 7
    4824:	08 95       	ret
    4826:	e1 e0       	ldi	r30, 0x01	; 1
    4828:	66 0f       	add	r22, r22
    482a:	77 1f       	adc	r23, r23
    482c:	88 1f       	adc	r24, r24
    482e:	bb 1f       	adc	r27, r27
    4830:	62 17       	cp	r22, r18
    4832:	73 07       	cpc	r23, r19
    4834:	84 07       	cpc	r24, r20
    4836:	ba 07       	cpc	r27, r26
    4838:	20 f0       	brcs	.+8      	; 0x4842 <__divsf3_pse+0xaa>
    483a:	62 1b       	sub	r22, r18
    483c:	73 0b       	sbc	r23, r19
    483e:	84 0b       	sbc	r24, r20
    4840:	ba 0b       	sbc	r27, r26
    4842:	ee 1f       	adc	r30, r30
    4844:	88 f7       	brcc	.-30     	; 0x4828 <__divsf3_pse+0x90>
    4846:	e0 95       	com	r30
    4848:	08 95       	ret

0000484a <__fixsfsi>:
__fixsfsi():
    484a:	04 d0       	rcall	.+8      	; 0x4854 <__fixunssfsi>
    484c:	68 94       	set
    484e:	b1 11       	cpse	r27, r1
    4850:	df ce       	rjmp	.-578    	; 0x4610 <__fp_szero>
    4852:	08 95       	ret

00004854 <__fixunssfsi>:
__fixunssfsi():
    4854:	c2 de       	rcall	.-636    	; 0x45da <__fp_splitA>
    4856:	88 f0       	brcs	.+34     	; 0x487a <__fixunssfsi+0x26>
    4858:	9f 57       	subi	r25, 0x7F	; 127
    485a:	90 f0       	brcs	.+36     	; 0x4880 <__fixunssfsi+0x2c>
    485c:	b9 2f       	mov	r27, r25
    485e:	99 27       	eor	r25, r25
    4860:	b7 51       	subi	r27, 0x17	; 23
    4862:	a0 f0       	brcs	.+40     	; 0x488c <__fixunssfsi+0x38>
    4864:	d1 f0       	breq	.+52     	; 0x489a <__fixunssfsi+0x46>
    4866:	66 0f       	add	r22, r22
    4868:	77 1f       	adc	r23, r23
    486a:	88 1f       	adc	r24, r24
    486c:	99 1f       	adc	r25, r25
    486e:	1a f0       	brmi	.+6      	; 0x4876 <__fixunssfsi+0x22>
    4870:	ba 95       	dec	r27
    4872:	c9 f7       	brne	.-14     	; 0x4866 <__fixunssfsi+0x12>
    4874:	12 c0       	rjmp	.+36     	; 0x489a <__fixunssfsi+0x46>
    4876:	b1 30       	cpi	r27, 0x01	; 1
    4878:	81 f0       	breq	.+32     	; 0x489a <__fixunssfsi+0x46>
    487a:	c9 de       	rcall	.-622    	; 0x460e <__fp_zero>
    487c:	b1 e0       	ldi	r27, 0x01	; 1
    487e:	08 95       	ret
    4880:	c6 ce       	rjmp	.-628    	; 0x460e <__fp_zero>
    4882:	67 2f       	mov	r22, r23
    4884:	78 2f       	mov	r23, r24
    4886:	88 27       	eor	r24, r24
    4888:	b8 5f       	subi	r27, 0xF8	; 248
    488a:	39 f0       	breq	.+14     	; 0x489a <__fixunssfsi+0x46>
    488c:	b9 3f       	cpi	r27, 0xF9	; 249
    488e:	cc f3       	brlt	.-14     	; 0x4882 <__fixunssfsi+0x2e>
    4890:	86 95       	lsr	r24
    4892:	77 95       	ror	r23
    4894:	67 95       	ror	r22
    4896:	b3 95       	inc	r27
    4898:	d9 f7       	brne	.-10     	; 0x4890 <__fixunssfsi+0x3c>
    489a:	3e f4       	brtc	.+14     	; 0x48aa <__fixunssfsi+0x56>
    489c:	90 95       	com	r25
    489e:	80 95       	com	r24
    48a0:	70 95       	com	r23
    48a2:	61 95       	neg	r22
    48a4:	7f 4f       	sbci	r23, 0xFF	; 255
    48a6:	8f 4f       	sbci	r24, 0xFF	; 255
    48a8:	9f 4f       	sbci	r25, 0xFF	; 255
    48aa:	08 95       	ret

000048ac <__gesf2>:
__gesf2():
    48ac:	df dd       	rcall	.-1090   	; 0x446c <__fp_cmp>
    48ae:	08 f4       	brcc	.+2      	; 0x48b2 <__gesf2+0x6>
    48b0:	8f ef       	ldi	r24, 0xFF	; 255
    48b2:	08 95       	ret

000048b4 <__unordsf2>:
__unordsf2():
    48b4:	db dd       	rcall	.-1098   	; 0x446c <__fp_cmp>
    48b6:	88 0b       	sbc	r24, r24
    48b8:	99 0b       	sbc	r25, r25
    48ba:	08 95       	ret

000048bc <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    48bc:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    48be:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    48c0:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    48c2:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    48c4:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    48c6:	0d c0       	rjmp	.+26     	; 0x48e2 <__udivmodsi4_ep>

000048c8 <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    48c8:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    48ca:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    48cc:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    48ce:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    48d0:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    48d2:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    48d4:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    48d6:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    48d8:	20 f0       	brcs	.+8      	; 0x48e2 <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    48da:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    48dc:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    48de:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    48e0:	f5 0b       	sbc	r31, r21

000048e2 <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    48e2:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    48e4:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    48e6:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    48e8:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    48ea:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    48ec:	69 f7       	brne	.-38     	; 0x48c8 <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    48ee:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    48f0:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    48f2:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    48f4:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    48f6:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    48f8:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    48fa:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    48fc:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    48fe:	08 95       	ret

00004900 <__divmodsi4>:
__divmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
    4900:	05 2e       	mov	r0, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
    4902:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
    4904:	16 f4       	brtc	.+4      	; 0x490a <__divmodsi4+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
    4906:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
    4908:	0f d0       	rcall	.+30     	; 0x4928 <__negsi2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
    490a:	57 fd       	sbrc	r21, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
    490c:	05 d0       	rcall	.+10     	; 0x4918 <__divmodsi4_neg2>
    490e:	d6 df       	rcall	.-84     	; 0x48bc <__udivmodsi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
    4910:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
    4912:	02 d0       	rcall	.+4      	; 0x4918 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
    4914:	46 f4       	brtc	.+16     	; 0x4926 <__divmodsi4_exit>
    4916:	08 c0       	rjmp	.+16     	; 0x4928 <__negsi2>

00004918 <__divmodsi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
    4918:	50 95       	com	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
    491a:	40 95       	com	r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
    491c:	30 95       	com	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
    491e:	21 95       	neg	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
    4920:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
    4922:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
    4924:	5f 4f       	sbci	r21, 0xFF	; 255

00004926 <__divmodsi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
    4926:	08 95       	ret

00004928 <__negsi2>:
__negsi2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
    4928:	90 95       	com	r25
    492a:	80 95       	com	r24
    492c:	70 95       	com	r23
    492e:	61 95       	neg	r22
    4930:	7f 4f       	sbci	r23, 0xFF	; 255
    4932:	8f 4f       	sbci	r24, 0xFF	; 255
    4934:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
    4936:	08 95       	ret

00004938 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    4938:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    493a:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    493c:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    493e:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    4940:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    4942:	09 94       	ijmp

00004944 <__usmulhisi3>:
__usmulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:545
    4944:	a6 de       	rcall	.-692    	; 0x4692 <__umulhisi3>

00004946 <__usmulhisi3_tail>:
__usmulhisi3_tail():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:551
    4946:	b7 ff       	sbrs	r27, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:552
    4948:	08 95       	ret
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:553
    494a:	82 1b       	sub	r24, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:554
    494c:	93 0b       	sbc	r25, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:555
    494e:	08 95       	ret

00004950 <__mulshisi3>:
__mulshisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:603
    4950:	b7 ff       	sbrs	r27, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:605
    4952:	64 ce       	rjmp	.-824    	; 0x461c <__muluhisi3>

00004954 <__mulohisi3>:
__mulohisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:613
    4954:	63 de       	rcall	.-826    	; 0x461c <__muluhisi3>
    4956:	82 1b       	sub	r24, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:615
    4958:	93 0b       	sbc	r25, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:616
    495a:	08 95       	ret

0000495c <malloc>:
malloc():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:617
    495c:	0f 93       	push	r16
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Final_QCD_250_V1.00/button.cpp:221
    495e:	1f 93       	push	r17
    4960:	cf 93       	push	r28
    4962:	df 93       	push	r29
    4964:	82 30       	cpi	r24, 0x02	; 2
    4966:	91 05       	cpc	r25, r1
    4968:	10 f4       	brcc	.+4      	; 0x496e <malloc+0x12>
    496a:	82 e0       	ldi	r24, 0x02	; 2
    496c:	90 e0       	ldi	r25, 0x00	; 0
    496e:	e0 91 45 2b 	lds	r30, 0x2B45	; 0x802b45 <__flp>
    4972:	f0 91 46 2b 	lds	r31, 0x2B46	; 0x802b46 <__flp+0x1>
    4976:	30 e0       	ldi	r19, 0x00	; 0
    4978:	20 e0       	ldi	r18, 0x00	; 0
    497a:	b0 e0       	ldi	r27, 0x00	; 0
    497c:	a0 e0       	ldi	r26, 0x00	; 0
    497e:	30 97       	sbiw	r30, 0x00	; 0
    4980:	99 f4       	brne	.+38     	; 0x49a8 <malloc+0x4c>
    4982:	21 15       	cp	r18, r1
    4984:	31 05       	cpc	r19, r1
    4986:	09 f4       	brne	.+2      	; 0x498a <malloc+0x2e>
    4988:	4a c0       	rjmp	.+148    	; 0x4a1e <malloc+0xc2>
    498a:	28 1b       	sub	r18, r24
    498c:	39 0b       	sbc	r19, r25
    498e:	24 30       	cpi	r18, 0x04	; 4
    4990:	31 05       	cpc	r19, r1
    4992:	d8 f5       	brcc	.+118    	; 0x4a0a <malloc+0xae>
    4994:	8a 81       	ldd	r24, Y+2	; 0x02
    4996:	9b 81       	ldd	r25, Y+3	; 0x03
    4998:	61 15       	cp	r22, r1
    499a:	71 05       	cpc	r23, r1
    499c:	89 f1       	breq	.+98     	; 0x4a00 <malloc+0xa4>
    499e:	fb 01       	movw	r30, r22
    49a0:	82 83       	std	Z+2, r24	; 0x02
    49a2:	93 83       	std	Z+3, r25	; 0x03
    49a4:	fe 01       	movw	r30, r28
    49a6:	11 c0       	rjmp	.+34     	; 0x49ca <malloc+0x6e>
    49a8:	40 81       	ld	r20, Z
    49aa:	51 81       	ldd	r21, Z+1	; 0x01
    49ac:	02 81       	ldd	r16, Z+2	; 0x02
    49ae:	13 81       	ldd	r17, Z+3	; 0x03
    49b0:	48 17       	cp	r20, r24
    49b2:	59 07       	cpc	r21, r25
    49b4:	e0 f0       	brcs	.+56     	; 0x49ee <malloc+0x92>
    49b6:	48 17       	cp	r20, r24
    49b8:	59 07       	cpc	r21, r25
    49ba:	99 f4       	brne	.+38     	; 0x49e2 <malloc+0x86>
    49bc:	10 97       	sbiw	r26, 0x00	; 0
    49be:	61 f0       	breq	.+24     	; 0x49d8 <malloc+0x7c>
    49c0:	12 96       	adiw	r26, 0x02	; 2
    49c2:	0c 93       	st	X, r16
    49c4:	12 97       	sbiw	r26, 0x02	; 2
    49c6:	13 96       	adiw	r26, 0x03	; 3
    49c8:	1c 93       	st	X, r17
    49ca:	32 96       	adiw	r30, 0x02	; 2
    49cc:	cf 01       	movw	r24, r30
    49ce:	df 91       	pop	r29
    49d0:	cf 91       	pop	r28
    49d2:	1f 91       	pop	r17
    49d4:	0f 91       	pop	r16
    49d6:	08 95       	ret
    49d8:	00 93 45 2b 	sts	0x2B45, r16	; 0x802b45 <__flp>
    49dc:	10 93 46 2b 	sts	0x2B46, r17	; 0x802b46 <__flp+0x1>
    49e0:	f4 cf       	rjmp	.-24     	; 0x49ca <malloc+0x6e>
    49e2:	21 15       	cp	r18, r1
    49e4:	31 05       	cpc	r19, r1
    49e6:	51 f0       	breq	.+20     	; 0x49fc <malloc+0xa0>
    49e8:	42 17       	cp	r20, r18
    49ea:	53 07       	cpc	r21, r19
    49ec:	38 f0       	brcs	.+14     	; 0x49fc <malloc+0xa0>
    49ee:	a9 01       	movw	r20, r18
    49f0:	db 01       	movw	r26, r22
    49f2:	9a 01       	movw	r18, r20
    49f4:	bd 01       	movw	r22, r26
    49f6:	df 01       	movw	r26, r30
    49f8:	f8 01       	movw	r30, r16
    49fa:	c1 cf       	rjmp	.-126    	; 0x497e <malloc+0x22>
    49fc:	ef 01       	movw	r28, r30
    49fe:	f9 cf       	rjmp	.-14     	; 0x49f2 <malloc+0x96>
    4a00:	80 93 45 2b 	sts	0x2B45, r24	; 0x802b45 <__flp>
    4a04:	90 93 46 2b 	sts	0x2B46, r25	; 0x802b46 <__flp+0x1>
    4a08:	cd cf       	rjmp	.-102    	; 0x49a4 <malloc+0x48>
    4a0a:	fe 01       	movw	r30, r28
    4a0c:	e2 0f       	add	r30, r18
    4a0e:	f3 1f       	adc	r31, r19
    4a10:	81 93       	st	Z+, r24
    4a12:	91 93       	st	Z+, r25
    4a14:	22 50       	subi	r18, 0x02	; 2
    4a16:	31 09       	sbc	r19, r1
    4a18:	28 83       	st	Y, r18
    4a1a:	39 83       	std	Y+1, r19	; 0x01
    4a1c:	d7 cf       	rjmp	.-82     	; 0x49cc <malloc+0x70>
    4a1e:	20 91 43 2b 	lds	r18, 0x2B43	; 0x802b43 <__brkval>
    4a22:	30 91 44 2b 	lds	r19, 0x2B44	; 0x802b44 <__brkval+0x1>
    4a26:	23 2b       	or	r18, r19
    4a28:	41 f4       	brne	.+16     	; 0x4a3a <malloc+0xde>
    4a2a:	20 91 16 28 	lds	r18, 0x2816	; 0x802816 <__malloc_heap_start>
    4a2e:	30 91 17 28 	lds	r19, 0x2817	; 0x802817 <__malloc_heap_start+0x1>
    4a32:	20 93 43 2b 	sts	0x2B43, r18	; 0x802b43 <__brkval>
    4a36:	30 93 44 2b 	sts	0x2B44, r19	; 0x802b44 <__brkval+0x1>
    4a3a:	20 91 14 28 	lds	r18, 0x2814	; 0x802814 <__malloc_heap_end>
    4a3e:	30 91 15 28 	lds	r19, 0x2815	; 0x802815 <__malloc_heap_end+0x1>
    4a42:	21 15       	cp	r18, r1
    4a44:	31 05       	cpc	r19, r1
    4a46:	41 f4       	brne	.+16     	; 0x4a58 <malloc+0xfc>
    4a48:	2d b7       	in	r18, 0x3d	; 61
    4a4a:	3e b7       	in	r19, 0x3e	; 62
    4a4c:	40 91 18 28 	lds	r20, 0x2818	; 0x802818 <__malloc_margin>
    4a50:	50 91 19 28 	lds	r21, 0x2819	; 0x802819 <__malloc_margin+0x1>
    4a54:	24 1b       	sub	r18, r20
    4a56:	35 0b       	sbc	r19, r21
    4a58:	e0 91 43 2b 	lds	r30, 0x2B43	; 0x802b43 <__brkval>
    4a5c:	f0 91 44 2b 	lds	r31, 0x2B44	; 0x802b44 <__brkval+0x1>
    4a60:	e2 17       	cp	r30, r18
    4a62:	f3 07       	cpc	r31, r19
    4a64:	a0 f4       	brcc	.+40     	; 0x4a8e <malloc+0x132>
    4a66:	2e 1b       	sub	r18, r30
    4a68:	3f 0b       	sbc	r19, r31
    4a6a:	28 17       	cp	r18, r24
    4a6c:	39 07       	cpc	r19, r25
    4a6e:	78 f0       	brcs	.+30     	; 0x4a8e <malloc+0x132>
    4a70:	ac 01       	movw	r20, r24
    4a72:	4e 5f       	subi	r20, 0xFE	; 254
    4a74:	5f 4f       	sbci	r21, 0xFF	; 255
    4a76:	24 17       	cp	r18, r20
    4a78:	35 07       	cpc	r19, r21
    4a7a:	48 f0       	brcs	.+18     	; 0x4a8e <malloc+0x132>
    4a7c:	4e 0f       	add	r20, r30
    4a7e:	5f 1f       	adc	r21, r31
    4a80:	40 93 43 2b 	sts	0x2B43, r20	; 0x802b43 <__brkval>
    4a84:	50 93 44 2b 	sts	0x2B44, r21	; 0x802b44 <__brkval+0x1>
    4a88:	81 93       	st	Z+, r24
    4a8a:	91 93       	st	Z+, r25
    4a8c:	9f cf       	rjmp	.-194    	; 0x49cc <malloc+0x70>
    4a8e:	f0 e0       	ldi	r31, 0x00	; 0
    4a90:	e0 e0       	ldi	r30, 0x00	; 0
    4a92:	9c cf       	rjmp	.-200    	; 0x49cc <malloc+0x70>

00004a94 <free>:
free():
    4a94:	cf 93       	push	r28
    4a96:	df 93       	push	r29
    4a98:	00 97       	sbiw	r24, 0x00	; 0
    4a9a:	e9 f0       	breq	.+58     	; 0x4ad6 <free+0x42>
    4a9c:	fc 01       	movw	r30, r24
    4a9e:	32 97       	sbiw	r30, 0x02	; 2
    4aa0:	12 82       	std	Z+2, r1	; 0x02
    4aa2:	13 82       	std	Z+3, r1	; 0x03
    4aa4:	a0 91 45 2b 	lds	r26, 0x2B45	; 0x802b45 <__flp>
    4aa8:	b0 91 46 2b 	lds	r27, 0x2B46	; 0x802b46 <__flp+0x1>
    4aac:	ed 01       	movw	r28, r26
    4aae:	30 e0       	ldi	r19, 0x00	; 0
    4ab0:	20 e0       	ldi	r18, 0x00	; 0
    4ab2:	10 97       	sbiw	r26, 0x00	; 0
    4ab4:	a1 f4       	brne	.+40     	; 0x4ade <free+0x4a>
    4ab6:	20 81       	ld	r18, Z
    4ab8:	31 81       	ldd	r19, Z+1	; 0x01
    4aba:	82 0f       	add	r24, r18
    4abc:	93 1f       	adc	r25, r19
    4abe:	20 91 43 2b 	lds	r18, 0x2B43	; 0x802b43 <__brkval>
    4ac2:	30 91 44 2b 	lds	r19, 0x2B44	; 0x802b44 <__brkval+0x1>
    4ac6:	28 17       	cp	r18, r24
    4ac8:	39 07       	cpc	r19, r25
    4aca:	09 f0       	breq	.+2      	; 0x4ace <free+0x3a>
    4acc:	61 c0       	rjmp	.+194    	; 0x4b90 <free+0xfc>
    4ace:	e0 93 43 2b 	sts	0x2B43, r30	; 0x802b43 <__brkval>
    4ad2:	f0 93 44 2b 	sts	0x2B44, r31	; 0x802b44 <__brkval+0x1>
    4ad6:	df 91       	pop	r29
    4ad8:	cf 91       	pop	r28
    4ada:	08 95       	ret
    4adc:	ea 01       	movw	r28, r20
    4ade:	ce 17       	cp	r28, r30
    4ae0:	df 07       	cpc	r29, r31
    4ae2:	e8 f5       	brcc	.+122    	; 0x4b5e <free+0xca>
    4ae4:	4a 81       	ldd	r20, Y+2	; 0x02
    4ae6:	5b 81       	ldd	r21, Y+3	; 0x03
    4ae8:	9e 01       	movw	r18, r28
    4aea:	41 15       	cp	r20, r1
    4aec:	51 05       	cpc	r21, r1
    4aee:	b1 f7       	brne	.-20     	; 0x4adc <free+0x48>
    4af0:	e9 01       	movw	r28, r18
    4af2:	ea 83       	std	Y+2, r30	; 0x02
    4af4:	fb 83       	std	Y+3, r31	; 0x03
    4af6:	49 91       	ld	r20, Y+
    4af8:	59 91       	ld	r21, Y+
    4afa:	c4 0f       	add	r28, r20
    4afc:	d5 1f       	adc	r29, r21
    4afe:	ec 17       	cp	r30, r28
    4b00:	fd 07       	cpc	r31, r29
    4b02:	61 f4       	brne	.+24     	; 0x4b1c <free+0x88>
    4b04:	80 81       	ld	r24, Z
    4b06:	91 81       	ldd	r25, Z+1	; 0x01
    4b08:	02 96       	adiw	r24, 0x02	; 2
    4b0a:	84 0f       	add	r24, r20
    4b0c:	95 1f       	adc	r25, r21
    4b0e:	e9 01       	movw	r28, r18
    4b10:	88 83       	st	Y, r24
    4b12:	99 83       	std	Y+1, r25	; 0x01
    4b14:	82 81       	ldd	r24, Z+2	; 0x02
    4b16:	93 81       	ldd	r25, Z+3	; 0x03
    4b18:	8a 83       	std	Y+2, r24	; 0x02
    4b1a:	9b 83       	std	Y+3, r25	; 0x03
    4b1c:	f0 e0       	ldi	r31, 0x00	; 0
    4b1e:	e0 e0       	ldi	r30, 0x00	; 0
    4b20:	12 96       	adiw	r26, 0x02	; 2
    4b22:	8d 91       	ld	r24, X+
    4b24:	9c 91       	ld	r25, X
    4b26:	13 97       	sbiw	r26, 0x03	; 3
    4b28:	00 97       	sbiw	r24, 0x00	; 0
    4b2a:	b9 f5       	brne	.+110    	; 0x4b9a <free+0x106>
    4b2c:	2d 91       	ld	r18, X+
    4b2e:	3c 91       	ld	r19, X
    4b30:	11 97       	sbiw	r26, 0x01	; 1
    4b32:	cd 01       	movw	r24, r26
    4b34:	02 96       	adiw	r24, 0x02	; 2
    4b36:	82 0f       	add	r24, r18
    4b38:	93 1f       	adc	r25, r19
    4b3a:	20 91 43 2b 	lds	r18, 0x2B43	; 0x802b43 <__brkval>
    4b3e:	30 91 44 2b 	lds	r19, 0x2B44	; 0x802b44 <__brkval+0x1>
    4b42:	28 17       	cp	r18, r24
    4b44:	39 07       	cpc	r19, r25
    4b46:	39 f6       	brne	.-114    	; 0x4ad6 <free+0x42>
    4b48:	30 97       	sbiw	r30, 0x00	; 0
    4b4a:	51 f5       	brne	.+84     	; 0x4ba0 <free+0x10c>
    4b4c:	10 92 45 2b 	sts	0x2B45, r1	; 0x802b45 <__flp>
    4b50:	10 92 46 2b 	sts	0x2B46, r1	; 0x802b46 <__flp+0x1>
    4b54:	a0 93 43 2b 	sts	0x2B43, r26	; 0x802b43 <__brkval>
    4b58:	b0 93 44 2b 	sts	0x2B44, r27	; 0x802b44 <__brkval+0x1>
    4b5c:	bc cf       	rjmp	.-136    	; 0x4ad6 <free+0x42>
    4b5e:	c2 83       	std	Z+2, r28	; 0x02
    4b60:	d3 83       	std	Z+3, r29	; 0x03
    4b62:	40 81       	ld	r20, Z
    4b64:	51 81       	ldd	r21, Z+1	; 0x01
    4b66:	84 0f       	add	r24, r20
    4b68:	95 1f       	adc	r25, r21
    4b6a:	c8 17       	cp	r28, r24
    4b6c:	d9 07       	cpc	r29, r25
    4b6e:	61 f4       	brne	.+24     	; 0x4b88 <free+0xf4>
    4b70:	4e 5f       	subi	r20, 0xFE	; 254
    4b72:	5f 4f       	sbci	r21, 0xFF	; 255
    4b74:	88 81       	ld	r24, Y
    4b76:	99 81       	ldd	r25, Y+1	; 0x01
    4b78:	48 0f       	add	r20, r24
    4b7a:	59 1f       	adc	r21, r25
    4b7c:	40 83       	st	Z, r20
    4b7e:	51 83       	std	Z+1, r21	; 0x01
    4b80:	8a 81       	ldd	r24, Y+2	; 0x02
    4b82:	9b 81       	ldd	r25, Y+3	; 0x03
    4b84:	82 83       	std	Z+2, r24	; 0x02
    4b86:	93 83       	std	Z+3, r25	; 0x03
    4b88:	21 15       	cp	r18, r1
    4b8a:	31 05       	cpc	r19, r1
    4b8c:	09 f0       	breq	.+2      	; 0x4b90 <free+0xfc>
    4b8e:	b0 cf       	rjmp	.-160    	; 0x4af0 <free+0x5c>
    4b90:	e0 93 45 2b 	sts	0x2B45, r30	; 0x802b45 <__flp>
    4b94:	f0 93 46 2b 	sts	0x2B46, r31	; 0x802b46 <__flp+0x1>
    4b98:	9e cf       	rjmp	.-196    	; 0x4ad6 <free+0x42>
    4b9a:	fd 01       	movw	r30, r26
    4b9c:	dc 01       	movw	r26, r24
    4b9e:	c0 cf       	rjmp	.-128    	; 0x4b20 <free+0x8c>
    4ba0:	12 82       	std	Z+2, r1	; 0x02
    4ba2:	13 82       	std	Z+3, r1	; 0x03
    4ba4:	d7 cf       	rjmp	.-82     	; 0x4b54 <free+0xc0>

00004ba6 <realloc>:
realloc():
    4ba6:	b0 e0       	ldi	r27, 0x00	; 0
    4ba8:	a0 e0       	ldi	r26, 0x00	; 0
    4baa:	e8 ed       	ldi	r30, 0xD8	; 216
    4bac:	f5 e2       	ldi	r31, 0x25	; 37
    4bae:	42 cd       	rjmp	.-1404   	; 0x4634 <__prologue_saves__+0x4>
    4bb0:	8c 01       	movw	r16, r24
    4bb2:	00 97       	sbiw	r24, 0x00	; 0
    4bb4:	41 f4       	brne	.+16     	; 0x4bc6 <realloc+0x20>
    4bb6:	cb 01       	movw	r24, r22
    4bb8:	d1 de       	rcall	.-606    	; 0x495c <malloc>
    4bba:	8c 01       	movw	r16, r24
    4bbc:	c8 01       	movw	r24, r16
    4bbe:	cd b7       	in	r28, 0x3d	; 61
    4bc0:	de b7       	in	r29, 0x3e	; 62
    4bc2:	e0 e1       	ldi	r30, 0x10	; 16
    4bc4:	50 cd       	rjmp	.-1376   	; 0x4666 <__epilogue_restores__+0x4>
    4bc6:	fc 01       	movw	r30, r24
    4bc8:	e6 0f       	add	r30, r22
    4bca:	f7 1f       	adc	r31, r23
    4bcc:	9c 01       	movw	r18, r24
    4bce:	22 50       	subi	r18, 0x02	; 2
    4bd0:	31 09       	sbc	r19, r1
    4bd2:	e2 17       	cp	r30, r18
    4bd4:	f3 07       	cpc	r31, r19
    4bd6:	08 f4       	brcc	.+2      	; 0x4bda <realloc+0x34>
    4bd8:	99 c0       	rjmp	.+306    	; 0x4d0c <realloc+0x166>
    4bda:	d9 01       	movw	r26, r18
    4bdc:	cd 91       	ld	r28, X+
    4bde:	dc 91       	ld	r29, X
    4be0:	11 97       	sbiw	r26, 0x01	; 1
    4be2:	c6 17       	cp	r28, r22
    4be4:	d7 07       	cpc	r29, r23
    4be6:	90 f0       	brcs	.+36     	; 0x4c0c <realloc+0x66>
    4be8:	c5 30       	cpi	r28, 0x05	; 5
    4bea:	d1 05       	cpc	r29, r1
    4bec:	38 f3       	brcs	.-50     	; 0x4bbc <realloc+0x16>
    4bee:	ce 01       	movw	r24, r28
    4bf0:	04 97       	sbiw	r24, 0x04	; 4
    4bf2:	86 17       	cp	r24, r22
    4bf4:	97 07       	cpc	r25, r23
    4bf6:	10 f3       	brcs	.-60     	; 0x4bbc <realloc+0x16>
    4bf8:	c6 1b       	sub	r28, r22
    4bfa:	d7 0b       	sbc	r29, r23
    4bfc:	22 97       	sbiw	r28, 0x02	; 2
    4bfe:	c1 93       	st	Z+, r28
    4c00:	d1 93       	st	Z+, r29
    4c02:	6d 93       	st	X+, r22
    4c04:	7c 93       	st	X, r23
    4c06:	cf 01       	movw	r24, r30
    4c08:	45 df       	rcall	.-374    	; 0x4a94 <free>
    4c0a:	d8 cf       	rjmp	.-80     	; 0x4bbc <realloc+0x16>
    4c0c:	5b 01       	movw	r10, r22
    4c0e:	ac 1a       	sub	r10, r28
    4c10:	bd 0a       	sbc	r11, r29
    4c12:	4c 01       	movw	r8, r24
    4c14:	8c 0e       	add	r8, r28
    4c16:	9d 1e       	adc	r9, r29
    4c18:	a0 91 45 2b 	lds	r26, 0x2B45	; 0x802b45 <__flp>
    4c1c:	b0 91 46 2b 	lds	r27, 0x2B46	; 0x802b46 <__flp+0x1>
    4c20:	51 2c       	mov	r5, r1
    4c22:	41 2c       	mov	r4, r1
    4c24:	f1 2c       	mov	r15, r1
    4c26:	e1 2c       	mov	r14, r1
    4c28:	10 97       	sbiw	r26, 0x00	; 0
    4c2a:	31 f5       	brne	.+76     	; 0x4c78 <realloc+0xd2>
    4c2c:	80 91 43 2b 	lds	r24, 0x2B43	; 0x802b43 <__brkval>
    4c30:	90 91 44 2b 	lds	r25, 0x2B44	; 0x802b44 <__brkval+0x1>
    4c34:	88 15       	cp	r24, r8
    4c36:	99 05       	cpc	r25, r9
    4c38:	09 f0       	breq	.+2      	; 0x4c3c <realloc+0x96>
    4c3a:	5c c0       	rjmp	.+184    	; 0x4cf4 <realloc+0x14e>
    4c3c:	46 16       	cp	r4, r22
    4c3e:	57 06       	cpc	r5, r23
    4c40:	08 f0       	brcs	.+2      	; 0x4c44 <realloc+0x9e>
    4c42:	58 c0       	rjmp	.+176    	; 0x4cf4 <realloc+0x14e>
    4c44:	80 91 14 28 	lds	r24, 0x2814	; 0x802814 <__malloc_heap_end>
    4c48:	90 91 15 28 	lds	r25, 0x2815	; 0x802815 <__malloc_heap_end+0x1>
    4c4c:	00 97       	sbiw	r24, 0x00	; 0
    4c4e:	41 f4       	brne	.+16     	; 0x4c60 <realloc+0xba>
    4c50:	8d b7       	in	r24, 0x3d	; 61
    4c52:	9e b7       	in	r25, 0x3e	; 62
    4c54:	40 91 18 28 	lds	r20, 0x2818	; 0x802818 <__malloc_margin>
    4c58:	50 91 19 28 	lds	r21, 0x2819	; 0x802819 <__malloc_margin+0x1>
    4c5c:	84 1b       	sub	r24, r20
    4c5e:	95 0b       	sbc	r25, r21
    4c60:	e8 17       	cp	r30, r24
    4c62:	f9 07       	cpc	r31, r25
    4c64:	08 f0       	brcs	.+2      	; 0x4c68 <realloc+0xc2>
    4c66:	52 c0       	rjmp	.+164    	; 0x4d0c <realloc+0x166>
    4c68:	e0 93 43 2b 	sts	0x2B43, r30	; 0x802b43 <__brkval>
    4c6c:	f0 93 44 2b 	sts	0x2B44, r31	; 0x802b44 <__brkval+0x1>
    4c70:	f9 01       	movw	r30, r18
    4c72:	60 83       	st	Z, r22
    4c74:	71 83       	std	Z+1, r23	; 0x01
    4c76:	a2 cf       	rjmp	.-188    	; 0x4bbc <realloc+0x16>
    4c78:	8d 91       	ld	r24, X+
    4c7a:	9c 91       	ld	r25, X
    4c7c:	11 97       	sbiw	r26, 0x01	; 1
    4c7e:	12 96       	adiw	r26, 0x02	; 2
    4c80:	6c 90       	ld	r6, X
    4c82:	12 97       	sbiw	r26, 0x02	; 2
    4c84:	13 96       	adiw	r26, 0x03	; 3
    4c86:	7c 90       	ld	r7, X
    4c88:	13 97       	sbiw	r26, 0x03	; 3
    4c8a:	a8 15       	cp	r26, r8
    4c8c:	b9 05       	cpc	r27, r9
    4c8e:	59 f5       	brne	.+86     	; 0x4ce6 <realloc+0x140>
    4c90:	6c 01       	movw	r12, r24
    4c92:	42 e0       	ldi	r20, 0x02	; 2
    4c94:	c4 0e       	add	r12, r20
    4c96:	d1 1c       	adc	r13, r1
    4c98:	ca 14       	cp	r12, r10
    4c9a:	db 04       	cpc	r13, r11
    4c9c:	20 f1       	brcs	.+72     	; 0x4ce6 <realloc+0x140>
    4c9e:	ac 01       	movw	r20, r24
    4ca0:	4a 19       	sub	r20, r10
    4ca2:	5b 09       	sbc	r21, r11
    4ca4:	da 01       	movw	r26, r20
    4ca6:	12 96       	adiw	r26, 0x02	; 2
    4ca8:	15 97       	sbiw	r26, 0x05	; 5
    4caa:	80 f0       	brcs	.+32     	; 0x4ccc <realloc+0x126>
    4cac:	62 82       	std	Z+2, r6	; 0x02
    4cae:	73 82       	std	Z+3, r7	; 0x03
    4cb0:	40 83       	st	Z, r20
    4cb2:	51 83       	std	Z+1, r21	; 0x01
    4cb4:	d9 01       	movw	r26, r18
    4cb6:	6d 93       	st	X+, r22
    4cb8:	7c 93       	st	X, r23
    4cba:	e1 14       	cp	r14, r1
    4cbc:	f1 04       	cpc	r15, r1
    4cbe:	71 f0       	breq	.+28     	; 0x4cdc <realloc+0x136>
    4cc0:	d7 01       	movw	r26, r14
    4cc2:	12 96       	adiw	r26, 0x02	; 2
    4cc4:	ed 93       	st	X+, r30
    4cc6:	fc 93       	st	X, r31
    4cc8:	13 97       	sbiw	r26, 0x03	; 3
    4cca:	78 cf       	rjmp	.-272    	; 0x4bbc <realloc+0x16>
    4ccc:	22 96       	adiw	r28, 0x02	; 2
    4cce:	8c 0f       	add	r24, r28
    4cd0:	9d 1f       	adc	r25, r29
    4cd2:	f9 01       	movw	r30, r18
    4cd4:	80 83       	st	Z, r24
    4cd6:	91 83       	std	Z+1, r25	; 0x01
    4cd8:	f3 01       	movw	r30, r6
    4cda:	ef cf       	rjmp	.-34     	; 0x4cba <realloc+0x114>
    4cdc:	e0 93 45 2b 	sts	0x2B45, r30	; 0x802b45 <__flp>
    4ce0:	f0 93 46 2b 	sts	0x2B46, r31	; 0x802b46 <__flp+0x1>
    4ce4:	6b cf       	rjmp	.-298    	; 0x4bbc <realloc+0x16>
    4ce6:	48 16       	cp	r4, r24
    4ce8:	59 06       	cpc	r5, r25
    4cea:	08 f4       	brcc	.+2      	; 0x4cee <realloc+0x148>
    4cec:	2c 01       	movw	r4, r24
    4cee:	7d 01       	movw	r14, r26
    4cf0:	d3 01       	movw	r26, r6
    4cf2:	9a cf       	rjmp	.-204    	; 0x4c28 <realloc+0x82>
    4cf4:	cb 01       	movw	r24, r22
    4cf6:	32 de       	rcall	.-924    	; 0x495c <malloc>
    4cf8:	7c 01       	movw	r14, r24
    4cfa:	00 97       	sbiw	r24, 0x00	; 0
    4cfc:	39 f0       	breq	.+14     	; 0x4d0c <realloc+0x166>
    4cfe:	ae 01       	movw	r20, r28
    4d00:	b8 01       	movw	r22, r16
    4d02:	07 d0       	rcall	.+14     	; 0x4d12 <memcpy>
    4d04:	c8 01       	movw	r24, r16
    4d06:	c6 de       	rcall	.-628    	; 0x4a94 <free>
    4d08:	87 01       	movw	r16, r14
    4d0a:	58 cf       	rjmp	.-336    	; 0x4bbc <realloc+0x16>
    4d0c:	10 e0       	ldi	r17, 0x00	; 0
    4d0e:	00 e0       	ldi	r16, 0x00	; 0
    4d10:	55 cf       	rjmp	.-342    	; 0x4bbc <realloc+0x16>

00004d12 <memcpy>:
memcpy():
    4d12:	fb 01       	movw	r30, r22
    4d14:	dc 01       	movw	r26, r24
    4d16:	02 c0       	rjmp	.+4      	; 0x4d1c <memcpy+0xa>
    4d18:	01 90       	ld	r0, Z+
    4d1a:	0d 92       	st	X+, r0
    4d1c:	41 50       	subi	r20, 0x01	; 1
    4d1e:	50 40       	sbci	r21, 0x00	; 0
    4d20:	d8 f7       	brcc	.-10     	; 0x4d18 <memcpy+0x6>
    4d22:	08 95       	ret

00004d24 <strcpy>:
strcpy():
    4d24:	fb 01       	movw	r30, r22
    4d26:	dc 01       	movw	r26, r24
    4d28:	01 90       	ld	r0, Z+
    4d2a:	0d 92       	st	X+, r0
    4d2c:	00 20       	and	r0, r0
    4d2e:	e1 f7       	brne	.-8      	; 0x4d28 <strcpy+0x4>
    4d30:	08 95       	ret

00004d32 <__do_global_dtors>:
__do_global_dtors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    4d32:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    4d34:	c9 e4       	ldi	r28, 0x49	; 73
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    4d36:	d1 e0       	ldi	r29, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    4d38:	03 c0       	rjmp	.+6      	; 0x4d40 <__do_global_dtors+0xe>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    4d3a:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    4d3c:	fd dd       	rcall	.-1030   	; 0x4938 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    4d3e:	21 96       	adiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    4d40:	ca 34       	cpi	r28, 0x4A	; 74
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    4d42:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    4d44:	d1 f7       	brne	.-12     	; 0x4d3a <__do_global_dtors+0x8>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    4d46:	f8 94       	cli

00004d48 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    4d48:	ff cf       	rjmp	.-2      	; 0x4d48 <__stop_program>
