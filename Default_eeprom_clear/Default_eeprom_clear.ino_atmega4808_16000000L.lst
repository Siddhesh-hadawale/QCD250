
C:\Users\SIDDHE~1.HAD\AppData\Local\Temp\arduino_build_586873/Default_eeprom_clear.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000200 <__vectors>:
__vectors():
../../../../crt1/gcrt1.S:61
 200:	47 c0       	rjmp	.+142    	; 0x290 <__ctors_end>
 202:	00 00       	nop
../../../../crt1/gcrt1.S:67
 204:	55 c0       	rjmp	.+170    	; 0x2b0 <__bad_interrupt>
 206:	00 00       	nop
../../../../crt1/gcrt1.S:68
 208:	53 c0       	rjmp	.+166    	; 0x2b0 <__bad_interrupt>
 20a:	00 00       	nop
../../../../crt1/gcrt1.S:69
 20c:	51 c0       	rjmp	.+162    	; 0x2b0 <__bad_interrupt>
 20e:	00 00       	nop
../../../../crt1/gcrt1.S:70
 210:	4f c0       	rjmp	.+158    	; 0x2b0 <__bad_interrupt>
 212:	00 00       	nop
../../../../crt1/gcrt1.S:71
 214:	4d c0       	rjmp	.+154    	; 0x2b0 <__bad_interrupt>
 216:	00 00       	nop
../../../../crt1/gcrt1.S:72
 218:	4b c0       	rjmp	.+150    	; 0x2b0 <__bad_interrupt>
 21a:	00 00       	nop
../../../../crt1/gcrt1.S:73
 21c:	49 c0       	rjmp	.+146    	; 0x2b0 <__bad_interrupt>
 21e:	00 00       	nop
../../../../crt1/gcrt1.S:74
 220:	47 c0       	rjmp	.+142    	; 0x2b0 <__bad_interrupt>
 222:	00 00       	nop
../../../../crt1/gcrt1.S:75
 224:	45 c0       	rjmp	.+138    	; 0x2b0 <__bad_interrupt>
 226:	00 00       	nop
../../../../crt1/gcrt1.S:76
 228:	43 c0       	rjmp	.+134    	; 0x2b0 <__bad_interrupt>
 22a:	00 00       	nop
../../../../crt1/gcrt1.S:77
 22c:	41 c0       	rjmp	.+130    	; 0x2b0 <__bad_interrupt>
 22e:	00 00       	nop
../../../../crt1/gcrt1.S:78
 230:	3f c0       	rjmp	.+126    	; 0x2b0 <__bad_interrupt>
 232:	00 00       	nop
../../../../crt1/gcrt1.S:79
 234:	3d c0       	rjmp	.+122    	; 0x2b0 <__bad_interrupt>
 236:	00 00       	nop
../../../../crt1/gcrt1.S:80
 238:	3b c0       	rjmp	.+118    	; 0x2b0 <__bad_interrupt>
 23a:	00 00       	nop
../../../../crt1/gcrt1.S:81
 23c:	39 c0       	rjmp	.+114    	; 0x2b0 <__bad_interrupt>
 23e:	00 00       	nop
../../../../crt1/gcrt1.S:82
 240:	37 c0       	rjmp	.+110    	; 0x2b0 <__bad_interrupt>
 242:	00 00       	nop
../../../../crt1/gcrt1.S:83
 244:	35 c0       	rjmp	.+106    	; 0x2b0 <__bad_interrupt>
 246:	00 00       	nop
../../../../crt1/gcrt1.S:84
 248:	33 c0       	rjmp	.+102    	; 0x2b0 <__bad_interrupt>
 24a:	00 00       	nop
../../../../crt1/gcrt1.S:85
 24c:	31 c0       	rjmp	.+98     	; 0x2b0 <__bad_interrupt>
 24e:	00 00       	nop
../../../../crt1/gcrt1.S:86
 250:	2f c0       	rjmp	.+94     	; 0x2b0 <__bad_interrupt>
 252:	00 00       	nop
../../../../crt1/gcrt1.S:87
 254:	2d c0       	rjmp	.+90     	; 0x2b0 <__bad_interrupt>
 256:	00 00       	nop
../../../../crt1/gcrt1.S:88
 258:	2b c0       	rjmp	.+86     	; 0x2b0 <__bad_interrupt>
 25a:	00 00       	nop
../../../../crt1/gcrt1.S:89
 25c:	29 c0       	rjmp	.+82     	; 0x2b0 <__bad_interrupt>
 25e:	00 00       	nop
../../../../crt1/gcrt1.S:90
 260:	27 c0       	rjmp	.+78     	; 0x2b0 <__bad_interrupt>
 262:	00 00       	nop
../../../../crt1/gcrt1.S:91
 264:	26 c0       	rjmp	.+76     	; 0x2b2 <__vector_25>
 266:	00 00       	nop
../../../../crt1/gcrt1.S:92
 268:	23 c0       	rjmp	.+70     	; 0x2b0 <__bad_interrupt>
 26a:	00 00       	nop
../../../../crt1/gcrt1.S:93
 26c:	21 c0       	rjmp	.+66     	; 0x2b0 <__bad_interrupt>
 26e:	00 00       	nop
../../../../crt1/gcrt1.S:94
 270:	1f c0       	rjmp	.+62     	; 0x2b0 <__bad_interrupt>
 272:	00 00       	nop
../../../../crt1/gcrt1.S:95
 274:	1d c0       	rjmp	.+58     	; 0x2b0 <__bad_interrupt>
 276:	00 00       	nop
../../../../crt1/gcrt1.S:96
 278:	1b c0       	rjmp	.+54     	; 0x2b0 <__bad_interrupt>
 27a:	00 00       	nop
../../../../crt1/gcrt1.S:97
 27c:	19 c0       	rjmp	.+50     	; 0x2b0 <__bad_interrupt>
 27e:	00 00       	nop
../../../../crt1/gcrt1.S:98
 280:	17 c0       	rjmp	.+46     	; 0x2b0 <__bad_interrupt>
 282:	00 00       	nop
../../../../crt1/gcrt1.S:99
 284:	15 c0       	rjmp	.+42     	; 0x2b0 <__bad_interrupt>
 286:	00 00       	nop
../../../../crt1/gcrt1.S:100
 288:	13 c0       	rjmp	.+38     	; 0x2b0 <__bad_interrupt>
 28a:	00 00       	nop
../../../../crt1/gcrt1.S:101
 28c:	11 c0       	rjmp	.+34     	; 0x2b0 <__bad_interrupt>
	...

00000290 <__ctors_end>:
__trampolines_start():
../../../../crt1/gcrt1.S:230
 290:	11 24       	eor	r1, r1
../../../../crt1/gcrt1.S:231
 292:	1f be       	out	0x3f, r1	; 63
../../../../crt1/gcrt1.S:232
 294:	cf ef       	ldi	r28, 0xFF	; 255
../../../../crt1/gcrt1.S:234
 296:	cd bf       	out	0x3d, r28	; 61
../../../../crt1/gcrt1.S:236
 298:	df e3       	ldi	r29, 0x3F	; 63
../../../../crt1/gcrt1.S:237
 29a:	de bf       	out	0x3e, r29	; 62

0000029c <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
 29c:	28 e2       	ldi	r18, 0x28	; 40
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
 29e:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
 2a0:	b8 e2       	ldi	r27, 0x28	; 40
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
 2a2:	01 c0       	rjmp	.+2      	; 0x2a6 <.do_clear_bss_start>

000002a4 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
 2a4:	1d 92       	st	X+, r1

000002a6 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
 2a6:	a4 30       	cpi	r26, 0x04	; 4
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
 2a8:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
 2aa:	e1 f7       	brne	.-8      	; 0x2a4 <.do_clear_bss_loop>
.do_clear_bss_start():
../../../../crt1/gcrt1.S:314
 2ac:	2a d0       	rcall	.+84     	; 0x302 <main>
../../../../crt1/gcrt1.S:315
 2ae:	c1 c0       	rjmp	.+386    	; 0x432 <_exit>

000002b0 <__bad_interrupt>:
__vector_22():
 2b0:	a7 cf       	rjmp	.-178    	; 0x200 <__vectors>

000002b2 <__vector_25>:
__vector_25():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:74
#elif defined(MILLIS_USE_TIMERB2)
ISR(TCB2_INT_vect)
#else // fallback or defined(MILLIS_USE_TIMERB3)
ISR(TCB3_INT_vect)
#endif
{
 2b2:	1f 92       	push	r1
 2b4:	0f 92       	push	r0
 2b6:	0f b6       	in	r0, 0x3f	; 63
 2b8:	0f 92       	push	r0
 2ba:	11 24       	eor	r1, r1
 2bc:	8f 93       	push	r24
 2be:	9f 93       	push	r25
 2c0:	af 93       	push	r26
 2c2:	bf 93       	push	r27
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:75
  timer_millis++;
 2c4:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
 2c8:	90 91 01 28 	lds	r25, 0x2801	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
 2cc:	a0 91 02 28 	lds	r26, 0x2802	; 0x802802 <__DATA_REGION_ORIGIN__+0x2>
 2d0:	b0 91 03 28 	lds	r27, 0x2803	; 0x802803 <__DATA_REGION_ORIGIN__+0x3>
 2d4:	01 96       	adiw	r24, 0x01	; 1
 2d6:	a1 1d       	adc	r26, r1
 2d8:	b1 1d       	adc	r27, r1
 2da:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
 2de:	90 93 01 28 	sts	0x2801, r25	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
 2e2:	a0 93 02 28 	sts	0x2802, r26	; 0x802802 <__DATA_REGION_ORIGIN__+0x2>
 2e6:	b0 93 03 28 	sts	0x2803, r27	; 0x802803 <__DATA_REGION_ORIGIN__+0x3>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:78

  /* Clear flag */
  _timer->INTFLAGS = TCB_CAPT_bm;
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	80 93 a6 0a 	sts	0x0AA6, r24	; 0x800aa6 <__TEXT_REGION_LENGTH__+0x7f4aa6>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:79
}
 2f0:	bf 91       	pop	r27
 2f2:	af 91       	pop	r26
 2f4:	9f 91       	pop	r25
 2f6:	8f 91       	pop	r24
 2f8:	0f 90       	pop	r0
 2fa:	0f be       	out	0x3f, r0	; 63
 2fc:	0f 90       	pop	r0
 2fe:	1f 90       	pop	r1
 300:	18 95       	reti

00000302 <main>:
main():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:355
#if (F_CPU == 20000000L)
  /* No division on clock */
  _PROTECTED_WRITE(CLKCTRL_MCLKCTRLB, 0x00);
#elif (F_CPU == 16000000L)
  /* No division on clock */
  _PROTECTED_WRITE(CLKCTRL_MCLKCTRLB, 0x00);
 302:	88 ed       	ldi	r24, 0xD8	; 216
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	84 bf       	out	0x34, r24	; 52
 308:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f4061>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:388
  /* ADC clock between 50-200 kHz */

#if (F_CPU >= 20000000L) // 20 MHz / 128 = 156.250 kHz
  ADC0.CTRLC |= ADC_PRESC_DIV128_gc;
#elif (F_CPU >= 16000000L) // 16 MHz / 128 = 125 kHz
  ADC0.CTRLC |= ADC_PRESC_DIV128_gc;
 30c:	80 91 02 06 	lds	r24, 0x0602	; 0x800602 <__TEXT_REGION_LENGTH__+0x7f4602>
 310:	86 60       	ori	r24, 0x06	; 6
 312:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x7f4602>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:402
#else                      // 128 kHz / 2 = 64 kHz -> This is the closest you can get, the prescaler is 2
  ADC0.CTRLC |= ADC_PRESC_DIV2_gc;
#endif

  /* Enable ADC */
  ADC0.CTRLA |= ADC_ENABLE_bm;
 316:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <__TEXT_REGION_LENGTH__+0x7f4600>
 31a:	81 60       	ori	r24, 0x01	; 1
 31c:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x7f4600>
analogReference():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_analog.c:35
{
  switch (mode)
  {
    case EXTERNAL:
    case VDD:
      ADC0.CTRLC = (ADC0.CTRLC & ~(ADC_REFSEL_gm)) | mode | ADC_SAMPCAP_bm; // Per datasheet, recommended SAMPCAP=1 at ref > 1v - we don't *KNOW* the external reference will be >1v, but it's probably more likely...
 320:	80 91 02 06 	lds	r24, 0x0602	; 0x800602 <__TEXT_REGION_LENGTH__+0x7f4602>
 324:	8f 7c       	andi	r24, 0xCF	; 207
 326:	80 65       	ori	r24, 0x50	; 80
 328:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x7f4602>
main():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:407
  analogReference(VDD);

#endif

  PORTMUX.USARTROUTEA = 0;
 32c:	10 92 e2 05 	sts	0x05E2, r1	; 0x8005e2 <__TEXT_REGION_LENGTH__+0x7f45e2>
setup_timers():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:446
void setup_timers()
{
  //  TYPE A TIMER

  // PORTMUX setting for TCA (defined in pins_arduino.h)
  PORTMUX.TCAROUTEA = TCA0_PINS;
 330:	83 e0       	ldi	r24, 0x03	; 3
 332:	80 93 e4 05 	sts	0x05E4, r24	; 0x8005e4 <__TEXT_REGION_LENGTH__+0x7f45e4>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:449

  // Enable split mode before anything else
  TCA0.SPLIT.CTRLD = TCA_SINGLE_SPLITM_bm;
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <__TEXT_REGION_LENGTH__+0x7f4a03>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:453

  // Period setting, two 8 bit registers
  TCA0.SPLIT.LPER =
      TCA0.SPLIT.HPER = PWM_TIMER_PERIOD;
 33c:	9e ef       	ldi	r25, 0xFE	; 254
 33e:	90 93 27 0a 	sts	0x0A27, r25	; 0x800a27 <__TEXT_REGION_LENGTH__+0x7f4a27>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:452

  // Enable split mode before anything else
  TCA0.SPLIT.CTRLD = TCA_SINGLE_SPLITM_bm;

  // Period setting, two 8 bit registers
  TCA0.SPLIT.LPER =
 342:	90 93 26 0a 	sts	0x0A26, r25	; 0x800a26 <__TEXT_REGION_LENGTH__+0x7f4a26>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:461
  TCA0.SPLIT.LCMP0 =
      TCA0.SPLIT.LCMP1 =
          TCA0.SPLIT.LCMP2 =
              TCA0.SPLIT.HCMP0 =
                  TCA0.SPLIT.HCMP1 =
                      TCA0.SPLIT.HCMP2 = PWM_TIMER_COMPARE;
 346:	80 e8       	ldi	r24, 0x80	; 128
 348:	80 93 2d 0a 	sts	0x0A2D, r24	; 0x800a2d <__TEXT_REGION_LENGTH__+0x7f4a2d>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:460
  // Default duty 50%, will re-assign in analogWrite()
  TCA0.SPLIT.LCMP0 =
      TCA0.SPLIT.LCMP1 =
          TCA0.SPLIT.LCMP2 =
              TCA0.SPLIT.HCMP0 =
                  TCA0.SPLIT.HCMP1 =
 34c:	80 93 2b 0a 	sts	0x0A2B, r24	; 0x800a2b <__TEXT_REGION_LENGTH__+0x7f4a2b>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:459

  // Default duty 50%, will re-assign in analogWrite()
  TCA0.SPLIT.LCMP0 =
      TCA0.SPLIT.LCMP1 =
          TCA0.SPLIT.LCMP2 =
              TCA0.SPLIT.HCMP0 =
 350:	80 93 29 0a 	sts	0x0A29, r24	; 0x800a29 <__TEXT_REGION_LENGTH__+0x7f4a29>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:458
      TCA0.SPLIT.HPER = PWM_TIMER_PERIOD;

  // Default duty 50%, will re-assign in analogWrite()
  TCA0.SPLIT.LCMP0 =
      TCA0.SPLIT.LCMP1 =
          TCA0.SPLIT.LCMP2 =
 354:	80 93 2c 0a 	sts	0x0A2C, r24	; 0x800a2c <__TEXT_REGION_LENGTH__+0x7f4a2c>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:457
  TCA0.SPLIT.LPER =
      TCA0.SPLIT.HPER = PWM_TIMER_PERIOD;

  // Default duty 50%, will re-assign in analogWrite()
  TCA0.SPLIT.LCMP0 =
      TCA0.SPLIT.LCMP1 =
 358:	80 93 2a 0a 	sts	0x0A2A, r24	; 0x800a2a <__TEXT_REGION_LENGTH__+0x7f4a2a>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:456
  // Period setting, two 8 bit registers
  TCA0.SPLIT.LPER =
      TCA0.SPLIT.HPER = PWM_TIMER_PERIOD;

  // Default duty 50%, will re-assign in analogWrite()
  TCA0.SPLIT.LCMP0 =
 35c:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__TEXT_REGION_LENGTH__+0x7f4a28>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:474
#elif F_CPU <= 8000000L
  // Use DIV16 prescaler (giving 250kHz clocke on 4MHz, 500kHz clock on 8MHz), enable TCA timer
  TCA0.SPLIT.CTRLA = (TCA_SPLIT_CLKSEL_DIV16_gc) | (TCA_SPLIT_ENABLE_bm);
#else
  // Use DIV64 prescaler (giving 250kHz clock on 16MHz), enable TCA timer
  TCA0.SPLIT.CTRLA = (TCA_SPLIT_CLKSEL_DIV64_gc) | (TCA_SPLIT_ENABLE_bm);
 360:	2b e0       	ldi	r18, 0x0B	; 11
 362:	20 93 00 0a 	sts	0x0A00, r18	; 0x800a00 <__TEXT_REGION_LENGTH__+0x7f4a00>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:480
#endif

  //  TYPE B TIMERS

  // Set up routing (defined in pins_arduino.h)
  PORTMUX.TCBROUTEA = 0
 366:	10 92 e5 05 	sts	0x05E5, r1	; 0x8005e5 <__TEXT_REGION_LENGTH__+0x7f45e5>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:513

  // Timer B Setup loop for TCB[0:end]
  do
  {
    // 8 bit PWM mode, but do not enable output yet, will do in analogWrite()
    timer_B->CTRLB = (TCB_CNTMODE_PWM8_gc);
 36a:	37 e0       	ldi	r19, 0x07	; 7
 36c:	30 93 81 0a 	sts	0x0A81, r19	; 0x800a81 <__TEXT_REGION_LENGTH__+0x7f4a81>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:516

    // Assign 8-bit period
    timer_B->CCMPL = PWM_TIMER_PERIOD;
 370:	90 93 8c 0a 	sts	0x0A8C, r25	; 0x800a8c <__TEXT_REGION_LENGTH__+0x7f4a8c>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:519

    // default duty 50%, set when output enabled
    timer_B->CCMPH = PWM_TIMER_COMPARE;
 374:	80 93 8d 0a 	sts	0x0A8D, r24	; 0x800a8d <__TEXT_REGION_LENGTH__+0x7f4a8d>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:523

    // Use TCA clock (250kHz) and enable
    // (sync update commented out, might try to synchronize later
    timer_B->CTRLA = (TCB_CLKSEL_CLKTCA_gc)
 378:	25 e0       	ldi	r18, 0x05	; 5
 37a:	20 93 80 0a 	sts	0x0A80, r18	; 0x800a80 <__TEXT_REGION_LENGTH__+0x7f4a80>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:513

  // Timer B Setup loop for TCB[0:end]
  do
  {
    // 8 bit PWM mode, but do not enable output yet, will do in analogWrite()
    timer_B->CTRLB = (TCB_CNTMODE_PWM8_gc);
 37e:	30 93 91 0a 	sts	0x0A91, r19	; 0x800a91 <__TEXT_REGION_LENGTH__+0x7f4a91>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:516

    // Assign 8-bit period
    timer_B->CCMPL = PWM_TIMER_PERIOD;
 382:	90 93 9c 0a 	sts	0x0A9C, r25	; 0x800a9c <__TEXT_REGION_LENGTH__+0x7f4a9c>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:519

    // default duty 50%, set when output enabled
    timer_B->CCMPH = PWM_TIMER_COMPARE;
 386:	80 93 9d 0a 	sts	0x0A9D, r24	; 0x800a9d <__TEXT_REGION_LENGTH__+0x7f4a9d>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:523

    // Use TCA clock (250kHz) and enable
    // (sync update commented out, might try to synchronize later
    timer_B->CTRLA = (TCB_CLKSEL_CLKTCA_gc)
 38a:	20 93 90 0a 	sts	0x0A90, r18	; 0x800a90 <__TEXT_REGION_LENGTH__+0x7f4a90>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:513

  // Timer B Setup loop for TCB[0:end]
  do
  {
    // 8 bit PWM mode, but do not enable output yet, will do in analogWrite()
    timer_B->CTRLB = (TCB_CNTMODE_PWM8_gc);
 38e:	30 93 a1 0a 	sts	0x0AA1, r19	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x7f4aa1>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:516

    // Assign 8-bit period
    timer_B->CCMPL = PWM_TIMER_PERIOD;
 392:	90 93 ac 0a 	sts	0x0AAC, r25	; 0x800aac <__TEXT_REGION_LENGTH__+0x7f4aac>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:519

    // default duty 50%, set when output enabled
    timer_B->CCMPH = PWM_TIMER_COMPARE;
 396:	80 93 ad 0a 	sts	0x0AAD, r24	; 0x800aad <__TEXT_REGION_LENGTH__+0x7f4aad>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:523

    // Use TCA clock (250kHz) and enable
    // (sync update commented out, might try to synchronize later
    timer_B->CTRLA = (TCB_CLKSEL_CLKTCA_gc)
 39a:	20 93 a0 0a 	sts	0x0AA0, r18	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x7f4aa0>
main():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:416
  /********************* TCB for system time tracking **************************/

  // BUG: we can compensate for F_CPU by fine tuning value of TIME_TRACKING_TIMER_COUNT

  /* Select vanilla 16 bit periodic interrupt mode */
  _timer->CTRLB = TCB_CNTMODE_INT_gc;
 39e:	10 92 a1 0a 	sts	0x0AA1, r1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x7f4aa1>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:419

  /* TOP value for overflow every N clock cycles */
  _timer->CCMP = TIME_TRACKING_TIMER_COUNT - 1;
 3a2:	8f e7       	ldi	r24, 0x7F	; 127
 3a4:	9e e3       	ldi	r25, 0x3E	; 62
 3a6:	80 93 ac 0a 	sts	0x0AAC, r24	; 0x800aac <__TEXT_REGION_LENGTH__+0x7f4aac>
 3aa:	90 93 ad 0a 	sts	0x0AAD, r25	; 0x800aad <__TEXT_REGION_LENGTH__+0x7f4aad>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:422

  /* Enable TCB interrupt */
  _timer->INTCTRL |= TCB_CAPT_bm;
 3ae:	80 91 a5 0a 	lds	r24, 0x0AA5	; 0x800aa5 <__TEXT_REGION_LENGTH__+0x7f4aa5>
 3b2:	81 60       	ori	r24, 0x01	; 1
 3b4:	80 93 a5 0a 	sts	0x0AA5, r24	; 0x800aa5 <__TEXT_REGION_LENGTH__+0x7f4aa5>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:426

  /* Clock selection is F_CPU/N -- which is independent of TCA */
#if TIME_TRACKING_TIMER_DIVIDER == 1
  _timer->CTRLA = TCB_CLKSEL_CLKDIV1_gc; /* F_CPU */
 3b8:	10 92 a0 0a 	sts	0x0AA0, r1	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x7f4aa0>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:434
#else
#assert "TIME_TRACKING_TIMER_DIVIDER not supported"
#endif

  /* Enable & start */
  _timer->CTRLA |= TCB_ENABLE_bm; /* Keep this last before enabling interrupts to ensure tracking as accurate as possible */
 3bc:	80 91 a0 0a 	lds	r24, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x7f4aa0>
 3c0:	81 60       	ori	r24, 0x01	; 1
 3c2:	80 93 a0 0a 	sts	0x0AA0, r24	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x7f4aa0>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring.c:438

  /*************************** ENABLE GLOBAL INTERRUPTS *************************/

  sei();
 3c6:	78 94       	sei
pinMode():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:43
    return;

  if (mode == OUTPUT)
  {
    /* Configure direction as output */
    port->DIRSET = bit_mask;
 3c8:	82 e0       	ldi	r24, 0x02	; 2
 3ca:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <__TEXT_REGION_LENGTH__+0x7f4461>
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	80 e0       	ldi	r24, 0x00	; 0
nvm_write_byte():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\EEPROM\src/EEPROM.h:40
static void nvm_write_byte(uint16_t idx, uint8_t dat)
{
  *(uint8_t *)((idx & 0xFF) | ((idx & 0x100) ? USER_SIGNATURES_START : EEPROM_START)) = dat;
  uint8_t oldSREG = SREG;
  cli();
  _PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_PAGEERASEWRITE_gc);
 3d2:	2d e9       	ldi	r18, 0x9D	; 157
 3d4:	33 e0       	ldi	r19, 0x03	; 3
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\EEPROM\src/EEPROM.h:37

#define nvm_read_byte(idx) *(uint8_t *)((idx & 0xFF) | ((idx & 0x100) ? USER_SIGNATURES_START : EEPROM_START))

static void nvm_write_byte(uint16_t idx, uint8_t dat)
{
  *(uint8_t *)((idx & 0xFF) | ((idx & 0x100) ? USER_SIGNATURES_START : EEPROM_START)) = dat;
 3d6:	fc 01       	movw	r30, r24
 3d8:	f4 61       	ori	r31, 0x14	; 20
 3da:	10 82       	st	Z, r1
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\EEPROM\src/EEPROM.h:38
  uint8_t oldSREG = SREG;
 3dc:	4f b7       	in	r20, 0x3f	; 63
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\EEPROM\src/EEPROM.h:39
  cli();
 3de:	f8 94       	cli
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\EEPROM\src/EEPROM.h:40
  _PROTECTED_WRITE_SPM(NVMCTRL.CTRLA, NVMCTRL_CMD_PAGEERASEWRITE_gc);
 3e0:	24 bf       	out	0x34, r18	; 52
 3e2:	30 93 00 10 	sts	0x1000, r19	; 0x801000 <__TEXT_REGION_LENGTH__+0x7f5000>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\EEPROM\src/EEPROM.h:41
  SREG = oldSREG;
 3e6:	4f bf       	out	0x3f, r20	; 63
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\libraries\EEPROM\src/EEPROM.h:42
  while (NVMCTRL.STATUS & NVMCTRL_EEBUSY_bm)
 3e8:	40 91 02 10 	lds	r20, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x7f5002>
 3ec:	41 fd       	sbrc	r20, 1
 3ee:	fc cf       	rjmp	.-8      	; 0x3e8 <main+0xe6>
setup():
I:\Siddhesh Hadawale\PRODUCTION CODE\QCD250\Default_eeprom_clear/Default_eeprom_clear.ino:29

    Rather than hard-coding the length, you should use the pre-provided length function.
    This will make your code portable to all AVR processors.
  ***/

  for (unsigned int i = 0 ; i < EEPROM.length() ; i++) {
 3f0:	01 96       	adiw	r24, 0x01	; 1
 3f2:	81 15       	cp	r24, r1
 3f4:	41 e0       	ldi	r20, 0x01	; 1
 3f6:	94 07       	cpc	r25, r20
 3f8:	71 f7       	brne	.-36     	; 0x3d6 <main+0xd4>
turnOffPWM():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:113
      /* Bit position will give output channel */
      bit_pos = digitalPinToBitPosition(pin);

      /* Disable corresponding channel */
      if (bit_pos >= 3) ++bit_pos; /* Upper 3 bits are shifted by 1 */
      TCA0.SPLIT.CTRLB &= ~(1 << (TCA_SPLIT_LCMP0EN_bp + bit_pos));
 3fa:	80 91 01 0a 	lds	r24, 0x0A01	; 0x800a01 <__TEXT_REGION_LENGTH__+0x7f4a01>
 3fe:	8d 7f       	andi	r24, 0xFD	; 253
 400:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <__TEXT_REGION_LENGTH__+0x7f4a01>
digitalWrite():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:153

  /* Get port */
  PORT_t *port = digitalPinToPortStruct(pin);

  /* Output direction */
  if (port->DIR & bit_mask)
 404:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <__TEXT_REGION_LENGTH__+0x7f4460>
 408:	81 ff       	sbrs	r24, 1
 40a:	0a c0       	rjmp	.+20     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:167
      port->OUTTGL = bit_mask;
      /* If HIGH OR  > TOGGLE  */
    }
    else
    {
      port->OUTSET = bit_mask;
 40c:	82 e0       	ldi	r24, 0x02	; 2
 40e:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <__TEXT_REGION_LENGTH__+0x7f4465>
main():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/main.cpp:43
  setup();

  for (;;)
  {
    loop();
    if (serialEventRun) serialEventRun();
 412:	c0 e0       	ldi	r28, 0x00	; 0
 414:	d0 e0       	ldi	r29, 0x00	; 0
 416:	20 97       	sbiw	r28, 0x00	; 0
 418:	f1 f3       	breq	.-4      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 41a:	0e 94 00 00 	call	0	; 0x0 <__TEXT_REGION_ORIGIN__>
 41e:	fb cf       	rjmp	.-10     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
digitalWrite():
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:186

    /* Calculate where pin control register is */
    volatile uint8_t *pin_ctrl_reg = getPINnCTRLregister(port, bit_pos);

    /* Save system status and disable interrupts */
    uint8_t status = SREG;
 420:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:187
    cli();
 422:	f8 94       	cli
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:197
      *pin_ctrl_reg &= ~PORT_PULLUPEN_bm;
    }
    else
    {
      /* Enable pull-up */
      *pin_ctrl_reg |= PORT_PULLUPEN_bm;
 424:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <__TEXT_REGION_LENGTH__+0x7f4471>
 428:	88 60       	ori	r24, 0x08	; 8
 42a:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <__TEXT_REGION_LENGTH__+0x7f4471>
C:\Users\Siddhesh.Hadawale\Documents\ArduinoData\packages\MegaCoreX\hardware\megaavr\1.1.2\cores\coreX-corefiles/wiring_digital.c:201
    }

    /* Restore system status */
    SREG = status;
 42e:	9f bf       	out	0x3f, r25	; 63
 430:	f0 cf       	rjmp	.-32     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>

00000432 <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
 432:	f8 94       	cli

00000434 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
 434:	ff cf       	rjmp	.-2      	; 0x434 <__stop_program>
